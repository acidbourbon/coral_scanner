
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006e  00800100  00001816  000018aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001816  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000134  0080016e  0080016e  00001918  2**0
                  ALLOC
  3 .stab         0000228c  00000000  00000000  00001918  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000044f  00000000  00000000  00003ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000538  00000000  00000000  00003ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000e11  00000000  00000000  0000452b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008cae  00000000  00000000  0000533c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021b9  00000000  00000000  0000dfea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000075f0  00000000  00000000  000101a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000830  00000000  00000000  00017794  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003bf7  00000000  00000000  00017fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000464d  00000000  00000000  0001bbbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001111  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000790  00000000  00000000  00021319  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	b4 c0       	rjmp	.+360    	; 0x16e <__bad_interrupt>
       6:	00 00       	nop
       8:	b2 c0       	rjmp	.+356    	; 0x16e <__bad_interrupt>
       a:	00 00       	nop
       c:	b0 c0       	rjmp	.+352    	; 0x16e <__bad_interrupt>
       e:	00 00       	nop
      10:	ae c0       	rjmp	.+348    	; 0x16e <__bad_interrupt>
      12:	00 00       	nop
      14:	ac c0       	rjmp	.+344    	; 0x16e <__bad_interrupt>
      16:	00 00       	nop
      18:	aa c0       	rjmp	.+340    	; 0x16e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a8 c0       	rjmp	.+336    	; 0x16e <__bad_interrupt>
      1e:	00 00       	nop
      20:	a6 c0       	rjmp	.+332    	; 0x16e <__bad_interrupt>
      22:	00 00       	nop
      24:	a4 c0       	rjmp	.+328    	; 0x16e <__bad_interrupt>
      26:	00 00       	nop
      28:	a2 c0       	rjmp	.+324    	; 0x16e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	52 c6       	rjmp	.+3236   	; 0xcd2 <__vector_11>
      2e:	00 00       	nop
      30:	f4 c6       	rjmp	.+3560   	; 0xe1a <__vector_12>
      32:	00 00       	nop
      34:	9c c0       	rjmp	.+312    	; 0x16e <__bad_interrupt>
      36:	00 00       	nop
      38:	9a c0       	rjmp	.+308    	; 0x16e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	98 c0       	rjmp	.+304    	; 0x16e <__bad_interrupt>
      3e:	00 00       	nop
      40:	96 c0       	rjmp	.+300    	; 0x16e <__bad_interrupt>
      42:	00 00       	nop
      44:	94 c0       	rjmp	.+296    	; 0x16e <__bad_interrupt>
      46:	00 00       	nop
      48:	92 c0       	rjmp	.+292    	; 0x16e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	90 c0       	rjmp	.+288    	; 0x16e <__bad_interrupt>
      4e:	00 00       	nop
      50:	8e c0       	rjmp	.+284    	; 0x16e <__bad_interrupt>
      52:	00 00       	nop
      54:	d6 c0       	rjmp	.+428    	; 0x202 <__vector_21>
      56:	00 00       	nop
      58:	8a c0       	rjmp	.+276    	; 0x16e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a6 c2       	rjmp	.+1356   	; 0x5aa <__vector_23>
      5e:	00 00       	nop
      60:	86 c0       	rjmp	.+268    	; 0x16e <__bad_interrupt>
      62:	00 00       	nop
      64:	84 c0       	rjmp	.+264    	; 0x16e <__bad_interrupt>
      66:	00 00       	nop
      68:	82 c0       	rjmp	.+260    	; 0x16e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	80 c0       	rjmp	.+256    	; 0x16e <__bad_interrupt>
      6e:	00 00       	nop
      70:	7e c0       	rjmp	.+252    	; 0x16e <__bad_interrupt>
      72:	00 00       	nop
      74:	7c c0       	rjmp	.+248    	; 0x16e <__bad_interrupt>
      76:	00 00       	nop
      78:	7a c0       	rjmp	.+244    	; 0x16e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	78 c0       	rjmp	.+240    	; 0x16e <__bad_interrupt>
      7e:	00 00       	nop
      80:	76 c0       	rjmp	.+236    	; 0x16e <__bad_interrupt>
      82:	00 00       	nop
      84:	74 c0       	rjmp	.+232    	; 0x16e <__bad_interrupt>
      86:	00 00       	nop
      88:	72 c0       	rjmp	.+228    	; 0x16e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	70 c0       	rjmp	.+224    	; 0x16e <__bad_interrupt>
      8e:	00 00       	nop
      90:	6e c0       	rjmp	.+220    	; 0x16e <__bad_interrupt>
      92:	00 00       	nop
      94:	6c c0       	rjmp	.+216    	; 0x16e <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      da:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000e8 <LanguageString>:
      e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
      ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
     106:	2e 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     ..L.U.F.A. .U.S.
     116:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
     126:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d4 e0       	ldi	r29, 0x04	; 4
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	e6 e1       	ldi	r30, 0x16	; 22
     14a:	f8 e1       	ldi	r31, 0x18	; 24
     14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x10>
     14e:	05 90       	lpm	r0, Z+
     150:	0d 92       	st	X+, r0
     152:	ae 36       	cpi	r26, 0x6E	; 110
     154:	b1 07       	cpc	r27, r17
     156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0xc>

00000158 <__do_clear_bss>:
     158:	12 e0       	ldi	r17, 0x02	; 2
     15a:	ae e6       	ldi	r26, 0x6E	; 110
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
     160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
     162:	a2 3a       	cpi	r26, 0xA2	; 162
     164:	b1 07       	cpc	r27, r17
     166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
     168:	2d d3       	rcall	.+1626   	; 0x7c4 <main>
     16a:	0c 94 09 0c 	jmp	0x1812	; 0x1812 <_exit>

0000016e <__bad_interrupt>:
     16e:	48 cf       	rjmp	.-368    	; 0x0 <__vectors>

00000170 <RingBuffer_Insert>:
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     170:	fc 01       	movw	r30, r24

			*Buffer->In = Data;
     172:	a0 81       	ld	r26, Z
     174:	b1 81       	ldd	r27, Z+1	; 0x01
     176:	6c 93       	st	X, r22

			if (++Buffer->In == Buffer->End)
     178:	80 81       	ld	r24, Z
     17a:	91 81       	ldd	r25, Z+1	; 0x01
     17c:	01 96       	adiw	r24, 0x01	; 1
     17e:	91 83       	std	Z+1, r25	; 0x01
     180:	80 83       	st	Z, r24
     182:	26 81       	ldd	r18, Z+6	; 0x06
     184:	37 81       	ldd	r19, Z+7	; 0x07
     186:	82 17       	cp	r24, r18
     188:	93 07       	cpc	r25, r19
     18a:	21 f4       	brne	.+8      	; 0x194 <RingBuffer_Insert+0x24>
			  Buffer->In = Buffer->Start;
     18c:	84 81       	ldd	r24, Z+4	; 0x04
     18e:	95 81       	ldd	r25, Z+5	; 0x05
     190:	91 83       	std	Z+1, r25	; 0x01
     192:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     194:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     196:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     198:	82 85       	ldd	r24, Z+10	; 0x0a
     19a:	93 85       	ldd	r25, Z+11	; 0x0b
     19c:	01 96       	adiw	r24, 0x01	; 1
     19e:	93 87       	std	Z+11, r25	; 0x0b
     1a0:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1a2:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
     1a4:	08 95       	ret

000001a6 <RingBuffer_Remove>:
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1a6:	fc 01       	movw	r30, r24

			uint8_t Data = *Buffer->Out;
     1a8:	a2 81       	ldd	r26, Z+2	; 0x02
     1aa:	b3 81       	ldd	r27, Z+3	; 0x03
     1ac:	8d 91       	ld	r24, X+

			if (++Buffer->Out == Buffer->End)
     1ae:	b3 83       	std	Z+3, r27	; 0x03
     1b0:	a2 83       	std	Z+2, r26	; 0x02
     1b2:	26 81       	ldd	r18, Z+6	; 0x06
     1b4:	37 81       	ldd	r19, Z+7	; 0x07
     1b6:	a2 17       	cp	r26, r18
     1b8:	b3 07       	cpc	r27, r19
     1ba:	21 f4       	brne	.+8      	; 0x1c4 <RingBuffer_Remove+0x1e>
			  Buffer->Out = Buffer->Start;
     1bc:	24 81       	ldd	r18, Z+4	; 0x04
     1be:	35 81       	ldd	r19, Z+5	; 0x05
     1c0:	33 83       	std	Z+3, r19	; 0x03
     1c2:	22 83       	std	Z+2, r18	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1c4:	9f b7       	in	r25, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1c6:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     1c8:	22 85       	ldd	r18, Z+10	; 0x0a
     1ca:	33 85       	ldd	r19, Z+11	; 0x0b
     1cc:	21 50       	subi	r18, 0x01	; 1
     1ce:	30 40       	sbci	r19, 0x00	; 0
     1d0:	33 87       	std	Z+11, r19	; 0x0b
     1d2:	22 87       	std	Z+10, r18	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1d4:	9f bf       	out	0x3f, r25	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);

			return Data;
		}
     1d6:	08 95       	ret

000001d8 <RingBuffer_InitBuffer.clone.0>:
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1d8:	fc 01       	movw	r30, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1da:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1dc:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     1de:	71 83       	std	Z+1, r23	; 0x01
     1e0:	60 83       	st	Z, r22
			Buffer->Out    = DataPtr;
     1e2:	73 83       	std	Z+3, r23	; 0x03
     1e4:	62 83       	std	Z+2, r22	; 0x02
			Buffer->Start  = &DataPtr[0];
     1e6:	75 83       	std	Z+5, r23	; 0x05
     1e8:	64 83       	std	Z+4, r22	; 0x04
			Buffer->End    = &DataPtr[Size];
     1ea:	60 58       	subi	r22, 0x80	; 128
     1ec:	7f 4f       	sbci	r23, 0xFF	; 255
     1ee:	77 83       	std	Z+7, r23	; 0x07
     1f0:	66 83       	std	Z+6, r22	; 0x06
			Buffer->Size   = Size;
     1f2:	80 e8       	ldi	r24, 0x80	; 128
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	91 87       	std	Z+9, r25	; 0x09
     1f8:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     1fa:	13 86       	std	Z+11, r1	; 0x0b
     1fc:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1fe:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
     200:	08 95       	ret

00000202 <__vector_21>:
u08 adb_werte[MAX_ADB];
u08 t0ovfcount;
volatile u08 adb_data_length;


ISR( TIMER0_OVF_vect) {
     202:	1f 92       	push	r1
     204:	0f 92       	push	r0
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	0f 92       	push	r0
     20a:	11 24       	eor	r1, r1
     20c:	8f 93       	push	r24
	t0ovfcount++;
     20e:	80 91 94 02 	lds	r24, 0x0294
     212:	8f 5f       	subi	r24, 0xFF	; 255
     214:	80 93 94 02 	sts	0x0294, r24
}
     218:	8f 91       	pop	r24
     21a:	0f 90       	pop	r0
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	0f 90       	pop	r0
     220:	1f 90       	pop	r1
     222:	18 95       	reti

00000224 <t0ext>:

uint16_t t0ext(void) {
	return (t0ovfcount * 256 + (u16) TCNT0); // return current counter value
     224:	86 b5       	in	r24, 0x26	; 38
     226:	30 91 94 02 	lds	r19, 0x0294
     22a:	20 e0       	ldi	r18, 0x00	; 0
     22c:	28 0f       	add	r18, r24
     22e:	31 1d       	adc	r19, r1
	// plus number of already passed counter cycles times 256
}
     230:	c9 01       	movw	r24, r18
     232:	08 95       	ret

00000234 <t0rst>:

void t0rst(void) {
	TCNT0 = 0; // set counter to zero
     234:	16 bc       	out	0x26, r1	; 38
	t0ovfcount = 0; // set overflow counter to zero
     236:	10 92 94 02 	sts	0x0294, r1

}
     23a:	08 95       	ret

0000023c <adb>:
// Befehl in adb_werte[0]. Empfangene bzw. zu sendende Daten in adb_werte[1 bis 8]




u08 adb(void) {
     23c:	df 92       	push	r13
     23e:	ef 92       	push	r14
     240:	ff 92       	push	r15
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
#define ADB_IMPULS_TLT TAKT/ADB_VORTEILER_B*250/1000000 // !!! 375 mach das mit anderem prescaler
//	#define ADB_IMPULS_TLT TAKT/ADB_VORTEILER_A*31/1000000 // modified
	//#define ADB_IMPULS_PAUSE TAKT/ADB_VORTEILER_B*200/1000000

	//Attention Signal
	TCCR0B = ADB_VORTEILER_A_BIT;
     24a:	83 e0       	ldi	r24, 0x03	; 3
     24c:	85 bd       	out	0x25, r24	; 37
	t0rst(); //  TCNT0 = 0; // Zähler auf null setzen
     24e:	f2 df       	rcall	.-28     	; 0x234 <t0rst>
	ADB_PDIR |= ADB_BIT; // Ausgang 0
     250:	50 9a       	sbi	0x0a, 0	; 10
	ADB_POUT &= ~ADB_BIT;
     252:	58 98       	cbi	0x0b, 0	; 11
	while (t0ext() < ADB_IMPULS_ATT)
     254:	e7 df       	rcall	.-50     	; 0x224 <t0ext>
     256:	bc 01       	movw	r22, r24
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 31 0b 	call	0x1662	; 0x1662 <__floatunsisf>
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	30 e8       	ldi	r19, 0x80	; 128
     264:	4e e0       	ldi	r20, 0x0E	; 14
     266:	53 e4       	ldi	r21, 0x43	; 67
     268:	0e 94 99 0a 	call	0x1532	; 0x1532 <__cmpsf2>
     26c:	87 fd       	sbrc	r24, 7
     26e:	f2 cf       	rjmp	.-28     	; 0x254 <adb+0x18>
		; // Warteschleife

	TCCR0B = ADB_VORTEILER_B_BIT; // ab hier alles im schnellen modus
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	85 bd       	out	0x25, r24	; 37

	anzahl_out = 1; // Mindestens Befehl übertragen
     274:	dd 24       	eor	r13, r13
     276:	d3 94       	inc	r13
	z_byte = 0;
     278:	10 e0       	ldi	r17, 0x00	; 0
	do {
		// START BIT (1)
		t0rst(); //  TCNT0 = 0;
     27a:	dc df       	rcall	.-72     	; 0x234 <t0rst>
		ADB_PDIR |= ADB_BIT; // Ausgang 0
     27c:	50 9a       	sbi	0x0a, 0	; 10
		ADB_POUT &= ~ADB_BIT;
     27e:	58 98       	cbi	0x0b, 0	; 11
		while (t0ext() < ADB_IMPULS_KURZ)
     280:	d1 df       	rcall	.-94     	; 0x224 <t0ext>
     282:	bc 01       	movw	r22, r24
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 31 0b 	call	0x1662	; 0x1662 <__floatunsisf>
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	4c e8       	ldi	r20, 0x8C	; 140
     292:	52 e4       	ldi	r21, 0x42	; 66
     294:	0e 94 99 0a 	call	0x1532	; 0x1532 <__cmpsf2>
     298:	87 fd       	sbrc	r24, 7
     29a:	f2 cf       	rjmp	.-28     	; 0x280 <adb+0x44>
			;
		ADB_PDIR &= ~ADB_BIT; // Eingang über Pullup
     29c:	50 98       	cbi	0x0a, 0	; 10
		ADB_POUT |= ADB_BIT;
     29e:	58 9a       	sbi	0x0b, 0	; 11
		while (t0ext() < ADB_IMPULS_KURZ + ADB_IMPULS_LANG)
     2a0:	c1 df       	rcall	.-126    	; 0x224 <t0ext>
     2a2:	bc 01       	movw	r22, r24
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 31 0b 	call	0x1662	; 0x1662 <__floatunsisf>
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	48 e4       	ldi	r20, 0x48	; 72
     2b2:	53 e4       	ldi	r21, 0x43	; 67
     2b4:	0e 94 99 0a 	call	0x1532	; 0x1532 <__cmpsf2>
     2b8:	87 fd       	sbrc	r24, 7
     2ba:	f2 cf       	rjmp	.-28     	; 0x2a0 <adb+0x64>
     2bc:	41 c0       	rjmp	.+130    	; 0x340 <adb+0x104>
			;

		for (; z_byte < anzahl_out; z_byte++) {
     2be:	c8 e0       	ldi	r28, 0x08	; 8
     2c0:	d0 e0       	ldi	r29, 0x00	; 0
     2c2:	00 e8       	ldi	r16, 0x80	; 128
			for (bitpos = 128; bitpos; bitpos >>= 1) { //Daten ausgeben
				t0rst(); //  TCNT0 = 0;
				ADB_PDIR |= ADB_BIT; // Ausgang 0
				ADB_POUT &= ~ADB_BIT;
				if (adb_werte[z_byte] & bitpos)
     2c4:	e1 2e       	mov	r14, r17
     2c6:	ff 24       	eor	r15, r15
     2c8:	8b e8       	ldi	r24, 0x8B	; 139
     2ca:	92 e0       	ldi	r25, 0x02	; 2
     2cc:	e8 0e       	add	r14, r24
     2ce:	f9 1e       	adc	r15, r25
		while (t0ext() < ADB_IMPULS_KURZ + ADB_IMPULS_LANG)
			;

		for (; z_byte < anzahl_out; z_byte++) {
			for (bitpos = 128; bitpos; bitpos >>= 1) { //Daten ausgeben
				t0rst(); //  TCNT0 = 0;
     2d0:	b1 df       	rcall	.-158    	; 0x234 <t0rst>
				ADB_PDIR |= ADB_BIT; // Ausgang 0
     2d2:	50 9a       	sbi	0x0a, 0	; 10
				ADB_POUT &= ~ADB_BIT;
     2d4:	58 98       	cbi	0x0b, 0	; 11
				if (adb_werte[z_byte] & bitpos)
     2d6:	f7 01       	movw	r30, r14
     2d8:	80 81       	ld	r24, Z
     2da:	80 23       	and	r24, r16
     2dc:	79 f0       	breq	.+30     	; 0x2fc <adb+0xc0>
					while (t0ext() < ADB_IMPULS_KURZ)
     2de:	a2 df       	rcall	.-188    	; 0x224 <t0ext>
     2e0:	bc 01       	movw	r22, r24
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 31 0b 	call	0x1662	; 0x1662 <__floatunsisf>
     2ea:	20 e0       	ldi	r18, 0x00	; 0
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	4c e8       	ldi	r20, 0x8C	; 140
     2f0:	52 e4       	ldi	r21, 0x42	; 66
     2f2:	0e 94 99 0a 	call	0x1532	; 0x1532 <__cmpsf2>
     2f6:	87 fd       	sbrc	r24, 7
     2f8:	f2 cf       	rjmp	.-28     	; 0x2de <adb+0xa2>
     2fa:	0e c0       	rjmp	.+28     	; 0x318 <adb+0xdc>
						;
				else
					while (t0ext() < ADB_IMPULS_LANG)
     2fc:	93 df       	rcall	.-218    	; 0x224 <t0ext>
     2fe:	bc 01       	movw	r22, r24
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 31 0b 	call	0x1662	; 0x1662 <__floatunsisf>
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	42 e0       	ldi	r20, 0x02	; 2
     30e:	53 e4       	ldi	r21, 0x43	; 67
     310:	0e 94 99 0a 	call	0x1532	; 0x1532 <__cmpsf2>
     314:	87 fd       	sbrc	r24, 7
     316:	f2 cf       	rjmp	.-28     	; 0x2fc <adb+0xc0>
						;
				ADB_PDIR &= ~ADB_BIT; // Eingang über Pullup
     318:	50 98       	cbi	0x0a, 0	; 10
				ADB_POUT |= ADB_BIT;
     31a:	58 9a       	sbi	0x0b, 0	; 11
				while (t0ext() < ADB_IMPULS_KURZ + ADB_IMPULS_LANG)
     31c:	83 df       	rcall	.-250    	; 0x224 <t0ext>
     31e:	bc 01       	movw	r22, r24
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 31 0b 	call	0x1662	; 0x1662 <__floatunsisf>
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	48 e4       	ldi	r20, 0x48	; 72
     32e:	53 e4       	ldi	r21, 0x43	; 67
     330:	0e 94 99 0a 	call	0x1532	; 0x1532 <__cmpsf2>
     334:	87 fd       	sbrc	r24, 7
     336:	f2 cf       	rjmp	.-28     	; 0x31c <adb+0xe0>
		ADB_POUT |= ADB_BIT;
		while (t0ext() < ADB_IMPULS_KURZ + ADB_IMPULS_LANG)
			;

		for (; z_byte < anzahl_out; z_byte++) {
			for (bitpos = 128; bitpos; bitpos >>= 1) { //Daten ausgeben
     338:	06 95       	lsr	r16
     33a:	21 97       	sbiw	r28, 0x01	; 1
     33c:	49 f6       	brne	.-110    	; 0x2d0 <adb+0x94>
		ADB_PDIR &= ~ADB_BIT; // Eingang über Pullup
		ADB_POUT |= ADB_BIT;
		while (t0ext() < ADB_IMPULS_KURZ + ADB_IMPULS_LANG)
			;

		for (; z_byte < anzahl_out; z_byte++) {
     33e:	1f 5f       	subi	r17, 0xFF	; 255
     340:	1d 15       	cp	r17, r13
     342:	08 f4       	brcc	.+2      	; 0x346 <adb+0x10a>
     344:	bc cf       	rjmp	.-136    	; 0x2be <adb+0x82>
				while (t0ext() < ADB_IMPULS_KURZ + ADB_IMPULS_LANG)
					;
			}
		}
		// STOP BIT (0)
		t0rst(); //  TCNT0 = 0;
     346:	76 df       	rcall	.-276    	; 0x234 <t0rst>
		ADB_PDIR |= ADB_BIT; // Ausgang 0
     348:	50 9a       	sbi	0x0a, 0	; 10
		ADB_POUT &= ~ADB_BIT;
     34a:	58 98       	cbi	0x0b, 0	; 11
		while (t0ext() < ADB_IMPULS_LANG)
     34c:	6b df       	rcall	.-298    	; 0x224 <t0ext>
     34e:	bc 01       	movw	r22, r24
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 31 0b 	call	0x1662	; 0x1662 <__floatunsisf>
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	42 e0       	ldi	r20, 0x02	; 2
     35e:	53 e4       	ldi	r21, 0x43	; 67
     360:	0e 94 99 0a 	call	0x1532	; 0x1532 <__cmpsf2>
     364:	87 fd       	sbrc	r24, 7
     366:	f2 cf       	rjmp	.-28     	; 0x34c <adb+0x110>
			;
		ADB_PDIR &= ~ADB_BIT; // Eingang über Pullup
     368:	50 98       	cbi	0x0a, 0	; 10
		ADB_POUT |= ADB_BIT;
     36a:	58 9a       	sbi	0x0b, 0	; 11
		while (t0ext() < ADB_IMPULS_KURZ + ADB_IMPULS_LANG)
     36c:	5b df       	rcall	.-330    	; 0x224 <t0ext>
     36e:	bc 01       	movw	r22, r24
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 31 0b 	call	0x1662	; 0x1662 <__floatunsisf>
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	48 e4       	ldi	r20, 0x48	; 72
     37e:	53 e4       	ldi	r21, 0x43	; 67
     380:	0e 94 99 0a 	call	0x1532	; 0x1532 <__cmpsf2>
     384:	87 fd       	sbrc	r24, 7
     386:	f2 cf       	rjmp	.-28     	; 0x36c <adb+0x130>
			;

		// Entscheidung, ob noch weitere Daten übertragen werden
		if (adb_werte[0] == COM_LISTEN3)
     388:	80 91 8b 02 	lds	r24, 0x028B
     38c:	8b 33       	cpi	r24, 0x3B	; 59
     38e:	29 f0       	breq	.+10     	; 0x39a <adb+0x15e>
			anzahl_out = 2 + 1;
		else if (adb_werte[0] == COM_LISTEN1)
     390:	89 33       	cpi	r24, 0x39	; 57
     392:	41 f4       	brne	.+16     	; 0x3a4 <adb+0x168>
			anzahl_out = 8 + 1;
     394:	29 e0       	ldi	r18, 0x09	; 9
     396:	d2 2e       	mov	r13, r18
     398:	02 c0       	rjmp	.+4      	; 0x39e <adb+0x162>
		while (t0ext() < ADB_IMPULS_KURZ + ADB_IMPULS_LANG)
			;

		// Entscheidung, ob noch weitere Daten übertragen werden
		if (adb_werte[0] == COM_LISTEN3)
			anzahl_out = 2 + 1;
     39a:	93 e0       	ldi	r25, 0x03	; 3
     39c:	d9 2e       	mov	r13, r25
		else if (adb_werte[0] == COM_LISTEN1)
			anzahl_out = 8 + 1;
		else
			z_byte = 8;
	} while (z_byte < 2);
     39e:	11 30       	cpi	r17, 0x01	; 1
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <adb+0x168>
     3a2:	6b cf       	rjmp	.-298    	; 0x27a <adb+0x3e>

	// Warten auf Rückgabewerte sonst Abbruch
	// TCCR0 = ADB_VORTEILER_A_BIT; // micha modifikation
	t0rst(); //  TCNT0 = 0;
     3a4:	47 df       	rcall	.-370    	; 0x234 <t0rst>

	do {
		if (t0ext() > ADB_IMPULS_TLT) {
     3a6:	3e df       	rcall	.-388    	; 0x224 <t0ext>
     3a8:	bc 01       	movw	r22, r24
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 31 0b 	call	0x1662	; 0x1662 <__floatunsisf>
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	4a ef       	ldi	r20, 0xFA	; 250
     3b8:	53 e4       	ldi	r21, 0x43	; 67
     3ba:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__gesf2>
     3be:	18 16       	cp	r1, r24
     3c0:	0c f4       	brge	.+2      	; 0x3c4 <adb+0x188>
     3c2:	42 c0       	rjmp	.+132    	; 0x448 <adb+0x20c>
			return (0);
		}
	} while (ADB_PIN & ADB_BIT);
     3c4:	48 99       	sbic	0x09, 0	; 9
     3c6:	ef cf       	rjmp	.-34     	; 0x3a6 <adb+0x16a>
	while (!(ADB_PIN & ADB_BIT))
     3c8:	48 9b       	sbis	0x09, 0	; 9
     3ca:	fe cf       	rjmp	.-4      	; 0x3c8 <adb+0x18c>
     3cc:	cc e8       	ldi	r28, 0x8C	; 140
     3ce:	d2 e0       	ldi	r29, 0x02	; 2
     3d0:	11 e0       	ldi	r17, 0x01	; 1
     3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <adb+0x19a>
			while (!(ADB_PIN & ADB_BIT))
				;
			if (t0ext() < (ADB_IMPULS_KURZ + ADB_IMPULS_LANG) / 2)
				adb_werte[z_byte] += bitpos;
		}
		z_byte++;
     3d4:	18 2f       	mov	r17, r24
	while (!(ADB_PIN & ADB_BIT))
		; // Start Bit

	z_byte = 1;
	while (z_byte < MAX_ADB) {
		adb_werte[z_byte] = 0;
     3d6:	18 82       	st	Y, r1
     3d8:	88 e0       	ldi	r24, 0x08	; 8
     3da:	e8 2e       	mov	r14, r24
     3dc:	f1 2c       	mov	r15, r1
		for (bitpos = 128; bitpos; bitpos >>= 1) { //Bits einlesen
     3de:	00 e8       	ldi	r16, 0x80	; 128
			//TCCR0 = ADB_VORTEILER_B_BIT; //micha modifikation
			t0rst(); //  TCNT0 = 0;
     3e0:	29 df       	rcall	.-430    	; 0x234 <t0rst>
			// Abbruch wenn keine weiteren Bytes übertragen werden.
			do {
				if (t0ext() > ADB_IMPULS_KURZ + ADB_IMPULS_LANG) {
     3e2:	20 df       	rcall	.-448    	; 0x224 <t0ext>
     3e4:	bc 01       	movw	r22, r24
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 31 0b 	call	0x1662	; 0x1662 <__floatunsisf>
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	48 e4       	ldi	r20, 0x48	; 72
     3f4:	53 e4       	ldi	r21, 0x43	; 67
     3f6:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <__gesf2>
     3fa:	18 16       	cp	r1, r24
     3fc:	14 f4       	brge	.+4      	; 0x402 <adb+0x1c6>
					return (z_byte - 1);
     3fe:	11 50       	subi	r17, 0x01	; 1
     400:	24 c0       	rjmp	.+72     	; 0x44a <adb+0x20e>
				}
			} while (ADB_PIN & ADB_BIT);
     402:	48 99       	sbic	0x09, 0	; 9
     404:	ee cf       	rjmp	.-36     	; 0x3e2 <adb+0x1a6>
			t0rst(); //  TCNT0 = 0;
     406:	16 df       	rcall	.-468    	; 0x234 <t0rst>
			while (!(ADB_PIN & ADB_BIT))
     408:	48 9b       	sbis	0x09, 0	; 9
     40a:	fe cf       	rjmp	.-4      	; 0x408 <adb+0x1cc>
				;
			if (t0ext() < (ADB_IMPULS_KURZ + ADB_IMPULS_LANG) / 2)
     40c:	0b df       	rcall	.-490    	; 0x224 <t0ext>
     40e:	bc 01       	movw	r22, r24
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 31 0b 	call	0x1662	; 0x1662 <__floatunsisf>
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	48 ec       	ldi	r20, 0xC8	; 200
     41e:	52 e4       	ldi	r21, 0x42	; 66
     420:	0e 94 99 0a 	call	0x1532	; 0x1532 <__cmpsf2>
     424:	87 ff       	sbrs	r24, 7
     426:	03 c0       	rjmp	.+6      	; 0x42e <adb+0x1f2>
				adb_werte[z_byte] += bitpos;
     428:	88 81       	ld	r24, Y
     42a:	80 0f       	add	r24, r16
     42c:	88 83       	st	Y, r24
		; // Start Bit

	z_byte = 1;
	while (z_byte < MAX_ADB) {
		adb_werte[z_byte] = 0;
		for (bitpos = 128; bitpos; bitpos >>= 1) { //Bits einlesen
     42e:	06 95       	lsr	r16
     430:	08 94       	sec
     432:	e1 08       	sbc	r14, r1
     434:	f1 08       	sbc	r15, r1
     436:	e1 14       	cp	r14, r1
     438:	f1 04       	cpc	r15, r1
     43a:	91 f6       	brne	.-92     	; 0x3e0 <adb+0x1a4>
			while (!(ADB_PIN & ADB_BIT))
				;
			if (t0ext() < (ADB_IMPULS_KURZ + ADB_IMPULS_LANG) / 2)
				adb_werte[z_byte] += bitpos;
		}
		z_byte++;
     43c:	81 2f       	mov	r24, r17
     43e:	8f 5f       	subi	r24, 0xFF	; 255
     440:	21 96       	adiw	r28, 0x01	; 1
	} while (ADB_PIN & ADB_BIT);
	while (!(ADB_PIN & ADB_BIT))
		; // Start Bit

	z_byte = 1;
	while (z_byte < MAX_ADB) {
     442:	89 30       	cpi	r24, 0x09	; 9
     444:	39 f6       	brne	.-114    	; 0x3d4 <adb+0x198>
     446:	01 c0       	rjmp	.+2      	; 0x44a <adb+0x20e>
	// TCCR0 = ADB_VORTEILER_A_BIT; // micha modifikation
	t0rst(); //  TCNT0 = 0;

	do {
		if (t0ext() > ADB_IMPULS_TLT) {
			return (0);
     448:	10 e0       	ldi	r17, 0x00	; 0
				adb_werte[z_byte] += bitpos;
		}
		z_byte++;
	}
	return (z_byte - 1);
}
     44a:	81 2f       	mov	r24, r17
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	08 95       	ret

0000045c <touchpad_init>:

void touchpad_init(void) {
	// Eingänge
	ADB_PDIR &= ~ADB_BIT;
     45c:	50 98       	cbi	0x0a, 0	; 10

	// Pull Up einschalten
	ADB_POUT |= ADB_BIT;
     45e:	58 9a       	sbi	0x0b, 0	; 11

	//enable timer0 interrupt
	TIMSK0 |= (1 << TOIE0);
     460:	ee e6       	ldi	r30, 0x6E	; 110
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	80 81       	ld	r24, Z
     466:	81 60       	ori	r24, 0x01	; 1
     468:	80 83       	st	Z, r24
}
     46a:	08 95       	ret

0000046c <touchpad_read>:

uint8_t touchpad_read(void) {
	adb_werte[0] = COM_TALK0;
     46c:	8c e3       	ldi	r24, 0x3C	; 60
     46e:	80 93 8b 02 	sts	0x028B, r24
	adb_data_length = adb();
     472:	e4 de       	rcall	.-568    	; 0x23c <adb>
     474:	80 93 95 02 	sts	0x0295, r24
	return adb_data_length;
     478:	80 91 95 02 	lds	r24, 0x0295
}
     47c:	08 95       	ret

0000047e <delta_y>:
	return ((adb_werte[4] & 0b01110000) << 6)
			| ((adb_werte[3] & 0b01110000) << 3) | (adb_werte[1] & 0b01111111);
}

int8_t delta_y(void) {
	if(adb_data_length ==0) {
     47e:	80 91 95 02 	lds	r24, 0x0295
     482:	88 23       	and	r24, r24
     484:	51 f0       	breq	.+20     	; 0x49a <delta_y+0x1c>
		return 0;
	}
	if (adb_werte[1] & 0b01000000) {
     486:	80 91 8c 02 	lds	r24, 0x028C
     48a:	86 ff       	sbrs	r24, 6
     48c:	04 c0       	rjmp	.+8      	; 0x496 <delta_y+0x18>
		return -((128 - adb_werte[1]) & 0b00111111);
     48e:	81 95       	neg	r24
     490:	8f 73       	andi	r24, 0x3F	; 63
     492:	81 95       	neg	r24
     494:	08 95       	ret
	} else {
		return adb_werte[1] & 0b00111111;
     496:	8f 73       	andi	r24, 0x3F	; 63
     498:	08 95       	ret
			| ((adb_werte[3] & 0b01110000) << 3) | (adb_werte[1] & 0b01111111);
}

int8_t delta_y(void) {
	if(adb_data_length ==0) {
		return 0;
     49a:	80 e0       	ldi	r24, 0x00	; 0
	if (adb_werte[1] & 0b01000000) {
		return -((128 - adb_werte[1]) & 0b00111111);
	} else {
		return adb_werte[1] & 0b00111111;
	}
}
     49c:	08 95       	ret

0000049e <delta_x>:

int8_t delta_x(void) {
	if(adb_data_length ==0) {
     49e:	80 91 95 02 	lds	r24, 0x0295
     4a2:	88 23       	and	r24, r24
     4a4:	51 f0       	breq	.+20     	; 0x4ba <delta_x+0x1c>
		return 0;
	}
	if (adb_werte[2] & 0b01000000) {
     4a6:	80 91 8d 02 	lds	r24, 0x028D
     4aa:	86 ff       	sbrs	r24, 6
     4ac:	04 c0       	rjmp	.+8      	; 0x4b6 <delta_x+0x18>
		return -((128 - adb_werte[2]) & 0b00111111);
     4ae:	81 95       	neg	r24
     4b0:	8f 73       	andi	r24, 0x3F	; 63
     4b2:	81 95       	neg	r24
     4b4:	08 95       	ret
	} else {
		return adb_werte[2] & 0b00111111;
     4b6:	8f 73       	andi	r24, 0x3F	; 63
     4b8:	08 95       	ret
	}
}

int8_t delta_x(void) {
	if(adb_data_length ==0) {
		return 0;
     4ba:	80 e0       	ldi	r24, 0x00	; 0
	if (adb_werte[2] & 0b01000000) {
		return -((128 - adb_werte[2]) & 0b00111111);
	} else {
		return adb_werte[2] & 0b00111111;
	}
}
     4bc:	08 95       	ret

000004be <Usb2SerialTask>:





void Usb2SerialTask(void) {
     4be:	1f 93       	push	r17
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     4c0:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     4c2:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     4c4:	20 91 78 01 	lds	r18, 0x0178
     4c8:	30 91 79 01 	lds	r19, 0x0179
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     4cc:	8f bf       	out	0x3f, r24	; 63
  
    /* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
    if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
     4ce:	80 91 76 01 	lds	r24, 0x0176
     4d2:	90 91 77 01 	lds	r25, 0x0177
     4d6:	28 17       	cp	r18, r24
     4d8:	39 07       	cpc	r19, r25
     4da:	49 f0       	breq	.+18     	; 0x4ee <Usb2SerialTask+0x30>
    {
      int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     4dc:	80 e5       	ldi	r24, 0x50	; 80
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	95 d7       	rcall	.+3882   	; 0x140c <CDC_Device_ReceiveByte>
     4e2:	bc 01       	movw	r22, r24

      /* Read bytes from the USB OUT endpoint into the USART transmit buffer */
      if (!(ReceivedByte < 0))
     4e4:	97 fd       	sbrc	r25, 7
     4e6:	03 c0       	rjmp	.+6      	; 0x4ee <Usb2SerialTask+0x30>
        RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
     4e8:	8e e6       	ldi	r24, 0x6E	; 110
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	41 de       	rcall	.-894    	; 0x170 <RingBuffer_Insert>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     4ee:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     4f0:	f8 94       	cli
     4f2:	80 91 04 02 	lds	r24, 0x0204
     4f6:	90 91 05 02 	lds	r25, 0x0205
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     4fa:	2f bf       	out	0x3f, r18	; 63
    }

    /* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
    uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
    if (BufferCount)
     4fc:	00 97       	sbiw	r24, 0x00	; 0
     4fe:	01 f1       	breq	.+64     	; 0x540 <__stack+0x41>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     500:	20 91 51 01 	lds	r18, 0x0151
     504:	2f 70       	andi	r18, 0x0F	; 15
     506:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     50a:	20 91 e8 00 	lds	r18, 0x00E8
    {
      Endpoint_SelectEndpoint(VirtualSerial_CDC_Interface.Config.DataINEndpoint.Address);

      /* Check if a packet is already enqueued to the host - if so, we shouldn't try to send more data
       * until it completes as there is a chance nothing is listening and a lengthy timeout could occur */
      if (Endpoint_IsINReady())
     50e:	20 ff       	sbrs	r18, 0
     510:	17 c0       	rjmp	.+46     	; 0x540 <__stack+0x41>
      {
        /* Never send more than one bank size less one byte to the host at a time, so that we don't block
         * while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening */
        uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));
     512:	80 31       	cpi	r24, 0x10	; 16
     514:	91 05       	cpc	r25, r1
     516:	10 f0       	brcs	.+4      	; 0x51c <__stack+0x1d>
     518:	8f e0       	ldi	r24, 0x0F	; 15
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	18 2f       	mov	r17, r24

        /* Read bytes from the USART receive buffer into the USB IN endpoint */
        while (BytesToSend--)
     51e:	0e c0       	rjmp	.+28     	; 0x53c <__stack+0x3d>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
     520:	e0 91 fc 01 	lds	r30, 0x01FC
     524:	f0 91 fd 01 	lds	r31, 0x01FD
        {
          /* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
          if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     528:	80 e5       	ldi	r24, 0x50	; 80
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	60 81       	ld	r22, Z
     52e:	fd d6       	rcall	.+3578   	; 0x132a <CDC_Device_SendByte>
     530:	11 50       	subi	r17, 0x01	; 1
     532:	88 23       	and	r24, r24
     534:	29 f4       	brne	.+10     	; 0x540 <__stack+0x41>
          {
            break;
          }

          /* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
          RingBuffer_Remove(&USARTtoUSB_Buffer);
     536:	8a ef       	ldi	r24, 0xFA	; 250
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	35 de       	rcall	.-918    	; 0x1a6 <RingBuffer_Remove>
        /* Never send more than one bank size less one byte to the host at a time, so that we don't block
         * while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening */
        uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));

        /* Read bytes from the USART receive buffer into the USB IN endpoint */
        while (BytesToSend--)
     53c:	11 23       	and	r17, r17
     53e:	81 f7       	brne	.-32     	; 0x520 <__stack+0x21>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     540:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     542:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     544:	80 91 78 01 	lds	r24, 0x0178
     548:	90 91 79 01 	lds	r25, 0x0179
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     54c:	2f bf       	out	0x3f, r18	; 63
        }
      }
    }

    /* Load the next byte from the USART transmit buffer into the USART */
    if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer))) {
     54e:	00 97       	sbiw	r24, 0x00	; 0
     550:	49 f0       	breq	.+18     	; 0x564 <__stack+0x65>
      Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));
     552:	8e e6       	ldi	r24, 0x6E	; 110
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	27 de       	rcall	.-946    	; 0x1a6 <RingBuffer_Remove>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     558:	90 91 c8 00 	lds	r25, 0x00C8
     55c:	95 ff       	sbrs	r25, 5
     55e:	fc cf       	rjmp	.-8      	; 0x558 <__stack+0x59>
				UDR1 = DataByte;
     560:	80 93 ce 00 	sts	0x00CE, r24
//      dummy = RingBuffer_Remove(&USBtoUSART_Buffer);
//      sendPayload(&dummy,1,0);
    }
    CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     564:	80 e5       	ldi	r24, 0x50	; 80
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	3a d7       	rcall	.+3700   	; 0x13de <CDC_Device_USBTask>
    USB_USBTask();
     56a:	f4 d5       	rcall	.+3048   	; 0x1154 <USB_USBTask>
  
}
     56c:	1f 91       	pop	r17
     56e:	08 95       	ret

00000570 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     570:	84 b7       	in	r24, 0x34	; 52
     572:	87 7f       	andi	r24, 0xF7	; 247
     574:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     576:	88 e1       	ldi	r24, 0x18	; 24
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	80 93 60 00 	sts	0x0060, r24
     580:	10 92 60 00 	sts	0x0060, r1
     584:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	80 e8       	ldi	r24, 0x80	; 128
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	f8 94       	cli
     58e:	80 93 61 00 	sts	0x0061, r24
     592:	90 93 61 00 	sts	0x0061, r25
     596:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
// 	LEDs_Init();
	USB_Init();
}
     598:	8d c3       	rjmp	.+1818   	; 0xcb4 <USB_Init>

0000059a <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
// 	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     59a:	08 95       	ret

0000059c <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
// 	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     59c:	08 95       	ret

0000059e <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     59e:	80 e5       	ldi	r24, 0x50	; 80
     5a0:	91 e0       	ldi	r25, 0x01	; 1

// 	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
}
     5a2:	9f c6       	rjmp	.+3390   	; 0x12e2 <CDC_Device_ConfigureEndpoints>

000005a4 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     5a4:	80 e5       	ldi	r24, 0x50	; 80
     5a6:	91 e0       	ldi	r25, 0x01	; 1
}
     5a8:	f0 c5       	rjmp	.+3040   	; 0x118a <CDC_Device_ProcessControlRequest>

000005aa <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     5aa:	1f 92       	push	r1
     5ac:	0f 92       	push	r0
     5ae:	0f b6       	in	r0, 0x3f	; 63
     5b0:	0f 92       	push	r0
     5b2:	11 24       	eor	r1, r1
     5b4:	2f 93       	push	r18
     5b6:	3f 93       	push	r19
     5b8:	4f 93       	push	r20
     5ba:	5f 93       	push	r21
     5bc:	6f 93       	push	r22
     5be:	7f 93       	push	r23
     5c0:	8f 93       	push	r24
     5c2:	9f 93       	push	r25
     5c4:	af 93       	push	r26
     5c6:	bf 93       	push	r27
     5c8:	ef 93       	push	r30
     5ca:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     5cc:	60 91 ce 00 	lds	r22, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
     5d0:	8e b3       	in	r24, 0x1e	; 30
     5d2:	84 30       	cpi	r24, 0x04	; 4
     5d4:	19 f4       	brne	.+6      	; 0x5dc <__vector_23+0x32>
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
     5d6:	8a ef       	ldi	r24, 0xFA	; 250
     5d8:	91 e0       	ldi	r25, 0x01	; 1
     5da:	ca dd       	rcall	.-1132   	; 0x170 <RingBuffer_Insert>
}
     5dc:	ff 91       	pop	r31
     5de:	ef 91       	pop	r30
     5e0:	bf 91       	pop	r27
     5e2:	af 91       	pop	r26
     5e4:	9f 91       	pop	r25
     5e6:	8f 91       	pop	r24
     5e8:	7f 91       	pop	r23
     5ea:	6f 91       	pop	r22
     5ec:	5f 91       	pop	r21
     5ee:	4f 91       	pop	r20
     5f0:	3f 91       	pop	r19
     5f2:	2f 91       	pop	r18
     5f4:	0f 90       	pop	r0
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	0f 90       	pop	r0
     5fa:	1f 90       	pop	r1
     5fc:	18 95       	reti

000005fe <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     5fe:	8f 92       	push	r8
     600:	9f 92       	push	r9
     602:	af 92       	push	r10
     604:	bf 92       	push	r11
     606:	cf 92       	push	r12
     608:	df 92       	push	r13
     60a:	ef 92       	push	r14
     60c:	ff 92       	push	r15
     60e:	1f 93       	push	r17
     610:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     612:	a1 8d       	ldd	r26, Z+25	; 0x19
     614:	a1 50       	subi	r26, 0x01	; 1
     616:	a2 30       	cpi	r26, 0x02	; 2
     618:	28 f4       	brcc	.+10     	; 0x624 <EVENT_CDC_Device_LineEncodingChanged+0x26>
     61a:	b0 e0       	ldi	r27, 0x00	; 0
     61c:	a5 59       	subi	r26, 0x95	; 149
     61e:	be 4f       	sbci	r27, 0xFE	; 254
     620:	1c 91       	ld	r17, X
     622:	01 c0       	rjmp	.+2      	; 0x626 <EVENT_CDC_Device_LineEncodingChanged+0x28>
     624:	10 e0       	ldi	r17, 0x00	; 0
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     626:	80 8d       	ldd	r24, Z+24	; 0x18
     628:	82 30       	cpi	r24, 0x02	; 2
     62a:	09 f4       	brne	.+2      	; 0x62e <EVENT_CDC_Device_LineEncodingChanged+0x30>
	  ConfigMask |= (1 << USBS1);
     62c:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     62e:	82 8d       	ldd	r24, Z+26	; 0x1a
     630:	87 30       	cpi	r24, 0x07	; 7
     632:	31 f0       	breq	.+12     	; 0x640 <EVENT_CDC_Device_LineEncodingChanged+0x42>
     634:	88 30       	cpi	r24, 0x08	; 8
     636:	31 f0       	breq	.+12     	; 0x644 <EVENT_CDC_Device_LineEncodingChanged+0x46>
     638:	86 30       	cpi	r24, 0x06	; 6
     63a:	29 f4       	brne	.+10     	; 0x646 <EVENT_CDC_Device_LineEncodingChanged+0x48>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
     63c:	12 60       	ori	r17, 0x02	; 2
			break;
     63e:	03 c0       	rjmp	.+6      	; 0x646 <EVENT_CDC_Device_LineEncodingChanged+0x48>
		case 7:
			ConfigMask |= (1 << UCSZ11);
     640:	14 60       	ori	r17, 0x04	; 4
			break;
     642:	01 c0       	rjmp	.+2      	; 0x646 <EVENT_CDC_Device_LineEncodingChanged+0x48>
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     644:	16 60       	ori	r17, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     646:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     64a:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     64e:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     652:	c4 88       	ldd	r12, Z+20	; 0x14
     654:	d5 88       	ldd	r13, Z+21	; 0x15
     656:	e6 88       	ldd	r14, Z+22	; 0x16
     658:	f7 88       	ldd	r15, Z+23	; 0x17
     65a:	c7 01       	movw	r24, r14
     65c:	b6 01       	movw	r22, r12
     65e:	96 95       	lsr	r25
     660:	87 95       	ror	r24
     662:	77 95       	ror	r23
     664:	67 95       	ror	r22
     666:	fd d7       	rcall	.+4090   	; 0x1662 <__floatunsisf>
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	34 e2       	ldi	r19, 0x24	; 36
     66c:	44 ef       	ldi	r20, 0xF4	; 244
     66e:	59 e4       	ldi	r21, 0x49	; 73
     670:	fc d6       	rcall	.+3576   	; 0x146a <__addsf3>
     672:	4b 01       	movw	r8, r22
     674:	5c 01       	movw	r10, r24
     676:	c7 01       	movw	r24, r14
     678:	b6 01       	movw	r22, r12
     67a:	f3 d7       	rcall	.+4070   	; 0x1662 <__floatunsisf>
     67c:	9b 01       	movw	r18, r22
     67e:	ac 01       	movw	r20, r24
     680:	c5 01       	movw	r24, r10
     682:	b4 01       	movw	r22, r8
     684:	5a d7       	rcall	.+3764   	; 0x153a <__divsf3>
     686:	20 e0       	ldi	r18, 0x00	; 0
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	40 e8       	ldi	r20, 0x80	; 128
     68c:	5f e3       	ldi	r21, 0x3F	; 63
     68e:	ec d6       	rcall	.+3544   	; 0x1468 <__subsf3>
     690:	bc d7       	rcall	.+3960   	; 0x160a <__fixunssfsi>
     692:	70 93 cd 00 	sts	0x00CD, r23
     696:	60 93 cc 00 	sts	0x00CC, r22

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
     69a:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (1 << U2X1);
     69e:	82 e0       	ldi	r24, 0x02	; 2
     6a0:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     6a4:	88 e9       	ldi	r24, 0x98	; 152
     6a6:	80 93 c9 00 	sts	0x00C9, r24
}
     6aa:	1f 91       	pop	r17
     6ac:	ff 90       	pop	r15
     6ae:	ef 90       	pop	r14
     6b0:	df 90       	pop	r13
     6b2:	cf 90       	pop	r12
     6b4:	bf 90       	pop	r11
     6b6:	af 90       	pop	r10
     6b8:	9f 90       	pop	r9
     6ba:	8f 90       	pop	r8
     6bc:	08 95       	ret

000006be <uart_putc>:




void uart_putc(unsigned char data)
{
     6be:	68 2f       	mov	r22, r24

      if (USB_DeviceState == DEVICE_STATE_Configured){
     6c0:	8e b3       	in	r24, 0x1e	; 30
     6c2:	84 30       	cpi	r24, 0x04	; 4
     6c4:	19 f4       	brne	.+6      	; 0x6cc <uart_putc+0xe>
        RingBuffer_Insert(&USARTtoUSB_Buffer, data);
     6c6:	8a ef       	ldi	r24, 0xFA	; 250
     6c8:	91 e0       	ldi	r25, 0x01	; 1
     6ca:	52 cd       	rjmp	.-1372   	; 0x170 <RingBuffer_Insert>
     6cc:	08 95       	ret

000006ce <uart_puts>:
      }
  
}

void uart_puts(const char *s )
{
     6ce:	ef 92       	push	r14
     6d0:	ff 92       	push	r15
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	e8 2e       	mov	r14, r24
     6d8:	e7 01       	movw	r28, r14
     6da:	7e 01       	movw	r14, r28
     6dc:	f9 2e       	mov	r15, r25
     6de:	e7 01       	movw	r28, r14
    while (*s) 
     6e0:	01 c0       	rjmp	.+2      	; 0x6e4 <uart_puts+0x16>
      uart_putc(*s++);
     6e2:	ed df       	rcall	.-38     	; 0x6be <uart_putc>
  
}

void uart_puts(const char *s )
{
    while (*s) 
     6e4:	89 91       	ld	r24, Y+
     6e6:	88 23       	and	r24, r24
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <uart_puts+0x14>
      uart_putc(*s++);

}/* uart_puts */
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	ff 90       	pop	r15
     6f0:	ef 90       	pop	r14
     6f2:	08 95       	ret

000006f4 <my_uitoa>:


// convert an unsigned integer to string
void my_uitoa(uint32_t zahl, char* string, uint8_t no_digits) {
     6f4:	2f 92       	push	r2
     6f6:	3f 92       	push	r3
     6f8:	4f 92       	push	r4
     6fa:	5f 92       	push	r5
     6fc:	6f 92       	push	r6
     6fe:	7f 92       	push	r7
     700:	8f 92       	push	r8
     702:	9f 92       	push	r9
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	7b 01       	movw	r14, r22
     71a:	8c 01       	movw	r16, r24
  int8_t i; // schleifenzähler

  string[no_digits] = '\0'; // String Terminator
     71c:	82 2f       	mov	r24, r18
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	fa 01       	movw	r30, r20
     722:	e8 0f       	add	r30, r24
     724:	f9 1f       	adc	r31, r25
     726:	10 82       	st	Z, r1
  for (i = (no_digits - 1); i >= 0; i--) {
     728:	d2 2e       	mov	r13, r18
     72a:	da 94       	dec	r13

}/* uart_puts */


// convert an unsigned integer to string
void my_uitoa(uint32_t zahl, char* string, uint8_t no_digits) {
     72c:	4d 2c       	mov	r4, r13
     72e:	55 24       	eor	r5, r5
     730:	47 fc       	sbrc	r4, 7
     732:	50 94       	com	r5
     734:	ea 01       	movw	r28, r20
     736:	c4 0d       	add	r28, r4
     738:	d5 1d       	adc	r29, r5
  int8_t i; // schleifenzähler

  string[no_digits] = '\0'; // String Terminator
  for (i = (no_digits - 1); i >= 0; i--) {
     73a:	aa 24       	eor	r10, r10
     73c:	bb 24       	eor	r11, r11
    if (zahl == 0 && i < (no_digits - 1)) {
      string[i] = ' ';
    } else {
      string[i] = (zahl % 10) + '0';
     73e:	ba e0       	ldi	r27, 0x0A	; 10
     740:	6b 2e       	mov	r6, r27
     742:	71 2c       	mov	r7, r1
     744:	81 2c       	mov	r8, r1
     746:	91 2c       	mov	r9, r1
void my_uitoa(uint32_t zahl, char* string, uint8_t no_digits) {
  int8_t i; // schleifenzähler

  string[no_digits] = '\0'; // String Terminator
  for (i = (no_digits - 1); i >= 0; i--) {
    if (zahl == 0 && i < (no_digits - 1)) {
     748:	1c 01       	movw	r2, r24
     74a:	08 94       	sec
     74c:	21 08       	sbc	r2, r1
     74e:	31 08       	sbc	r3, r1
      string[i] = ' ';
     750:	a0 e2       	ldi	r26, 0x20	; 32
     752:	ca 2e       	mov	r12, r26
// convert an unsigned integer to string
void my_uitoa(uint32_t zahl, char* string, uint8_t no_digits) {
  int8_t i; // schleifenzähler

  string[no_digits] = '\0'; // String Terminator
  for (i = (no_digits - 1); i >= 0; i--) {
     754:	22 c0       	rjmp	.+68     	; 0x79a <my_uitoa+0xa6>
    if (zahl == 0 && i < (no_digits - 1)) {
     756:	e1 14       	cp	r14, r1
     758:	f1 04       	cpc	r15, r1
     75a:	01 05       	cpc	r16, r1
     75c:	11 05       	cpc	r17, r1
     75e:	41 f4       	brne	.+16     	; 0x770 <my_uitoa+0x7c>

}/* uart_puts */


// convert an unsigned integer to string
void my_uitoa(uint32_t zahl, char* string, uint8_t no_digits) {
     760:	c5 01       	movw	r24, r10
     762:	84 0d       	add	r24, r4
     764:	95 1d       	adc	r25, r5
  int8_t i; // schleifenzähler

  string[no_digits] = '\0'; // String Terminator
  for (i = (no_digits - 1); i >= 0; i--) {
    if (zahl == 0 && i < (no_digits - 1)) {
     766:	82 15       	cp	r24, r2
     768:	93 05       	cpc	r25, r3
     76a:	14 f4       	brge	.+4      	; 0x770 <my_uitoa+0x7c>
      string[i] = ' ';
     76c:	c8 82       	st	Y, r12
     76e:	08 c0       	rjmp	.+16     	; 0x780 <my_uitoa+0x8c>
    } else {
      string[i] = (zahl % 10) + '0';
     770:	c8 01       	movw	r24, r16
     772:	b7 01       	movw	r22, r14
     774:	a4 01       	movw	r20, r8
     776:	93 01       	movw	r18, r6
     778:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__udivmodsi4>
     77c:	60 5d       	subi	r22, 0xD0	; 208
     77e:	68 83       	st	Y, r22
    } // Modulo rechnen, dann den ASCII-Code von '0' addieren
    zahl /= 10;
     780:	c8 01       	movw	r24, r16
     782:	b7 01       	movw	r22, r14
     784:	a4 01       	movw	r20, r8
     786:	93 01       	movw	r18, r6
     788:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <__udivmodsi4>
     78c:	79 01       	movw	r14, r18
     78e:	8a 01       	movw	r16, r20
// convert an unsigned integer to string
void my_uitoa(uint32_t zahl, char* string, uint8_t no_digits) {
  int8_t i; // schleifenzähler

  string[no_digits] = '\0'; // String Terminator
  for (i = (no_digits - 1); i >= 0; i--) {
     790:	da 94       	dec	r13
     792:	21 97       	sbiw	r28, 0x01	; 1
     794:	08 94       	sec
     796:	a1 08       	sbc	r10, r1
     798:	b1 08       	sbc	r11, r1
     79a:	d7 fe       	sbrs	r13, 7
     79c:	dc cf       	rjmp	.-72     	; 0x756 <my_uitoa+0x62>
      string[i] = (zahl % 10) + '0';
    } // Modulo rechnen, dann den ASCII-Code von '0' addieren
    zahl /= 10;
  }

}
     79e:	df 91       	pop	r29
     7a0:	cf 91       	pop	r28
     7a2:	1f 91       	pop	r17
     7a4:	0f 91       	pop	r16
     7a6:	ff 90       	pop	r15
     7a8:	ef 90       	pop	r14
     7aa:	df 90       	pop	r13
     7ac:	cf 90       	pop	r12
     7ae:	bf 90       	pop	r11
     7b0:	af 90       	pop	r10
     7b2:	9f 90       	pop	r9
     7b4:	8f 90       	pop	r8
     7b6:	7f 90       	pop	r7
     7b8:	6f 90       	pop	r6
     7ba:	5f 90       	pop	r5
     7bc:	4f 90       	pop	r4
     7be:	3f 90       	pop	r3
     7c0:	2f 90       	pop	r2
     7c2:	08 95       	ret

000007c4 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     7c4:	cf 92       	push	r12
     7c6:	df 92       	push	r13
     7c8:	ef 92       	push	r14
     7ca:	ff 92       	push	r15
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	df 93       	push	r29
     7d2:	cf 93       	push	r28
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	60 97       	sbiw	r28, 0x10	; 16
     7da:	0f b6       	in	r0, 0x3f	; 63
     7dc:	f8 94       	cli
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	cd bf       	out	0x3d, r28	; 61
  char dummy;
  uint8_t field_val = 0;
  SetupHardware();
     7e4:	c5 de       	rcall	.-630    	; 0x570 <SetupHardware>



  RingBuffer_InitBuffer(&USBtoUSART_Buffer, USBtoUSART_Buffer_Data, sizeof(USBtoUSART_Buffer_Data));
     7e6:	8e e6       	ldi	r24, 0x6E	; 110
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	6a e7       	ldi	r22, 0x7A	; 122
     7ec:	71 e0       	ldi	r23, 0x01	; 1
     7ee:	f4 dc       	rcall	.-1560   	; 0x1d8 <RingBuffer_InitBuffer.clone.0>
  RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));
     7f0:	8a ef       	ldi	r24, 0xFA	; 250
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	66 e0       	ldi	r22, 0x06	; 6
     7f6:	72 e0       	ldi	r23, 0x02	; 2
     7f8:	ef dc       	rcall	.-1570   	; 0x1d8 <RingBuffer_InitBuffer.clone.0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     7fa:	78 94       	sei

//   LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
  GlobalInterruptEnable();

  touchpad_init(); // you need to call this to setup the I/O pin!
     7fc:	2f de       	rcall	.-930    	; 0x45c <touchpad_init>
  sei();
     7fe:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     800:	8f ef       	ldi	r24, 0xFF	; 255
     802:	99 e6       	ldi	r25, 0x69	; 105
     804:	a8 e1       	ldi	r26, 0x18	; 24
     806:	81 50       	subi	r24, 0x01	; 1
     808:	90 40       	sbci	r25, 0x00	; 0
     80a:	a0 40       	sbci	r26, 0x00	; 0
     80c:	e1 f7       	brne	.-8      	; 0x806 <main+0x42>
     80e:	00 c0       	rjmp	.+0      	; 0x810 <main+0x4c>
     810:	00 00       	nop
  //   | back  |  up   | enter |
  //   -------------------------
  //   | left  |  down | right |
  //   -------------------------

  uart_puts("you selected the keypad demo modus:\n\r");
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	5b df       	rcall	.-330    	; 0x6ce <uart_puts>
  uint8_t x, y = 0;
     818:	ff 24       	eor	r15, r15
//  _delay_ms(1000);


// end
  
  uint8_t loopcounter=0;
     81a:	dd 24       	eor	r13, r13
    }
// //     uart_puts("c");
//     _delay_ms(20);

    dummy=touchpad_read(); // read values from the touchpad
    my_uitoa(dummy,stringbuffer,4);// x_abs returns current x position of your finger
     81c:	8e 01       	movw	r16, r28
     81e:	0f 5f       	subi	r16, 0xFF	; 255
     820:	1f 4f       	sbci	r17, 0xFF	; 255
  uart_puts("you selected the keypad demo modus:\n\r");
  uint8_t x, y = 0;
  int8_t dx, dy = 0;
//   touchpad_set_abs_mode(); // keypad functionality uses the "absolute mode"
  while (1) {
    Usb2SerialTask();
     822:	4d de       	rcall	.-870    	; 0x4be <Usb2SerialTask>
    loopcounter++;
     824:	d3 94       	inc	r13
    if(loopcounter) {
     826:	e9 f7       	brne	.-6      	; 0x822 <main+0x5e>
      continue;
    }
// //     uart_puts("c");
//     _delay_ms(20);

    dummy=touchpad_read(); // read values from the touchpad
     828:	21 de       	rcall	.-958    	; 0x46c <touchpad_read>
    my_uitoa(dummy,stringbuffer,4);// x_abs returns current x position of your finger
     82a:	68 2f       	mov	r22, r24
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	a8 01       	movw	r20, r16
     834:	24 e0       	ldi	r18, 0x04	; 4
     836:	5e df       	rcall	.-324    	; 0x6f4 <my_uitoa>
    uart_puts("data_length: ");
     838:	86 e2       	ldi	r24, 0x26	; 38
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	48 df       	rcall	.-368    	; 0x6ce <uart_puts>
    uart_puts(stringbuffer);
     83e:	c8 01       	movw	r24, r16
     840:	46 df       	rcall	.-372    	; 0x6ce <uart_puts>
    uart_puts(" x_pos: ");
     842:	84 e3       	ldi	r24, 0x34	; 52
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	43 df       	rcall	.-378    	; 0x6ce <uart_puts>
    my_uitoa(delta_x(),stringbuffer,4);// x_abs returns current x position of your finger
     848:	2a de       	rcall	.-940    	; 0x49e <delta_x>
     84a:	68 2f       	mov	r22, r24
     84c:	77 27       	eor	r23, r23
     84e:	67 fd       	sbrc	r22, 7
     850:	70 95       	com	r23
     852:	87 2f       	mov	r24, r23
     854:	97 2f       	mov	r25, r23
     856:	a8 01       	movw	r20, r16
     858:	24 e0       	ldi	r18, 0x04	; 4
     85a:	4c df       	rcall	.-360    	; 0x6f4 <my_uitoa>
    uart_puts(stringbuffer);
     85c:	c8 01       	movw	r24, r16
     85e:	37 df       	rcall	.-402    	; 0x6ce <uart_puts>
// 
//     _delay_ms(20);
// 
//     touchpad_read(); // read data from touchpad

    dx = delta_x();// returns the amount your finger has moved in x direction since last readout
     860:	1e de       	rcall	.-964    	; 0x49e <delta_x>
     862:	c8 2e       	mov	r12, r24
    dy = delta_y();// returns the amount your finger has moved in y direction since last readout
     864:	0c de       	rcall	.-1000   	; 0x47e <delta_y>

    // increment/decrement some dummy variables with the
    if (x + dx > 255) {
     866:	2c 2d       	mov	r18, r12
     868:	33 27       	eor	r19, r19
     86a:	27 fd       	sbrc	r18, 7
     86c:	30 95       	com	r19
     86e:	2e 0d       	add	r18, r14
     870:	31 1d       	adc	r19, r1
     872:	2f 3f       	cpi	r18, 0xFF	; 255
     874:	31 05       	cpc	r19, r1
     876:	09 f0       	breq	.+2      	; 0x87a <main+0xb6>
     878:	24 f4       	brge	.+8      	; 0x882 <main+0xbe>
      x = 255;
    } else if (x + dx < 0) {
     87a:	37 fd       	sbrc	r19, 7
     87c:	05 c0       	rjmp	.+10     	; 0x888 <main+0xc4>
      x = 0;
    } else {
      x = (x + dx);
     87e:	ec 0c       	add	r14, r12
     880:	04 c0       	rjmp	.+8      	; 0x88a <main+0xc6>
    dx = delta_x();// returns the amount your finger has moved in x direction since last readout
    dy = delta_y();// returns the amount your finger has moved in y direction since last readout

    // increment/decrement some dummy variables with the
    if (x + dx > 255) {
      x = 255;
     882:	ee 24       	eor	r14, r14
     884:	ea 94       	dec	r14
     886:	01 c0       	rjmp	.+2      	; 0x88a <main+0xc6>
    } else if (x + dx < 0) {
      x = 0;
     888:	ee 24       	eor	r14, r14
    } else {
      x = (x + dx);
    }

    if (y + dy > 255) {
     88a:	28 2f       	mov	r18, r24
     88c:	33 27       	eor	r19, r19
     88e:	27 fd       	sbrc	r18, 7
     890:	30 95       	com	r19
     892:	2f 0d       	add	r18, r15
     894:	31 1d       	adc	r19, r1
     896:	2f 3f       	cpi	r18, 0xFF	; 255
     898:	31 05       	cpc	r19, r1
     89a:	09 f0       	breq	.+2      	; 0x89e <main+0xda>
     89c:	24 f4       	brge	.+8      	; 0x8a6 <main+0xe2>
      y = 255;
    } else if (y + dy < 0) {
     89e:	37 fd       	sbrc	r19, 7
     8a0:	05 c0       	rjmp	.+10     	; 0x8ac <main+0xe8>
      y = 0;
    } else {
      y = (y + dy);
     8a2:	f8 0e       	add	r15, r24
     8a4:	04 c0       	rjmp	.+8      	; 0x8ae <main+0xea>
    } else {
      x = (x + dx);
    }

    if (y + dy > 255) {
      y = 255;
     8a6:	ff 24       	eor	r15, r15
     8a8:	fa 94       	dec	r15
     8aa:	01 c0       	rjmp	.+2      	; 0x8ae <main+0xea>
    } else if (y + dy < 0) {
      y = 0;
     8ac:	ff 24       	eor	r15, r15
    } else {
      y = (y + dy);
    }

    uart_puts("x_pos: ");
     8ae:	8d e3       	ldi	r24, 0x3D	; 61
     8b0:	91 e0       	ldi	r25, 0x01	; 1
     8b2:	0d df       	rcall	.-486    	; 0x6ce <uart_puts>
    my_uitoa(x, stringbuffer, 4);
     8b4:	6e 2d       	mov	r22, r14
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a8 01       	movw	r20, r16
     8be:	24 e0       	ldi	r18, 0x04	; 4
     8c0:	19 df       	rcall	.-462    	; 0x6f4 <my_uitoa>
    uart_puts(stringbuffer);
     8c2:	c8 01       	movw	r24, r16
     8c4:	04 df       	rcall	.-504    	; 0x6ce <uart_puts>
    uart_puts("\ty_pos: ");
     8c6:	85 e4       	ldi	r24, 0x45	; 69
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	01 df       	rcall	.-510    	; 0x6ce <uart_puts>
    my_uitoa(y, stringbuffer, 4);
     8cc:	6f 2d       	mov	r22, r15
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	a8 01       	movw	r20, r16
     8d6:	24 e0       	ldi	r18, 0x04	; 4
     8d8:	0d df       	rcall	.-486    	; 0x6f4 <my_uitoa>
    uart_puts(stringbuffer);
     8da:	c8 01       	movw	r24, r16
     8dc:	f8 de       	rcall	.-528    	; 0x6ce <uart_puts>
    uart_puts("\r");
     8de:	8e e4       	ldi	r24, 0x4E	; 78
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	f5 de       	rcall	.-534    	; 0x6ce <uart_puts>
     8e4:	9e cf       	rjmp	.-196    	; 0x822 <main+0x5e>

000008e6 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     8e6:	92 30       	cpi	r25, 0x02	; 2
     8e8:	29 f0       	breq	.+10     	; 0x8f4 <CALLBACK_USB_GetDescriptor+0xe>
     8ea:	93 30       	cpi	r25, 0x03	; 3
     8ec:	41 f0       	breq	.+16     	; 0x8fe <CALLBACK_USB_GetDescriptor+0x18>
     8ee:	91 30       	cpi	r25, 0x01	; 1
     8f0:	e9 f4       	brne	.+58     	; 0x92c <CALLBACK_USB_GetDescriptor+0x46>
     8f2:	17 c0       	rjmp	.+46     	; 0x922 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     8f4:	2e e3       	ldi	r18, 0x3E	; 62
     8f6:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     8f8:	ea ea       	ldi	r30, 0xAA	; 170
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     8fc:	1b c0       	rjmp	.+54     	; 0x934 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     8fe:	81 30       	cpi	r24, 0x01	; 1
     900:	41 f0       	breq	.+16     	; 0x912 <CALLBACK_USB_GetDescriptor+0x2c>
     902:	81 30       	cpi	r24, 0x01	; 1
     904:	18 f0       	brcs	.+6      	; 0x90c <CALLBACK_USB_GetDescriptor+0x26>
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	89 f4       	brne	.+34     	; 0x92c <CALLBACK_USB_GetDescriptor+0x46>
     90a:	06 c0       	rjmp	.+12     	; 0x918 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     90c:	e8 ee       	ldi	r30, 0xE8	; 232
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	05 c0       	rjmp	.+10     	; 0x91c <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     912:	ec ee       	ldi	r30, 0xEC	; 236
     914:	f0 e0       	ldi	r31, 0x00	; 0
     916:	02 c0       	rjmp	.+4      	; 0x91c <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     918:	e6 e0       	ldi	r30, 0x06	; 6
     91a:	f1 e0       	ldi	r31, 0x01	; 1
     91c:	24 91       	lpm	r18, Z+
     91e:	30 e0       	ldi	r19, 0x00	; 0
					break;
     920:	09 c0       	rjmp	.+18     	; 0x934 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     922:	22 e1       	ldi	r18, 0x12	; 18
     924:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     926:	e8 e9       	ldi	r30, 0x98	; 152
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	04 c0       	rjmp	.+8      	; 0x934 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     930:	e0 e0       	ldi	r30, 0x00	; 0
     932:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     934:	da 01       	movw	r26, r20
     936:	11 96       	adiw	r26, 0x01	; 1
     938:	fc 93       	st	X, r31
     93a:	ee 93       	st	-X, r30
	return Size;
}
     93c:	c9 01       	movw	r24, r18
     93e:	08 95       	ret

00000940 <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     940:	28 2f       	mov	r18, r24
     942:	39 2f       	mov	r19, r25
     944:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     946:	80 91 a0 02 	lds	r24, 0x02A0
     94a:	90 91 a1 02 	lds	r25, 0x02A1
     94e:	86 17       	cp	r24, r22
     950:	97 07       	cpc	r25, r23
     952:	18 f4       	brcc	.+6      	; 0x95a <Endpoint_Write_Control_Stream_LE+0x1a>
     954:	bc 01       	movw	r22, r24
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	34 c0       	rjmp	.+104    	; 0x9c2 <Endpoint_Write_Control_Stream_LE+0x82>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     95a:	61 15       	cp	r22, r1
     95c:	71 05       	cpc	r23, r1
     95e:	d9 f7       	brne	.-10     	; 0x956 <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     960:	80 91 e8 00 	lds	r24, 0x00E8
     964:	8e 77       	andi	r24, 0x7E	; 126
     966:	80 93 e8 00 	sts	0x00E8, r24
     96a:	f5 cf       	rjmp	.-22     	; 0x956 <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     96c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     96e:	88 23       	and	r24, r24
     970:	e9 f1       	breq	.+122    	; 0x9ec <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     972:	85 30       	cpi	r24, 0x05	; 5
     974:	b9 f1       	breq	.+110    	; 0x9e4 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     976:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     97a:	83 fd       	sbrc	r24, 3
     97c:	35 c0       	rjmp	.+106    	; 0x9e8 <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     97e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     982:	82 fd       	sbrc	r24, 2
     984:	29 c0       	rjmp	.+82     	; 0x9d8 <Endpoint_Write_Control_Stream_LE+0x98>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     986:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     98a:	80 ff       	sbrs	r24, 0
     98c:	1a c0       	rjmp	.+52     	; 0x9c2 <Endpoint_Write_Control_Stream_LE+0x82>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     98e:	80 91 f2 00 	lds	r24, 0x00F2
     992:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     994:	06 c0       	rjmp	.+12     	; 0x9a2 <Endpoint_Write_Control_Stream_LE+0x62>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     996:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     998:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     99c:	61 50       	subi	r22, 0x01	; 1
     99e:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     9a0:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     9a2:	61 15       	cp	r22, r1
     9a4:	71 05       	cpc	r23, r1
     9a6:	19 f0       	breq	.+6      	; 0x9ae <Endpoint_Write_Control_Stream_LE+0x6e>
     9a8:	88 30       	cpi	r24, 0x08	; 8
     9aa:	91 05       	cpc	r25, r1
     9ac:	a0 f3       	brcs	.-24     	; 0x996 <Endpoint_Write_Control_Stream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     9ae:	21 e0       	ldi	r18, 0x01	; 1
     9b0:	88 30       	cpi	r24, 0x08	; 8
     9b2:	91 05       	cpc	r25, r1
     9b4:	09 f0       	breq	.+2      	; 0x9b8 <Endpoint_Write_Control_Stream_LE+0x78>
     9b6:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9b8:	80 91 e8 00 	lds	r24, 0x00E8
     9bc:	8e 77       	andi	r24, 0x7E	; 126
     9be:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	91 f6       	brne	.-92     	; 0x96c <Endpoint_Write_Control_Stream_LE+0x2c>
     9c8:	22 23       	and	r18, r18
     9ca:	81 f6       	brne	.-96     	; 0x96c <Endpoint_Write_Control_Stream_LE+0x2c>
     9cc:	05 c0       	rjmp	.+10     	; 0x9d8 <Endpoint_Write_Control_Stream_LE+0x98>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9ce:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9d0:	88 23       	and	r24, r24
     9d2:	61 f0       	breq	.+24     	; 0x9ec <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9d4:	85 30       	cpi	r24, 0x05	; 5
     9d6:	61 f0       	breq	.+24     	; 0x9f0 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9d8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     9dc:	82 ff       	sbrs	r24, 2
     9de:	f7 cf       	rjmp	.-18     	; 0x9ce <Endpoint_Write_Control_Stream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     9e4:	83 e0       	ldi	r24, 0x03	; 3
     9e6:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     9ec:	82 e0       	ldi	r24, 0x02	; 2
     9ee:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     9f0:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     9f2:	08 95       	ret

000009f4 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     9f4:	e8 2f       	mov	r30, r24
     9f6:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     9f8:	80 91 a0 02 	lds	r24, 0x02A0
     9fc:	90 91 a1 02 	lds	r25, 0x02A1
     a00:	86 17       	cp	r24, r22
     a02:	97 07       	cpc	r25, r23
     a04:	18 f4       	brcc	.+6      	; 0xa0c <Endpoint_Write_Control_PStream_LE+0x18>
     a06:	bc 01       	movw	r22, r24
     a08:	20 e0       	ldi	r18, 0x00	; 0
     a0a:	36 c0       	rjmp	.+108    	; 0xa78 <Endpoint_Write_Control_PStream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     a0c:	61 15       	cp	r22, r1
     a0e:	71 05       	cpc	r23, r1
     a10:	d9 f7       	brne	.-10     	; 0xa08 <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a12:	80 91 e8 00 	lds	r24, 0x00E8
     a16:	8e 77       	andi	r24, 0x7E	; 126
     a18:	80 93 e8 00 	sts	0x00E8, r24
     a1c:	f5 cf       	rjmp	.-22     	; 0xa08 <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a1e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a20:	88 23       	and	r24, r24
     a22:	09 f4       	brne	.+2      	; 0xa26 <Endpoint_Write_Control_PStream_LE+0x32>
     a24:	3e c0       	rjmp	.+124    	; 0xaa2 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a26:	85 30       	cpi	r24, 0x05	; 5
     a28:	c1 f1       	breq	.+112    	; 0xa9a <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a2a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a2e:	83 fd       	sbrc	r24, 3
     a30:	36 c0       	rjmp	.+108    	; 0xa9e <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a32:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     a36:	82 fd       	sbrc	r24, 2
     a38:	2a c0       	rjmp	.+84     	; 0xa8e <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a3a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     a3e:	80 ff       	sbrs	r24, 0
     a40:	1b c0       	rjmp	.+54     	; 0xa78 <Endpoint_Write_Control_PStream_LE+0x84>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     a42:	80 91 f2 00 	lds	r24, 0x00F2
     a46:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a48:	07 c0       	rjmp	.+14     	; 0xa58 <Endpoint_Write_Control_PStream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     a4a:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a4c:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     a50:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     a52:	61 50       	subi	r22, 0x01	; 1
     a54:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     a56:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a58:	61 15       	cp	r22, r1
     a5a:	71 05       	cpc	r23, r1
     a5c:	19 f0       	breq	.+6      	; 0xa64 <Endpoint_Write_Control_PStream_LE+0x70>
     a5e:	88 30       	cpi	r24, 0x08	; 8
     a60:	91 05       	cpc	r25, r1
     a62:	98 f3       	brcs	.-26     	; 0xa4a <Endpoint_Write_Control_PStream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     a64:	21 e0       	ldi	r18, 0x01	; 1
     a66:	88 30       	cpi	r24, 0x08	; 8
     a68:	91 05       	cpc	r25, r1
     a6a:	09 f0       	breq	.+2      	; 0xa6e <Endpoint_Write_Control_PStream_LE+0x7a>
     a6c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a6e:	80 91 e8 00 	lds	r24, 0x00E8
     a72:	8e 77       	andi	r24, 0x7E	; 126
     a74:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     a78:	61 15       	cp	r22, r1
     a7a:	71 05       	cpc	r23, r1
     a7c:	81 f6       	brne	.-96     	; 0xa1e <Endpoint_Write_Control_PStream_LE+0x2a>
     a7e:	22 23       	and	r18, r18
     a80:	71 f6       	brne	.-100    	; 0xa1e <Endpoint_Write_Control_PStream_LE+0x2a>
     a82:	05 c0       	rjmp	.+10     	; 0xa8e <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a84:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a86:	88 23       	and	r24, r24
     a88:	61 f0       	breq	.+24     	; 0xaa2 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a8a:	85 30       	cpi	r24, 0x05	; 5
     a8c:	61 f0       	breq	.+24     	; 0xaa6 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a8e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     a92:	82 ff       	sbrs	r24, 2
     a94:	f7 cf       	rjmp	.-18     	; 0xa84 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     a9a:	83 e0       	ldi	r24, 0x03	; 3
     a9c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     aa2:	82 e0       	ldi	r24, 0x02	; 2
     aa4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     aa6:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     aa8:	08 95       	ret

00000aaa <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     aaa:	98 2f       	mov	r25, r24
     aac:	2c c0       	rjmp	.+88     	; 0xb06 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     aae:	29 2f       	mov	r18, r25
     ab0:	2f 70       	andi	r18, 0x0F	; 15
     ab2:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     ab6:	98 17       	cp	r25, r24
     ab8:	39 f0       	breq	.+14     	; 0xac8 <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     aba:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     abe:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     ac2:	50 91 f0 00 	lds	r21, 0x00F0
     ac6:	03 c0       	rjmp	.+6      	; 0xace <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     ac8:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     aca:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     acc:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     ace:	21 ff       	sbrs	r18, 1
     ad0:	19 c0       	rjmp	.+50     	; 0xb04 <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     ad2:	30 91 eb 00 	lds	r19, 0x00EB
     ad6:	3e 7f       	andi	r19, 0xFE	; 254
     ad8:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     adc:	30 91 ed 00 	lds	r19, 0x00ED
     ae0:	3d 7f       	andi	r19, 0xFD	; 253
     ae2:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     ae6:	30 91 eb 00 	lds	r19, 0x00EB
     aea:	31 60       	ori	r19, 0x01	; 1
     aec:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     af0:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     af4:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     af8:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     afc:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     b00:	27 ff       	sbrs	r18, 7
     b02:	08 c0       	rjmp	.+16     	; 0xb14 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     b04:	9f 5f       	subi	r25, 0xFF	; 255
     b06:	95 30       	cpi	r25, 0x05	; 5
     b08:	90 f2       	brcs	.-92     	; 0xaae <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b0a:	8f 70       	andi	r24, 0x0F	; 15
     b0c:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     b14:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     b16:	08 95       	ret

00000b18 <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     b18:	ef 92       	push	r14
     b1a:	ff 92       	push	r15
     b1c:	0f 93       	push	r16
     b1e:	1f 93       	push	r17
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     b26:	e8 2e       	mov	r14, r24
     b28:	e7 01       	movw	r28, r14
     b2a:	7e 01       	movw	r14, r28
     b2c:	f9 2e       	mov	r15, r25
     b2e:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     b30:	00 e0       	ldi	r16, 0x00	; 0
     b32:	2a c0       	rjmp	.+84     	; 0xb88 <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
     b34:	98 81       	ld	r25, Y
     b36:	99 23       	and	r25, r25
     b38:	29 f1       	breq	.+74     	; 0xb84 <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     b3a:	6b 81       	ldd	r22, Y+3	; 0x03
     b3c:	e9 81       	ldd	r30, Y+1	; 0x01
     b3e:	fa 81       	ldd	r31, Y+2	; 0x02
     b40:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     b42:	89 2f       	mov	r24, r25
     b44:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     b46:	85 30       	cpi	r24, 0x05	; 5
     b48:	18 f5       	brcc	.+70     	; 0xb90 <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     b4a:	62 95       	swap	r22
     b4c:	66 0f       	add	r22, r22
     b4e:	66 0f       	add	r22, r22
     b50:	60 7c       	andi	r22, 0xC0	; 192
     b52:	99 1f       	adc	r25, r25
     b54:	99 27       	eor	r25, r25
     b56:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     b58:	69 2b       	or	r22, r25
     b5a:	22 30       	cpi	r18, 0x02	; 2
     b5c:	10 f0       	brcs	.+4      	; 0xb62 <Endpoint_ConfigureEndpointTable+0x4a>
     b5e:	96 e0       	ldi	r25, 0x06	; 6
     b60:	01 c0       	rjmp	.+2      	; 0xb64 <Endpoint_ConfigureEndpointTable+0x4c>
     b62:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     b64:	28 e0       	ldi	r18, 0x08	; 8
     b66:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	03 c0       	rjmp	.+6      	; 0xb72 <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     b6c:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     b6e:	22 0f       	add	r18, r18
     b70:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     b72:	2e 17       	cp	r18, r30
     b74:	3f 07       	cpc	r19, r31
     b76:	d0 f3       	brcs	.-12     	; 0xb6c <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     b78:	42 95       	swap	r20
     b7a:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     b7c:	49 2b       	or	r20, r25
     b7e:	95 df       	rcall	.-214    	; 0xaaa <Endpoint_ConfigureEndpoint_Prv>
     b80:	88 23       	and	r24, r24
     b82:	31 f0       	breq	.+12     	; 0xb90 <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     b84:	0f 5f       	subi	r16, 0xFF	; 255
     b86:	25 96       	adiw	r28, 0x05	; 5
     b88:	01 17       	cp	r16, r17
     b8a:	a0 f2       	brcs	.-88     	; 0xb34 <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	01 c0       	rjmp	.+2      	; 0xb92 <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     b90:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	ff 90       	pop	r15
     b9c:	ef 90       	pop	r14
     b9e:	08 95       	ret

00000ba0 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     ba0:	80 91 9a 02 	lds	r24, 0x029A
     ba4:	87 ff       	sbrs	r24, 7
     ba6:	11 c0       	rjmp	.+34     	; 0xbca <Endpoint_ClearStatusStage+0x2a>
     ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     baa:	8e b3       	in	r24, 0x1e	; 30
     bac:	88 23       	and	r24, r24
     bae:	b1 f0       	breq	.+44     	; 0xbdc <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     bb0:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     bb4:	82 ff       	sbrs	r24, 2
     bb6:	f9 cf       	rjmp	.-14     	; 0xbaa <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bb8:	80 91 e8 00 	lds	r24, 0x00E8
     bbc:	8b 77       	andi	r24, 0x7B	; 123
     bbe:	80 93 e8 00 	sts	0x00E8, r24
     bc2:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     bc4:	8e b3       	in	r24, 0x1e	; 30
     bc6:	88 23       	and	r24, r24
     bc8:	49 f0       	breq	.+18     	; 0xbdc <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bca:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     bce:	80 ff       	sbrs	r24, 0
     bd0:	f9 cf       	rjmp	.-14     	; 0xbc4 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     bd2:	80 91 e8 00 	lds	r24, 0x00E8
     bd6:	8e 77       	andi	r24, 0x7E	; 126
     bd8:	80 93 e8 00 	sts	0x00E8, r24
     bdc:	08 95       	ret

00000bde <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     bde:	80 91 e4 00 	lds	r24, 0x00E4
     be2:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     be6:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     be8:	20 91 ec 00 	lds	r18, 0x00EC
     bec:	20 ff       	sbrs	r18, 0
     bee:	25 c0       	rjmp	.+74     	; 0xc3a <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     bf0:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     bf4:	20 fd       	sbrc	r18, 0
     bf6:	15 c0       	rjmp	.+42     	; 0xc22 <Endpoint_WaitUntilReady+0x44>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     bf8:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     bfa:	22 23       	and	r18, r18
     bfc:	a1 f0       	breq	.+40     	; 0xc26 <Endpoint_WaitUntilReady+0x48>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     bfe:	25 30       	cpi	r18, 0x05	; 5
     c00:	a1 f0       	breq	.+40     	; 0xc2a <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c02:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     c06:	25 fd       	sbrc	r18, 5
     c08:	12 c0       	rjmp	.+36     	; 0xc2e <Endpoint_WaitUntilReady+0x50>
     c0a:	20 91 e4 00 	lds	r18, 0x00E4
     c0e:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     c12:	28 17       	cp	r18, r24
     c14:	39 07       	cpc	r19, r25
     c16:	41 f3       	breq	.-48     	; 0xbe8 <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     c18:	44 23       	and	r20, r20
     c1a:	59 f0       	breq	.+22     	; 0xc32 <Endpoint_WaitUntilReady+0x54>
     c1c:	41 50       	subi	r20, 0x01	; 1
     c1e:	c9 01       	movw	r24, r18
     c20:	e3 cf       	rjmp	.-58     	; 0xbe8 <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     c32:	84 e0       	ldi	r24, 0x04	; 4
     c34:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     c36:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     c38:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c3a:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     c3e:	22 ff       	sbrs	r18, 2
     c40:	db cf       	rjmp	.-74     	; 0xbf8 <Endpoint_WaitUntilReady+0x1a>
     c42:	f9 cf       	rjmp	.-14     	; 0xc36 <Endpoint_WaitUntilReady+0x58>

00000c44 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c44:	40 d0       	rcall	.+128    	; 0xcc6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c46:	42 d0       	rcall	.+132    	; 0xccc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c48:	80 91 d8 00 	lds	r24, 0x00D8
     c4c:	8f 77       	andi	r24, 0x7F	; 127
     c4e:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     c52:	80 91 d8 00 	lds	r24, 0x00D8
     c56:	80 68       	ori	r24, 0x80	; 128
     c58:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c5c:	80 91 d8 00 	lds	r24, 0x00D8
     c60:	8f 7d       	andi	r24, 0xDF	; 223
     c62:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     c66:	84 e0       	ldi	r24, 0x04	; 4
     c68:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     c6a:	86 e0       	ldi	r24, 0x06	; 6
     c6c:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     c6e:	09 b4       	in	r0, 0x29	; 41
     c70:	00 fe       	sbrs	r0, 0
     c72:	fd cf       	rjmp	.-6      	; 0xc6e <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     c74:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     c76:	10 92 96 02 	sts	0x0296, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     c7a:	10 92 98 02 	sts	0x0298, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     c7e:	10 92 97 02 	sts	0x0297, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	42 e0       	ldi	r20, 0x02	; 2
     c88:	10 df       	rcall	.-480    	; 0xaaa <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     c8a:	80 91 e1 00 	lds	r24, 0x00E1
     c8e:	8e 7f       	andi	r24, 0xFE	; 254
     c90:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     c94:	80 91 e2 00 	lds	r24, 0x00E2
     c98:	81 60       	ori	r24, 0x01	; 1
     c9a:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     c9e:	80 91 e2 00 	lds	r24, 0x00E2
     ca2:	88 60       	ori	r24, 0x08	; 8
     ca4:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     ca8:	80 91 e0 00 	lds	r24, 0x00E0
     cac:	8e 7f       	andi	r24, 0xFE	; 254
     cae:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     cb2:	08 95       	ret

00000cb4 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     cb4:	e3 e6       	ldi	r30, 0x63	; 99
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	8e 7f       	andi	r24, 0xFE	; 254
     cbc:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	80 93 99 02 	sts	0x0299, r24

	USB_ResetInterface();
}
     cc4:	bf cf       	rjmp	.-130    	; 0xc44 <USB_ResetInterface>

00000cc6 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     cc6:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     cca:	08 95       	ret

00000ccc <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     ccc:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     cd0:	08 95       	ret

00000cd2 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     cd2:	1f 92       	push	r1
     cd4:	0f 92       	push	r0
     cd6:	0f b6       	in	r0, 0x3f	; 63
     cd8:	0f 92       	push	r0
     cda:	11 24       	eor	r1, r1
     cdc:	2f 93       	push	r18
     cde:	3f 93       	push	r19
     ce0:	4f 93       	push	r20
     ce2:	5f 93       	push	r21
     ce4:	6f 93       	push	r22
     ce6:	7f 93       	push	r23
     ce8:	8f 93       	push	r24
     cea:	9f 93       	push	r25
     cec:	af 93       	push	r26
     cee:	bf 93       	push	r27
     cf0:	ef 93       	push	r30
     cf2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     cf4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     cf8:	82 ff       	sbrs	r24, 2
     cfa:	0a c0       	rjmp	.+20     	; 0xd10 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     cfc:	80 91 e2 00 	lds	r24, 0x00E2
     d00:	82 ff       	sbrs	r24, 2
     d02:	06 c0       	rjmp	.+12     	; 0xd10 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     d04:	80 91 e1 00 	lds	r24, 0x00E1
     d08:	8b 7f       	andi	r24, 0xFB	; 251
     d0a:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     d0e:	21 d2       	rcall	.+1090   	; 0x1152 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     d10:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     d14:	80 ff       	sbrs	r24, 0
     d16:	16 c0       	rjmp	.+44     	; 0xd44 <__vector_11+0x72>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     d18:	80 91 e2 00 	lds	r24, 0x00E2
     d1c:	80 ff       	sbrs	r24, 0
     d1e:	12 c0       	rjmp	.+36     	; 0xd44 <__vector_11+0x72>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     d20:	80 91 e2 00 	lds	r24, 0x00E2
     d24:	8e 7f       	andi	r24, 0xFE	; 254
     d26:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     d2a:	80 91 e2 00 	lds	r24, 0x00E2
     d2e:	80 61       	ori	r24, 0x10	; 16
     d30:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     d34:	80 91 d8 00 	lds	r24, 0x00D8
     d38:	80 62       	ori	r24, 0x20	; 32
     d3a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d3e:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     d40:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
     d42:	2c dc       	rcall	.-1960   	; 0x59c <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     d44:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     d48:	84 ff       	sbrs	r24, 4
     d4a:	2c c0       	rjmp	.+88     	; 0xda4 <__vector_11+0xd2>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     d4c:	80 91 e2 00 	lds	r24, 0x00E2
     d50:	84 ff       	sbrs	r24, 4
     d52:	28 c0       	rjmp	.+80     	; 0xda4 <__vector_11+0xd2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d54:	84 e0       	ldi	r24, 0x04	; 4
     d56:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d58:	86 e0       	ldi	r24, 0x06	; 6
     d5a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d5c:	09 b4       	in	r0, 0x29	; 41
     d5e:	00 fe       	sbrs	r0, 0
     d60:	fd cf       	rjmp	.-6      	; 0xd5c <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     d62:	80 91 d8 00 	lds	r24, 0x00D8
     d66:	8f 7d       	andi	r24, 0xDF	; 223
     d68:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     d6c:	80 91 e1 00 	lds	r24, 0x00E1
     d70:	8f 7e       	andi	r24, 0xEF	; 239
     d72:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     d76:	80 91 e2 00 	lds	r24, 0x00E2
     d7a:	8f 7e       	andi	r24, 0xEF	; 239
     d7c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     d80:	80 91 e2 00 	lds	r24, 0x00E2
     d84:	81 60       	ori	r24, 0x01	; 1
     d86:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     d8a:	80 91 96 02 	lds	r24, 0x0296
     d8e:	88 23       	and	r24, r24
     d90:	21 f4       	brne	.+8      	; 0xd9a <__vector_11+0xc8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     d92:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     d96:	87 ff       	sbrs	r24, 7
     d98:	02 c0       	rjmp	.+4      	; 0xd9e <__vector_11+0xcc>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <__vector_11+0xce>
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     da2:	fb db       	rcall	.-2058   	; 0x59a <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     da4:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     da8:	83 ff       	sbrs	r24, 3
     daa:	26 c0       	rjmp	.+76     	; 0xdf8 <__vector_11+0x126>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     dac:	80 91 e2 00 	lds	r24, 0x00E2
     db0:	83 ff       	sbrs	r24, 3
     db2:	22 c0       	rjmp	.+68     	; 0xdf8 <__vector_11+0x126>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     db4:	80 91 e1 00 	lds	r24, 0x00E1
     db8:	87 7f       	andi	r24, 0xF7	; 247
     dba:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
     dc2:	10 92 96 02 	sts	0x0296, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     dc6:	80 91 e1 00 	lds	r24, 0x00E1
     dca:	8e 7f       	andi	r24, 0xFE	; 254
     dcc:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     dd0:	80 91 e2 00 	lds	r24, 0x00E2
     dd4:	8e 7f       	andi	r24, 0xFE	; 254
     dd6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     dda:	80 91 e2 00 	lds	r24, 0x00E2
     dde:	80 61       	ori	r24, 0x10	; 16
     de0:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	42 e0       	ldi	r20, 0x02	; 2
     dea:	5f de       	rcall	.-834    	; 0xaaa <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     dec:	80 91 f0 00 	lds	r24, 0x00F0
     df0:	88 60       	ori	r24, 0x08	; 8
     df2:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     df6:	ad d1       	rcall	.+858    	; 0x1152 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     df8:	ff 91       	pop	r31
     dfa:	ef 91       	pop	r30
     dfc:	bf 91       	pop	r27
     dfe:	af 91       	pop	r26
     e00:	9f 91       	pop	r25
     e02:	8f 91       	pop	r24
     e04:	7f 91       	pop	r23
     e06:	6f 91       	pop	r22
     e08:	5f 91       	pop	r21
     e0a:	4f 91       	pop	r20
     e0c:	3f 91       	pop	r19
     e0e:	2f 91       	pop	r18
     e10:	0f 90       	pop	r0
     e12:	0f be       	out	0x3f, r0	; 63
     e14:	0f 90       	pop	r0
     e16:	1f 90       	pop	r1
     e18:	18 95       	reti

00000e1a <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     e1a:	1f 92       	push	r1
     e1c:	0f 92       	push	r0
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	0f 92       	push	r0
     e22:	11 24       	eor	r1, r1
     e24:	1f 93       	push	r17
     e26:	2f 93       	push	r18
     e28:	3f 93       	push	r19
     e2a:	4f 93       	push	r20
     e2c:	5f 93       	push	r21
     e2e:	6f 93       	push	r22
     e30:	7f 93       	push	r23
     e32:	8f 93       	push	r24
     e34:	9f 93       	push	r25
     e36:	af 93       	push	r26
     e38:	bf 93       	push	r27
     e3a:	ef 93       	push	r30
     e3c:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e3e:	10 91 e9 00 	lds	r17, 0x00E9
     e42:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e44:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e48:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     e4c:	80 91 f0 00 	lds	r24, 0x00F0
     e50:	87 7f       	andi	r24, 0xF7	; 247
     e52:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     e56:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     e58:	1b d0       	rcall	.+54     	; 0xe90 <USB_Device_ProcessControlRequest>
     e5a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     e5e:	80 91 f0 00 	lds	r24, 0x00F0
     e62:	88 60       	ori	r24, 0x08	; 8
     e64:	80 93 f0 00 	sts	0x00F0, r24
     e68:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     e6c:	ff 91       	pop	r31
     e6e:	ef 91       	pop	r30
     e70:	bf 91       	pop	r27
     e72:	af 91       	pop	r26
     e74:	9f 91       	pop	r25
     e76:	8f 91       	pop	r24
     e78:	7f 91       	pop	r23
     e7a:	6f 91       	pop	r22
     e7c:	5f 91       	pop	r21
     e7e:	4f 91       	pop	r20
     e80:	3f 91       	pop	r19
     e82:	2f 91       	pop	r18
     e84:	1f 91       	pop	r17
     e86:	0f 90       	pop	r0
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	0f 90       	pop	r0
     e8c:	1f 90       	pop	r1
     e8e:	18 95       	reti

00000e90 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     e90:	1f 93       	push	r17
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	ac 97       	sbiw	r28, 0x2c	; 44
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     ea6:	ea e9       	ldi	r30, 0x9A	; 154
     ea8:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     eaa:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     eae:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     eb0:	22 e0       	ldi	r18, 0x02	; 2
     eb2:	e2 3a       	cpi	r30, 0xA2	; 162
     eb4:	f2 07       	cpc	r31, r18
     eb6:	c9 f7       	brne	.-14     	; 0xeaa <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     eb8:	75 db       	rcall	.-2326   	; 0x5a4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     eba:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     ebe:	83 ff       	sbrs	r24, 3
     ec0:	30 c1       	rjmp	.+608    	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     ec2:	80 91 9a 02 	lds	r24, 0x029A

		switch (USB_ControlRequest.bRequest)
     ec6:	20 91 9b 02 	lds	r18, 0x029B
     eca:	25 30       	cpi	r18, 0x05	; 5
     ecc:	09 f4       	brne	.+2      	; 0xed0 <USB_Device_ProcessControlRequest+0x40>
     ece:	84 c0       	rjmp	.+264    	; 0xfd8 <USB_Device_ProcessControlRequest+0x148>
     ed0:	26 30       	cpi	r18, 0x06	; 6
     ed2:	40 f4       	brcc	.+16     	; 0xee4 <USB_Device_ProcessControlRequest+0x54>
     ed4:	21 30       	cpi	r18, 0x01	; 1
     ed6:	a1 f1       	breq	.+104    	; 0xf40 <USB_Device_ProcessControlRequest+0xb0>
     ed8:	21 30       	cpi	r18, 0x01	; 1
     eda:	70 f0       	brcs	.+28     	; 0xef8 <USB_Device_ProcessControlRequest+0x68>
     edc:	23 30       	cpi	r18, 0x03	; 3
     ede:	09 f0       	breq	.+2      	; 0xee2 <USB_Device_ProcessControlRequest+0x52>
     ee0:	20 c1       	rjmp	.+576    	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
     ee2:	2e c0       	rjmp	.+92     	; 0xf40 <USB_Device_ProcessControlRequest+0xb0>
     ee4:	28 30       	cpi	r18, 0x08	; 8
     ee6:	09 f4       	brne	.+2      	; 0xeea <USB_Device_ProcessControlRequest+0x5a>
     ee8:	ef c0       	rjmp	.+478    	; 0x10c8 <USB_Device_ProcessControlRequest+0x238>
     eea:	29 30       	cpi	r18, 0x09	; 9
     eec:	09 f4       	brne	.+2      	; 0xef0 <USB_Device_ProcessControlRequest+0x60>
     eee:	fe c0       	rjmp	.+508    	; 0x10ec <USB_Device_ProcessControlRequest+0x25c>
     ef0:	26 30       	cpi	r18, 0x06	; 6
     ef2:	09 f0       	breq	.+2      	; 0xef6 <USB_Device_ProcessControlRequest+0x66>
     ef4:	16 c1       	rjmp	.+556    	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
     ef6:	92 c0       	rjmp	.+292    	; 0x101c <USB_Device_ProcessControlRequest+0x18c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     ef8:	80 38       	cpi	r24, 0x80	; 128
     efa:	21 f0       	breq	.+8      	; 0xf04 <USB_Device_ProcessControlRequest+0x74>
     efc:	82 38       	cpi	r24, 0x82	; 130
     efe:	09 f0       	breq	.+2      	; 0xf02 <USB_Device_ProcessControlRequest+0x72>
     f00:	10 c1       	rjmp	.+544    	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
     f02:	08 c0       	rjmp	.+16     	; 0xf14 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     f04:	80 91 97 02 	lds	r24, 0x0297
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     f08:	90 91 98 02 	lds	r25, 0x0298
     f0c:	99 23       	and	r25, r25
     f0e:	71 f0       	breq	.+28     	; 0xf2c <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     f10:	82 60       	ori	r24, 0x02	; 2
     f12:	0c c0       	rjmp	.+24     	; 0xf2c <USB_Device_ProcessControlRequest+0x9c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f14:	80 91 9e 02 	lds	r24, 0x029E
     f18:	8f 70       	andi	r24, 0x0F	; 15
     f1a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     f1e:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	95 ff       	sbrs	r25, 5
     f26:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f28:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f2c:	90 91 e8 00 	lds	r25, 0x00E8
     f30:	97 7f       	andi	r25, 0xF7	; 247
     f32:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     f36:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     f3a:	10 92 f1 00 	sts	0x00F1, r1
     f3e:	cf c0       	rjmp	.+414    	; 0x10de <USB_Device_ProcessControlRequest+0x24e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f40:	88 23       	and	r24, r24
     f42:	19 f0       	breq	.+6      	; 0xf4a <USB_Device_ProcessControlRequest+0xba>
     f44:	82 30       	cpi	r24, 0x02	; 2
     f46:	09 f0       	breq	.+2      	; 0xf4a <USB_Device_ProcessControlRequest+0xba>
     f48:	ec c0       	rjmp	.+472    	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	8f 71       	andi	r24, 0x1F	; 31
     f4e:	90 70       	andi	r25, 0x00	; 0
     f50:	00 97       	sbiw	r24, 0x00	; 0
     f52:	29 f0       	breq	.+10     	; 0xf5e <USB_Device_ProcessControlRequest+0xce>
     f54:	82 30       	cpi	r24, 0x02	; 2
     f56:	91 05       	cpc	r25, r1
     f58:	09 f0       	breq	.+2      	; 0xf5c <USB_Device_ProcessControlRequest+0xcc>
     f5a:	e3 c0       	rjmp	.+454    	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
     f5c:	0b c0       	rjmp	.+22     	; 0xf74 <USB_Device_ProcessControlRequest+0xe4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     f5e:	80 91 9c 02 	lds	r24, 0x029C
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	09 f0       	breq	.+2      	; 0xf68 <USB_Device_ProcessControlRequest+0xd8>
     f66:	dd c0       	rjmp	.+442    	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     f68:	23 30       	cpi	r18, 0x03	; 3
     f6a:	09 f0       	breq	.+2      	; 0xf6e <USB_Device_ProcessControlRequest+0xde>
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	80 93 98 02 	sts	0x0298, r24
     f72:	2c c0       	rjmp	.+88     	; 0xfcc <USB_Device_ProcessControlRequest+0x13c>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     f74:	80 91 9c 02 	lds	r24, 0x029C
     f78:	88 23       	and	r24, r24
     f7a:	41 f5       	brne	.+80     	; 0xfcc <USB_Device_ProcessControlRequest+0x13c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     f7c:	20 91 9e 02 	lds	r18, 0x029E
     f80:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     f82:	09 f4       	brne	.+2      	; 0xf86 <USB_Device_ProcessControlRequest+0xf6>
     f84:	ce c0       	rjmp	.+412    	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f86:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     f8a:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     f8e:	80 ff       	sbrs	r24, 0
     f90:	1d c0       	rjmp	.+58     	; 0xfcc <USB_Device_ProcessControlRequest+0x13c>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     f92:	80 91 9b 02 	lds	r24, 0x029B
     f96:	83 30       	cpi	r24, 0x03	; 3
     f98:	21 f4       	brne	.+8      	; 0xfa2 <USB_Device_ProcessControlRequest+0x112>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     f9a:	80 91 eb 00 	lds	r24, 0x00EB
     f9e:	80 62       	ori	r24, 0x20	; 32
     fa0:	13 c0       	rjmp	.+38     	; 0xfc8 <USB_Device_ProcessControlRequest+0x138>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     fa2:	80 91 eb 00 	lds	r24, 0x00EB
     fa6:	80 61       	ori	r24, 0x10	; 16
     fa8:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <USB_Device_ProcessControlRequest+0x126>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	2a 95       	dec	r18
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <USB_Device_ProcessControlRequest+0x122>
     fba:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     fbe:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     fc2:	80 91 eb 00 	lds	r24, 0x00EB
     fc6:	88 60       	ori	r24, 0x08	; 8
     fc8:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fcc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     fd0:	80 91 e8 00 	lds	r24, 0x00E8
     fd4:	87 7f       	andi	r24, 0xF7	; 247
     fd6:	86 c0       	rjmp	.+268    	; 0x10e4 <USB_Device_ProcessControlRequest+0x254>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     fd8:	88 23       	and	r24, r24
     fda:	09 f0       	breq	.+2      	; 0xfde <USB_Device_ProcessControlRequest+0x14e>
     fdc:	a2 c0       	rjmp	.+324    	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     fde:	10 91 9c 02 	lds	r17, 0x029C
     fe2:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     fe4:	80 91 e3 00 	lds	r24, 0x00E3
     fe8:	80 78       	andi	r24, 0x80	; 128
     fea:	81 2b       	or	r24, r17
     fec:	80 93 e3 00 	sts	0x00E3, r24
     ff0:	80 91 e8 00 	lds	r24, 0x00E8
     ff4:	87 7f       	andi	r24, 0xF7	; 247
     ff6:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     ffa:	d2 dd       	rcall	.-1116   	; 0xba0 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ffc:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1000:	80 ff       	sbrs	r24, 0
    1002:	fc cf       	rjmp	.-8      	; 0xffc <USB_Device_ProcessControlRequest+0x16c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    1004:	80 91 e3 00 	lds	r24, 0x00E3
    1008:	80 68       	ori	r24, 0x80	; 128
    100a:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    100e:	11 23       	and	r17, r17
    1010:	11 f0       	breq	.+4      	; 0x1016 <USB_Device_ProcessControlRequest+0x186>
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <USB_Device_ProcessControlRequest+0x188>
    1016:	82 e0       	ldi	r24, 0x02	; 2
    1018:	8e bb       	out	0x1e, r24	; 30
    101a:	83 c0       	rjmp	.+262    	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    101c:	80 58       	subi	r24, 0x80	; 128
    101e:	82 30       	cpi	r24, 0x02	; 2
    1020:	08 f0       	brcs	.+2      	; 0x1024 <USB_Device_ProcessControlRequest+0x194>
    1022:	7f c0       	rjmp	.+254    	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1024:	80 91 9c 02 	lds	r24, 0x029C
    1028:	90 91 9d 02 	lds	r25, 0x029D
    102c:	23 e0       	ldi	r18, 0x03	; 3
    102e:	8c 3d       	cpi	r24, 0xDC	; 220
    1030:	92 07       	cpc	r25, r18
    1032:	91 f5       	brne	.+100    	; 0x1098 <USB_Device_ProcessControlRequest+0x208>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1038:	8a e2       	ldi	r24, 0x2A	; 42
    103a:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    103c:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    103e:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1040:	de 01       	movw	r26, r28
    1042:	15 96       	adiw	r26, 0x05	; 5
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1048:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    104a:	61 e2       	ldi	r22, 0x21	; 33
    104c:	e4 2f       	mov	r30, r20
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	60 93 57 00 	sts	0x0057, r22
    1054:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
    1056:	80 ff       	sbrs	r24, 0
    1058:	03 c0       	rjmp	.+6      	; 0x1060 <USB_Device_ProcessControlRequest+0x1d0>
					{
						SerialByte >>= 4;
    105a:	e2 95       	swap	r30
    105c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    105e:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1060:	ef 70       	andi	r30, 0x0F	; 15
    1062:	2e 2f       	mov	r18, r30
    1064:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1066:	ea 30       	cpi	r30, 0x0A	; 10
    1068:	18 f0       	brcs	.+6      	; 0x1070 <USB_Device_ProcessControlRequest+0x1e0>
    106a:	29 5c       	subi	r18, 0xC9	; 201
    106c:	3f 4f       	sbci	r19, 0xFF	; 255
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <USB_Device_ProcessControlRequest+0x1e4>
    1070:	20 5d       	subi	r18, 0xD0	; 208
    1072:	3f 4f       	sbci	r19, 0xFF	; 255
    1074:	2d 93       	st	X+, r18
    1076:	3d 93       	st	X+, r19
    1078:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    107a:	84 31       	cpi	r24, 0x14	; 20
    107c:	91 05       	cpc	r25, r1
    107e:	31 f7       	brne	.-52     	; 0x104c <USB_Device_ProcessControlRequest+0x1bc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1080:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1082:	80 91 e8 00 	lds	r24, 0x00E8
    1086:	87 7f       	andi	r24, 0xF7	; 247
    1088:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    108c:	ce 01       	movw	r24, r28
    108e:	03 96       	adiw	r24, 0x03	; 3
    1090:	6a e2       	ldi	r22, 0x2A	; 42
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	55 dc       	rcall	.-1878   	; 0x940 <Endpoint_Write_Control_Stream_LE>
    1096:	12 c0       	rjmp	.+36     	; 0x10bc <USB_Device_ProcessControlRequest+0x22c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1098:	60 91 9e 02 	lds	r22, 0x029E
    109c:	ae 01       	movw	r20, r28
    109e:	4f 5f       	subi	r20, 0xFF	; 255
    10a0:	5f 4f       	sbci	r21, 0xFF	; 255
    10a2:	21 dc       	rcall	.-1982   	; 0x8e6 <CALLBACK_USB_GetDescriptor>
    10a4:	bc 01       	movw	r22, r24
    10a6:	00 97       	sbiw	r24, 0x00	; 0
    10a8:	09 f4       	brne	.+2      	; 0x10ac <USB_Device_ProcessControlRequest+0x21c>
    10aa:	3b c0       	rjmp	.+118    	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
    10ac:	80 91 e8 00 	lds	r24, 0x00E8
    10b0:	87 7f       	andi	r24, 0xF7	; 247
    10b2:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ba:	9c dc       	rcall	.-1736   	; 0x9f4 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10bc:	80 91 e8 00 	lds	r24, 0x00E8
    10c0:	8b 77       	andi	r24, 0x7B	; 123
    10c2:	80 93 e8 00 	sts	0x00E8, r24
    10c6:	2d c0       	rjmp	.+90     	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    10c8:	80 38       	cpi	r24, 0x80	; 128
    10ca:	59 f5       	brne	.+86     	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10cc:	80 91 e8 00 	lds	r24, 0x00E8
    10d0:	87 7f       	andi	r24, 0xF7	; 247
    10d2:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    10d6:	80 91 96 02 	lds	r24, 0x0296
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10da:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10de:	80 91 e8 00 	lds	r24, 0x00E8
    10e2:	8e 77       	andi	r24, 0x7E	; 126
    10e4:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    10e8:	5b dd       	rcall	.-1354   	; 0xba0 <Endpoint_ClearStatusStage>
    10ea:	1b c0       	rjmp	.+54     	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    10ec:	88 23       	and	r24, r24
    10ee:	c9 f4       	brne	.+50     	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    10f0:	90 91 9c 02 	lds	r25, 0x029C
    10f4:	92 30       	cpi	r25, 0x02	; 2
    10f6:	a8 f4       	brcc	.+42     	; 0x1122 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10f8:	80 91 e8 00 	lds	r24, 0x00E8
    10fc:	87 7f       	andi	r24, 0xF7	; 247
    10fe:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1102:	90 93 96 02 	sts	0x0296, r25

	Endpoint_ClearStatusStage();
    1106:	4c dd       	rcall	.-1384   	; 0xba0 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    1108:	80 91 96 02 	lds	r24, 0x0296
    110c:	88 23       	and	r24, r24
    110e:	21 f4       	brne	.+8      	; 0x1118 <USB_Device_ProcessControlRequest+0x288>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1110:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1114:	87 ff       	sbrs	r24, 7
    1116:	02 c0       	rjmp	.+4      	; 0x111c <USB_Device_ProcessControlRequest+0x28c>
    1118:	84 e0       	ldi	r24, 0x04	; 4
    111a:	01 c0       	rjmp	.+2      	; 0x111e <USB_Device_ProcessControlRequest+0x28e>
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    1120:	3e da       	rcall	.-2948   	; 0x59e <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1122:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1126:	83 ff       	sbrs	r24, 3
    1128:	0a c0       	rjmp	.+20     	; 0x113e <USB_Device_ProcessControlRequest+0x2ae>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    112a:	80 91 e8 00 	lds	r24, 0x00E8
    112e:	87 7f       	andi	r24, 0xF7	; 247
    1130:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1134:	80 91 eb 00 	lds	r24, 0x00EB
    1138:	80 62       	ori	r24, 0x20	; 32
    113a:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    113e:	ac 96       	adiw	r28, 0x2c	; 44
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	de bf       	out	0x3e, r29	; 62
    1146:	0f be       	out	0x3f, r0	; 63
    1148:	cd bf       	out	0x3d, r28	; 61
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	1f 91       	pop	r17
    1150:	08 95       	ret

00001152 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1152:	08 95       	ret

00001154 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1154:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1156:	8e b3       	in	r24, 0x1e	; 30
    1158:	88 23       	and	r24, r24
    115a:	a9 f0       	breq	.+42     	; 0x1186 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    115c:	80 91 e9 00 	lds	r24, 0x00E9
    1160:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1162:	90 91 ec 00 	lds	r25, 0x00EC
    1166:	90 ff       	sbrs	r25, 0
    1168:	02 c0       	rjmp	.+4      	; 0x116e <USB_USBTask+0x1a>
    116a:	10 e8       	ldi	r17, 0x80	; 128
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <USB_USBTask+0x1c>
    116e:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1170:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1172:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1176:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    117a:	83 ff       	sbrs	r24, 3
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
    117e:	88 de       	rcall	.-752    	; 0xe90 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1180:	1f 70       	andi	r17, 0x0F	; 15
    1182:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    1186:	1f 91       	pop	r17
    1188:	08 95       	ret

0000118a <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1190:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1194:	83 ff       	sbrs	r24, 3
    1196:	a2 c0       	rjmp	.+324    	; 0x12dc <CDC_Device_ProcessControlRequest+0x152>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1198:	88 81       	ld	r24, Y
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	20 91 9e 02 	lds	r18, 0x029E
    11a0:	30 91 9f 02 	lds	r19, 0x029F
    11a4:	28 17       	cp	r18, r24
    11a6:	39 07       	cpc	r19, r25
    11a8:	09 f0       	breq	.+2      	; 0x11ac <CDC_Device_ProcessControlRequest+0x22>
    11aa:	98 c0       	rjmp	.+304    	; 0x12dc <CDC_Device_ProcessControlRequest+0x152>
	  return;

	switch (USB_ControlRequest.bRequest)
    11ac:	80 91 9b 02 	lds	r24, 0x029B
    11b0:	81 32       	cpi	r24, 0x21	; 33
    11b2:	69 f0       	breq	.+26     	; 0x11ce <CDC_Device_ProcessControlRequest+0x44>
    11b4:	82 32       	cpi	r24, 0x22	; 34
    11b6:	20 f4       	brcc	.+8      	; 0x11c0 <CDC_Device_ProcessControlRequest+0x36>
    11b8:	80 32       	cpi	r24, 0x20	; 32
    11ba:	09 f0       	breq	.+2      	; 0x11be <CDC_Device_ProcessControlRequest+0x34>
    11bc:	8f c0       	rjmp	.+286    	; 0x12dc <CDC_Device_ProcessControlRequest+0x152>
    11be:	3c c0       	rjmp	.+120    	; 0x1238 <CDC_Device_ProcessControlRequest+0xae>
    11c0:	82 32       	cpi	r24, 0x22	; 34
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <CDC_Device_ProcessControlRequest+0x3c>
    11c4:	6a c0       	rjmp	.+212    	; 0x129a <CDC_Device_ProcessControlRequest+0x110>
    11c6:	83 32       	cpi	r24, 0x23	; 35
    11c8:	09 f0       	breq	.+2      	; 0x11cc <CDC_Device_ProcessControlRequest+0x42>
    11ca:	88 c0       	rjmp	.+272    	; 0x12dc <CDC_Device_ProcessControlRequest+0x152>
    11cc:	79 c0       	rjmp	.+242    	; 0x12c0 <CDC_Device_ProcessControlRequest+0x136>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    11ce:	80 91 9a 02 	lds	r24, 0x029A
    11d2:	81 3a       	cpi	r24, 0xA1	; 161
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <CDC_Device_ProcessControlRequest+0x4e>
    11d6:	82 c0       	rjmp	.+260    	; 0x12dc <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    11d8:	80 91 e8 00 	lds	r24, 0x00E8
    11dc:	87 7f       	andi	r24, 0xF7	; 247
    11de:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    11e2:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    11e6:	80 ff       	sbrs	r24, 0
    11e8:	fc cf       	rjmp	.-8      	; 0x11e2 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    11ea:	8c 89       	ldd	r24, Y+20	; 0x14
    11ec:	9d 89       	ldd	r25, Y+21	; 0x15
    11ee:	ae 89       	ldd	r26, Y+22	; 0x16
    11f0:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    11f2:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    11f6:	29 2f       	mov	r18, r25
    11f8:	3a 2f       	mov	r19, r26
    11fa:	4b 2f       	mov	r20, r27
    11fc:	55 27       	eor	r21, r21
    11fe:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
    1202:	9d 01       	movw	r18, r26
    1204:	44 27       	eor	r20, r20
    1206:	55 27       	eor	r21, r21
    1208:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
    120c:	8b 2f       	mov	r24, r27
    120e:	99 27       	eor	r25, r25
    1210:	aa 27       	eor	r26, r26
    1212:	bb 27       	eor	r27, r27
    1214:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    1218:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    121a:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    121e:	89 8d       	ldd	r24, Y+25	; 0x19
    1220:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1224:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1226:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    122a:	80 91 e8 00 	lds	r24, 0x00E8
    122e:	8e 77       	andi	r24, 0x7E	; 126
    1230:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1234:	b5 dc       	rcall	.-1686   	; 0xba0 <Endpoint_ClearStatusStage>
    1236:	52 c0       	rjmp	.+164    	; 0x12dc <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1238:	80 91 9a 02 	lds	r24, 0x029A
    123c:	81 32       	cpi	r24, 0x21	; 33
    123e:	09 f0       	breq	.+2      	; 0x1242 <CDC_Device_ProcessControlRequest+0xb8>
    1240:	4d c0       	rjmp	.+154    	; 0x12dc <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1242:	80 91 e8 00 	lds	r24, 0x00E8
    1246:	87 7f       	andi	r24, 0xF7	; 247
    1248:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    124c:	04 c0       	rjmp	.+8      	; 0x1256 <CDC_Device_ProcessControlRequest+0xcc>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    124e:	8e b3       	in	r24, 0x1e	; 30
    1250:	88 23       	and	r24, r24
    1252:	09 f4       	brne	.+2      	; 0x1256 <CDC_Device_ProcessControlRequest+0xcc>
    1254:	43 c0       	rjmp	.+134    	; 0x12dc <CDC_Device_ProcessControlRequest+0x152>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1256:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    125a:	82 ff       	sbrs	r24, 2
    125c:	f8 cf       	rjmp	.-16     	; 0x124e <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    125e:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
    1262:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
    1266:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
    126a:	80 91 f1 00 	lds	r24, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    126e:	3c 8b       	std	Y+20, r19	; 0x14
    1270:	2d 8b       	std	Y+21, r18	; 0x15
    1272:	9e 8b       	std	Y+22, r25	; 0x16
    1274:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1276:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    127a:	88 8f       	std	Y+24, r24	; 0x18
    127c:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1280:	89 8f       	std	Y+25, r24	; 0x19
    1282:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1286:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1288:	80 91 e8 00 	lds	r24, 0x00E8
    128c:	8b 77       	andi	r24, 0x7B	; 123
    128e:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1292:	86 dc       	rcall	.-1780   	; 0xba0 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1294:	ce 01       	movw	r24, r28
    1296:	b3 d9       	rcall	.-3226   	; 0x5fe <EVENT_CDC_Device_LineEncodingChanged>
    1298:	21 c0       	rjmp	.+66     	; 0x12dc <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    129a:	80 91 9a 02 	lds	r24, 0x029A
    129e:	81 32       	cpi	r24, 0x21	; 33
    12a0:	e9 f4       	brne	.+58     	; 0x12dc <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12a2:	80 91 e8 00 	lds	r24, 0x00E8
    12a6:	87 7f       	andi	r24, 0xF7	; 247
    12a8:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    12ac:	79 dc       	rcall	.-1806   	; 0xba0 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    12ae:	80 91 9c 02 	lds	r24, 0x029C
    12b2:	90 91 9d 02 	lds	r25, 0x029D
    12b6:	99 8b       	std	Y+17, r25	; 0x11
    12b8:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    12ba:	ce 01       	movw	r24, r28
    12bc:	d4 d0       	rcall	.+424    	; 0x1466 <CDC_Device_Event_Stub>
    12be:	0e c0       	rjmp	.+28     	; 0x12dc <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12c0:	80 91 9a 02 	lds	r24, 0x029A
    12c4:	81 32       	cpi	r24, 0x21	; 33
    12c6:	51 f4       	brne	.+20     	; 0x12dc <CDC_Device_ProcessControlRequest+0x152>
    12c8:	80 91 e8 00 	lds	r24, 0x00E8
    12cc:	87 7f       	andi	r24, 0xF7	; 247
    12ce:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    12d2:	66 dc       	rcall	.-1844   	; 0xba0 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    12d4:	ce 01       	movw	r24, r28
    12d6:	60 91 9c 02 	lds	r22, 0x029C
    12da:	c5 d0       	rcall	.+394    	; 0x1466 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	08 95       	ret

000012e2 <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    12e8:	40 96       	adiw	r24, 0x10	; 16
    12ea:	fc 01       	movw	r30, r24
    12ec:	8b e0       	ldi	r24, 0x0B	; 11
    12ee:	df 01       	movw	r26, r30
    12f0:	1d 92       	st	X+, r1
    12f2:	8a 95       	dec	r24
    12f4:	e9 f7       	brne	.-6      	; 0x12f0 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    12f6:	82 e0       	ldi	r24, 0x02	; 2
    12f8:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    12fa:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    12fc:	83 e0       	ldi	r24, 0x03	; 3
    12fe:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    1300:	ce 01       	movw	r24, r28
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	61 e0       	ldi	r22, 0x01	; 1
    1306:	08 dc       	rcall	.-2032   	; 0xb18 <Endpoint_ConfigureEndpointTable>
    1308:	88 23       	and	r24, r24
    130a:	59 f0       	breq	.+22     	; 0x1322 <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    130c:	ce 01       	movw	r24, r28
    130e:	06 96       	adiw	r24, 0x06	; 6
    1310:	61 e0       	ldi	r22, 0x01	; 1
    1312:	02 dc       	rcall	.-2044   	; 0xb18 <Endpoint_ConfigureEndpointTable>
    1314:	88 23       	and	r24, r24
    1316:	29 f0       	breq	.+10     	; 0x1322 <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    1318:	ce 01       	movw	r24, r28
    131a:	0b 96       	adiw	r24, 0x0b	; 11
    131c:	61 e0       	ldi	r22, 0x01	; 1
    131e:	fc db       	rcall	.-2056   	; 0xb18 <Endpoint_ConfigureEndpointTable>
    1320:	01 c0       	rjmp	.+2      	; 0x1324 <CDC_Device_ConfigureEndpoints+0x42>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
    1322:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
    1324:	df 91       	pop	r29
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	0f 92       	push	r0
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1336:	8e b3       	in	r24, 0x1e	; 30
    1338:	84 30       	cpi	r24, 0x04	; 4
    133a:	f9 f4       	brne	.+62     	; 0x137a <CDC_Device_SendByte+0x50>
    133c:	24 89       	ldd	r18, Z+20	; 0x14
    133e:	35 89       	ldd	r19, Z+21	; 0x15
    1340:	46 89       	ldd	r20, Z+22	; 0x16
    1342:	57 89       	ldd	r21, Z+23	; 0x17
    1344:	21 15       	cp	r18, r1
    1346:	31 05       	cpc	r19, r1
    1348:	41 05       	cpc	r20, r1
    134a:	51 05       	cpc	r21, r1
    134c:	b1 f0       	breq	.+44     	; 0x137a <CDC_Device_SendByte+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    134e:	81 81       	ldd	r24, Z+1	; 0x01
    1350:	8f 70       	andi	r24, 0x0F	; 15
    1352:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1356:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    135a:	85 fd       	sbrc	r24, 5
    135c:	0a c0       	rjmp	.+20     	; 0x1372 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    135e:	80 91 e8 00 	lds	r24, 0x00E8
    1362:	8e 77       	andi	r24, 0x7E	; 126
    1364:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1368:	69 83       	std	Y+1, r22	; 0x01
    136a:	39 dc       	rcall	.-1934   	; 0xbde <Endpoint_WaitUntilReady>
    136c:	69 81       	ldd	r22, Y+1	; 0x01
    136e:	88 23       	and	r24, r24
    1370:	29 f4       	brne	.+10     	; 0x137c <CDC_Device_SendByte+0x52>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1372:	60 93 f1 00 	sts	0x00F1, r22
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	01 c0       	rjmp	.+2      	; 0x137c <CDC_Device_SendByte+0x52>

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    137a:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    137c:	0f 90       	pop	r0
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1384:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1386:	8e b3       	in	r24, 0x1e	; 30
    1388:	84 30       	cpi	r24, 0x04	; 4
    138a:	19 f5       	brne	.+70     	; 0x13d2 <CDC_Device_Flush+0x4e>
    138c:	24 89       	ldd	r18, Z+20	; 0x14
    138e:	35 89       	ldd	r19, Z+21	; 0x15
    1390:	46 89       	ldd	r20, Z+22	; 0x16
    1392:	57 89       	ldd	r21, Z+23	; 0x17
    1394:	21 15       	cp	r18, r1
    1396:	31 05       	cpc	r19, r1
    1398:	41 05       	cpc	r20, r1
    139a:	51 05       	cpc	r21, r1
    139c:	d1 f0       	breq	.+52     	; 0x13d2 <CDC_Device_Flush+0x4e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    139e:	81 81       	ldd	r24, Z+1	; 0x01
    13a0:	8f 70       	andi	r24, 0x0F	; 15
    13a2:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    13a6:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    13aa:	88 23       	and	r24, r24
    13ac:	a1 f0       	breq	.+40     	; 0x13d6 <CDC_Device_Flush+0x52>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13ae:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13b2:	80 91 e8 00 	lds	r24, 0x00E8
    13b6:	8e 77       	andi	r24, 0x7E	; 126
    13b8:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    13bc:	95 fd       	sbrc	r25, 5
    13be:	0d c0       	rjmp	.+26     	; 0x13da <CDC_Device_Flush+0x56>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    13c0:	0e dc       	rcall	.-2020   	; 0xbde <Endpoint_WaitUntilReady>
    13c2:	88 23       	and	r24, r24
    13c4:	59 f4       	brne	.+22     	; 0x13dc <CDC_Device_Flush+0x58>
    13c6:	90 91 e8 00 	lds	r25, 0x00E8
    13ca:	9e 77       	andi	r25, 0x7E	; 126
    13cc:	90 93 e8 00 	sts	0x00E8, r25
    13d0:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    13d2:	82 e0       	ldi	r24, 0x02	; 2
    13d4:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    13da:	80 e0       	ldi	r24, 0x00	; 0
}
    13dc:	08 95       	ret

000013de <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    13de:	2e b3       	in	r18, 0x1e	; 30
    13e0:	24 30       	cpi	r18, 0x04	; 4
    13e2:	99 f4       	brne	.+38     	; 0x140a <CDC_Device_USBTask+0x2c>
    13e4:	fc 01       	movw	r30, r24
    13e6:	24 89       	ldd	r18, Z+20	; 0x14
    13e8:	35 89       	ldd	r19, Z+21	; 0x15
    13ea:	46 89       	ldd	r20, Z+22	; 0x16
    13ec:	57 89       	ldd	r21, Z+23	; 0x17
    13ee:	21 15       	cp	r18, r1
    13f0:	31 05       	cpc	r19, r1
    13f2:	41 05       	cpc	r20, r1
    13f4:	51 05       	cpc	r21, r1
    13f6:	49 f0       	breq	.+18     	; 0x140a <CDC_Device_USBTask+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13f8:	21 81       	ldd	r18, Z+1	; 0x01
    13fa:	2f 70       	andi	r18, 0x0F	; 15
    13fc:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1400:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    1404:	20 ff       	sbrs	r18, 0
    1406:	01 c0       	rjmp	.+2      	; 0x140a <CDC_Device_USBTask+0x2c>
	  CDC_Device_Flush(CDCInterfaceInfo);
    1408:	bd cf       	rjmp	.-134    	; 0x1384 <CDC_Device_Flush>
    140a:	08 95       	ret

0000140c <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    140c:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    140e:	8e b3       	in	r24, 0x1e	; 30
    1410:	84 30       	cpi	r24, 0x04	; 4
    1412:	29 f5       	brne	.+74     	; 0x145e <CDC_Device_ReceiveByte+0x52>
    1414:	24 89       	ldd	r18, Z+20	; 0x14
    1416:	35 89       	ldd	r19, Z+21	; 0x15
    1418:	46 89       	ldd	r20, Z+22	; 0x16
    141a:	57 89       	ldd	r21, Z+23	; 0x17
    141c:	21 15       	cp	r18, r1
    141e:	31 05       	cpc	r19, r1
    1420:	41 05       	cpc	r20, r1
    1422:	51 05       	cpc	r21, r1
    1424:	e1 f0       	breq	.+56     	; 0x145e <CDC_Device_ReceiveByte+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1426:	86 81       	ldd	r24, Z+6	; 0x06
    1428:	8f 70       	andi	r24, 0x0F	; 15
    142a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    142e:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1432:	82 ff       	sbrs	r24, 2
    1434:	14 c0       	rjmp	.+40     	; 0x145e <CDC_Device_ReceiveByte+0x52>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1436:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    143a:	88 23       	and	r24, r24
    143c:	21 f0       	breq	.+8      	; 0x1446 <CDC_Device_ReceiveByte+0x3a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    143e:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	02 c0       	rjmp	.+4      	; 0x144a <CDC_Device_ReceiveByte+0x3e>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1446:	2f ef       	ldi	r18, 0xFF	; 255
    1448:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    144a:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    144e:	88 23       	and	r24, r24
    1450:	41 f4       	brne	.+16     	; 0x1462 <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1452:	80 91 e8 00 	lds	r24, 0x00E8
    1456:	8b 77       	andi	r24, 0x7B	; 123
    1458:	80 93 e8 00 	sts	0x00E8, r24
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <CDC_Device_ReceiveByte+0x56>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    145e:	2f ef       	ldi	r18, 0xFF	; 255
    1460:	3f ef       	ldi	r19, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    1462:	c9 01       	movw	r24, r18
    1464:	08 95       	ret

00001466 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    1466:	08 95       	ret

00001468 <__subsf3>:
    1468:	50 58       	subi	r21, 0x80	; 128

0000146a <__addsf3>:
    146a:	bb 27       	eor	r27, r27
    146c:	aa 27       	eor	r26, r26
    146e:	0e d0       	rcall	.+28     	; 0x148c <__addsf3x>
    1470:	70 c1       	rjmp	.+736    	; 0x1752 <__fp_round>
    1472:	61 d1       	rcall	.+706    	; 0x1736 <__fp_pscA>
    1474:	30 f0       	brcs	.+12     	; 0x1482 <__addsf3+0x18>
    1476:	66 d1       	rcall	.+716    	; 0x1744 <__fp_pscB>
    1478:	20 f0       	brcs	.+8      	; 0x1482 <__addsf3+0x18>
    147a:	31 f4       	brne	.+12     	; 0x1488 <__addsf3+0x1e>
    147c:	9f 3f       	cpi	r25, 0xFF	; 255
    147e:	11 f4       	brne	.+4      	; 0x1484 <__addsf3+0x1a>
    1480:	1e f4       	brtc	.+6      	; 0x1488 <__addsf3+0x1e>
    1482:	56 c1       	rjmp	.+684    	; 0x1730 <__fp_nan>
    1484:	0e f4       	brtc	.+2      	; 0x1488 <__addsf3+0x1e>
    1486:	e0 95       	com	r30
    1488:	e7 fb       	bst	r30, 7
    148a:	4c c1       	rjmp	.+664    	; 0x1724 <__fp_inf>

0000148c <__addsf3x>:
    148c:	e9 2f       	mov	r30, r25
    148e:	72 d1       	rcall	.+740    	; 0x1774 <__fp_split3>
    1490:	80 f3       	brcs	.-32     	; 0x1472 <__addsf3+0x8>
    1492:	ba 17       	cp	r27, r26
    1494:	62 07       	cpc	r22, r18
    1496:	73 07       	cpc	r23, r19
    1498:	84 07       	cpc	r24, r20
    149a:	95 07       	cpc	r25, r21
    149c:	18 f0       	brcs	.+6      	; 0x14a4 <__addsf3x+0x18>
    149e:	71 f4       	brne	.+28     	; 0x14bc <__addsf3x+0x30>
    14a0:	9e f5       	brtc	.+102    	; 0x1508 <__addsf3x+0x7c>
    14a2:	8a c1       	rjmp	.+788    	; 0x17b8 <__fp_zero>
    14a4:	0e f4       	brtc	.+2      	; 0x14a8 <__addsf3x+0x1c>
    14a6:	e0 95       	com	r30
    14a8:	0b 2e       	mov	r0, r27
    14aa:	ba 2f       	mov	r27, r26
    14ac:	a0 2d       	mov	r26, r0
    14ae:	0b 01       	movw	r0, r22
    14b0:	b9 01       	movw	r22, r18
    14b2:	90 01       	movw	r18, r0
    14b4:	0c 01       	movw	r0, r24
    14b6:	ca 01       	movw	r24, r20
    14b8:	a0 01       	movw	r20, r0
    14ba:	11 24       	eor	r1, r1
    14bc:	ff 27       	eor	r31, r31
    14be:	59 1b       	sub	r21, r25
    14c0:	99 f0       	breq	.+38     	; 0x14e8 <__addsf3x+0x5c>
    14c2:	59 3f       	cpi	r21, 0xF9	; 249
    14c4:	50 f4       	brcc	.+20     	; 0x14da <__addsf3x+0x4e>
    14c6:	50 3e       	cpi	r21, 0xE0	; 224
    14c8:	68 f1       	brcs	.+90     	; 0x1524 <__addsf3x+0x98>
    14ca:	1a 16       	cp	r1, r26
    14cc:	f0 40       	sbci	r31, 0x00	; 0
    14ce:	a2 2f       	mov	r26, r18
    14d0:	23 2f       	mov	r18, r19
    14d2:	34 2f       	mov	r19, r20
    14d4:	44 27       	eor	r20, r20
    14d6:	58 5f       	subi	r21, 0xF8	; 248
    14d8:	f3 cf       	rjmp	.-26     	; 0x14c0 <__addsf3x+0x34>
    14da:	46 95       	lsr	r20
    14dc:	37 95       	ror	r19
    14de:	27 95       	ror	r18
    14e0:	a7 95       	ror	r26
    14e2:	f0 40       	sbci	r31, 0x00	; 0
    14e4:	53 95       	inc	r21
    14e6:	c9 f7       	brne	.-14     	; 0x14da <__addsf3x+0x4e>
    14e8:	7e f4       	brtc	.+30     	; 0x1508 <__addsf3x+0x7c>
    14ea:	1f 16       	cp	r1, r31
    14ec:	ba 0b       	sbc	r27, r26
    14ee:	62 0b       	sbc	r22, r18
    14f0:	73 0b       	sbc	r23, r19
    14f2:	84 0b       	sbc	r24, r20
    14f4:	ba f0       	brmi	.+46     	; 0x1524 <__addsf3x+0x98>
    14f6:	91 50       	subi	r25, 0x01	; 1
    14f8:	a1 f0       	breq	.+40     	; 0x1522 <__addsf3x+0x96>
    14fa:	ff 0f       	add	r31, r31
    14fc:	bb 1f       	adc	r27, r27
    14fe:	66 1f       	adc	r22, r22
    1500:	77 1f       	adc	r23, r23
    1502:	88 1f       	adc	r24, r24
    1504:	c2 f7       	brpl	.-16     	; 0x14f6 <__addsf3x+0x6a>
    1506:	0e c0       	rjmp	.+28     	; 0x1524 <__addsf3x+0x98>
    1508:	ba 0f       	add	r27, r26
    150a:	62 1f       	adc	r22, r18
    150c:	73 1f       	adc	r23, r19
    150e:	84 1f       	adc	r24, r20
    1510:	48 f4       	brcc	.+18     	; 0x1524 <__addsf3x+0x98>
    1512:	87 95       	ror	r24
    1514:	77 95       	ror	r23
    1516:	67 95       	ror	r22
    1518:	b7 95       	ror	r27
    151a:	f7 95       	ror	r31
    151c:	9e 3f       	cpi	r25, 0xFE	; 254
    151e:	08 f0       	brcs	.+2      	; 0x1522 <__addsf3x+0x96>
    1520:	b3 cf       	rjmp	.-154    	; 0x1488 <__addsf3+0x1e>
    1522:	93 95       	inc	r25
    1524:	88 0f       	add	r24, r24
    1526:	08 f0       	brcs	.+2      	; 0x152a <__addsf3x+0x9e>
    1528:	99 27       	eor	r25, r25
    152a:	ee 0f       	add	r30, r30
    152c:	97 95       	ror	r25
    152e:	87 95       	ror	r24
    1530:	08 95       	ret

00001532 <__cmpsf2>:
    1532:	d4 d0       	rcall	.+424    	; 0x16dc <__fp_cmp>
    1534:	08 f4       	brcc	.+2      	; 0x1538 <__cmpsf2+0x6>
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	08 95       	ret

0000153a <__divsf3>:
    153a:	0c d0       	rcall	.+24     	; 0x1554 <__divsf3x>
    153c:	0a c1       	rjmp	.+532    	; 0x1752 <__fp_round>
    153e:	02 d1       	rcall	.+516    	; 0x1744 <__fp_pscB>
    1540:	40 f0       	brcs	.+16     	; 0x1552 <__divsf3+0x18>
    1542:	f9 d0       	rcall	.+498    	; 0x1736 <__fp_pscA>
    1544:	30 f0       	brcs	.+12     	; 0x1552 <__divsf3+0x18>
    1546:	21 f4       	brne	.+8      	; 0x1550 <__divsf3+0x16>
    1548:	5f 3f       	cpi	r21, 0xFF	; 255
    154a:	19 f0       	breq	.+6      	; 0x1552 <__divsf3+0x18>
    154c:	eb c0       	rjmp	.+470    	; 0x1724 <__fp_inf>
    154e:	51 11       	cpse	r21, r1
    1550:	34 c1       	rjmp	.+616    	; 0x17ba <__fp_szero>
    1552:	ee c0       	rjmp	.+476    	; 0x1730 <__fp_nan>

00001554 <__divsf3x>:
    1554:	0f d1       	rcall	.+542    	; 0x1774 <__fp_split3>
    1556:	98 f3       	brcs	.-26     	; 0x153e <__divsf3+0x4>

00001558 <__divsf3_pse>:
    1558:	99 23       	and	r25, r25
    155a:	c9 f3       	breq	.-14     	; 0x154e <__divsf3+0x14>
    155c:	55 23       	and	r21, r21
    155e:	b1 f3       	breq	.-20     	; 0x154c <__divsf3+0x12>
    1560:	95 1b       	sub	r25, r21
    1562:	55 0b       	sbc	r21, r21
    1564:	bb 27       	eor	r27, r27
    1566:	aa 27       	eor	r26, r26
    1568:	62 17       	cp	r22, r18
    156a:	73 07       	cpc	r23, r19
    156c:	84 07       	cpc	r24, r20
    156e:	38 f0       	brcs	.+14     	; 0x157e <__divsf3_pse+0x26>
    1570:	9f 5f       	subi	r25, 0xFF	; 255
    1572:	5f 4f       	sbci	r21, 0xFF	; 255
    1574:	22 0f       	add	r18, r18
    1576:	33 1f       	adc	r19, r19
    1578:	44 1f       	adc	r20, r20
    157a:	aa 1f       	adc	r26, r26
    157c:	a9 f3       	breq	.-22     	; 0x1568 <__divsf3_pse+0x10>
    157e:	33 d0       	rcall	.+102    	; 0x15e6 <__divsf3_pse+0x8e>
    1580:	0e 2e       	mov	r0, r30
    1582:	3a f0       	brmi	.+14     	; 0x1592 <__divsf3_pse+0x3a>
    1584:	e0 e8       	ldi	r30, 0x80	; 128
    1586:	30 d0       	rcall	.+96     	; 0x15e8 <__divsf3_pse+0x90>
    1588:	91 50       	subi	r25, 0x01	; 1
    158a:	50 40       	sbci	r21, 0x00	; 0
    158c:	e6 95       	lsr	r30
    158e:	00 1c       	adc	r0, r0
    1590:	ca f7       	brpl	.-14     	; 0x1584 <__divsf3_pse+0x2c>
    1592:	29 d0       	rcall	.+82     	; 0x15e6 <__divsf3_pse+0x8e>
    1594:	fe 2f       	mov	r31, r30
    1596:	27 d0       	rcall	.+78     	; 0x15e6 <__divsf3_pse+0x8e>
    1598:	66 0f       	add	r22, r22
    159a:	77 1f       	adc	r23, r23
    159c:	88 1f       	adc	r24, r24
    159e:	bb 1f       	adc	r27, r27
    15a0:	26 17       	cp	r18, r22
    15a2:	37 07       	cpc	r19, r23
    15a4:	48 07       	cpc	r20, r24
    15a6:	ab 07       	cpc	r26, r27
    15a8:	b0 e8       	ldi	r27, 0x80	; 128
    15aa:	09 f0       	breq	.+2      	; 0x15ae <__divsf3_pse+0x56>
    15ac:	bb 0b       	sbc	r27, r27
    15ae:	80 2d       	mov	r24, r0
    15b0:	bf 01       	movw	r22, r30
    15b2:	ff 27       	eor	r31, r31
    15b4:	93 58       	subi	r25, 0x83	; 131
    15b6:	5f 4f       	sbci	r21, 0xFF	; 255
    15b8:	2a f0       	brmi	.+10     	; 0x15c4 <__divsf3_pse+0x6c>
    15ba:	9e 3f       	cpi	r25, 0xFE	; 254
    15bc:	51 05       	cpc	r21, r1
    15be:	68 f0       	brcs	.+26     	; 0x15da <__divsf3_pse+0x82>
    15c0:	b1 c0       	rjmp	.+354    	; 0x1724 <__fp_inf>
    15c2:	fb c0       	rjmp	.+502    	; 0x17ba <__fp_szero>
    15c4:	5f 3f       	cpi	r21, 0xFF	; 255
    15c6:	ec f3       	brlt	.-6      	; 0x15c2 <__divsf3_pse+0x6a>
    15c8:	98 3e       	cpi	r25, 0xE8	; 232
    15ca:	dc f3       	brlt	.-10     	; 0x15c2 <__divsf3_pse+0x6a>
    15cc:	86 95       	lsr	r24
    15ce:	77 95       	ror	r23
    15d0:	67 95       	ror	r22
    15d2:	b7 95       	ror	r27
    15d4:	f7 95       	ror	r31
    15d6:	9f 5f       	subi	r25, 0xFF	; 255
    15d8:	c9 f7       	brne	.-14     	; 0x15cc <__divsf3_pse+0x74>
    15da:	88 0f       	add	r24, r24
    15dc:	91 1d       	adc	r25, r1
    15de:	96 95       	lsr	r25
    15e0:	87 95       	ror	r24
    15e2:	97 f9       	bld	r25, 7
    15e4:	08 95       	ret
    15e6:	e1 e0       	ldi	r30, 0x01	; 1
    15e8:	66 0f       	add	r22, r22
    15ea:	77 1f       	adc	r23, r23
    15ec:	88 1f       	adc	r24, r24
    15ee:	bb 1f       	adc	r27, r27
    15f0:	62 17       	cp	r22, r18
    15f2:	73 07       	cpc	r23, r19
    15f4:	84 07       	cpc	r24, r20
    15f6:	ba 07       	cpc	r27, r26
    15f8:	20 f0       	brcs	.+8      	; 0x1602 <__divsf3_pse+0xaa>
    15fa:	62 1b       	sub	r22, r18
    15fc:	73 0b       	sbc	r23, r19
    15fe:	84 0b       	sbc	r24, r20
    1600:	ba 0b       	sbc	r27, r26
    1602:	ee 1f       	adc	r30, r30
    1604:	88 f7       	brcc	.-30     	; 0x15e8 <__divsf3_pse+0x90>
    1606:	e0 95       	com	r30
    1608:	08 95       	ret

0000160a <__fixunssfsi>:
    160a:	bc d0       	rcall	.+376    	; 0x1784 <__fp_splitA>
    160c:	88 f0       	brcs	.+34     	; 0x1630 <__fixunssfsi+0x26>
    160e:	9f 57       	subi	r25, 0x7F	; 127
    1610:	90 f0       	brcs	.+36     	; 0x1636 <__fixunssfsi+0x2c>
    1612:	b9 2f       	mov	r27, r25
    1614:	99 27       	eor	r25, r25
    1616:	b7 51       	subi	r27, 0x17	; 23
    1618:	a0 f0       	brcs	.+40     	; 0x1642 <__fixunssfsi+0x38>
    161a:	d1 f0       	breq	.+52     	; 0x1650 <__fixunssfsi+0x46>
    161c:	66 0f       	add	r22, r22
    161e:	77 1f       	adc	r23, r23
    1620:	88 1f       	adc	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	1a f0       	brmi	.+6      	; 0x162c <__fixunssfsi+0x22>
    1626:	ba 95       	dec	r27
    1628:	c9 f7       	brne	.-14     	; 0x161c <__fixunssfsi+0x12>
    162a:	12 c0       	rjmp	.+36     	; 0x1650 <__fixunssfsi+0x46>
    162c:	b1 30       	cpi	r27, 0x01	; 1
    162e:	81 f0       	breq	.+32     	; 0x1650 <__fixunssfsi+0x46>
    1630:	c3 d0       	rcall	.+390    	; 0x17b8 <__fp_zero>
    1632:	b1 e0       	ldi	r27, 0x01	; 1
    1634:	08 95       	ret
    1636:	c0 c0       	rjmp	.+384    	; 0x17b8 <__fp_zero>
    1638:	67 2f       	mov	r22, r23
    163a:	78 2f       	mov	r23, r24
    163c:	88 27       	eor	r24, r24
    163e:	b8 5f       	subi	r27, 0xF8	; 248
    1640:	39 f0       	breq	.+14     	; 0x1650 <__fixunssfsi+0x46>
    1642:	b9 3f       	cpi	r27, 0xF9	; 249
    1644:	cc f3       	brlt	.-14     	; 0x1638 <__fixunssfsi+0x2e>
    1646:	86 95       	lsr	r24
    1648:	77 95       	ror	r23
    164a:	67 95       	ror	r22
    164c:	b3 95       	inc	r27
    164e:	d9 f7       	brne	.-10     	; 0x1646 <__fixunssfsi+0x3c>
    1650:	3e f4       	brtc	.+14     	; 0x1660 <__fixunssfsi+0x56>
    1652:	90 95       	com	r25
    1654:	80 95       	com	r24
    1656:	70 95       	com	r23
    1658:	61 95       	neg	r22
    165a:	7f 4f       	sbci	r23, 0xFF	; 255
    165c:	8f 4f       	sbci	r24, 0xFF	; 255
    165e:	9f 4f       	sbci	r25, 0xFF	; 255
    1660:	08 95       	ret

00001662 <__floatunsisf>:
    1662:	e8 94       	clt
    1664:	09 c0       	rjmp	.+18     	; 0x1678 <__floatsisf+0x12>

00001666 <__floatsisf>:
    1666:	97 fb       	bst	r25, 7
    1668:	3e f4       	brtc	.+14     	; 0x1678 <__floatsisf+0x12>
    166a:	90 95       	com	r25
    166c:	80 95       	com	r24
    166e:	70 95       	com	r23
    1670:	61 95       	neg	r22
    1672:	7f 4f       	sbci	r23, 0xFF	; 255
    1674:	8f 4f       	sbci	r24, 0xFF	; 255
    1676:	9f 4f       	sbci	r25, 0xFF	; 255
    1678:	99 23       	and	r25, r25
    167a:	a9 f0       	breq	.+42     	; 0x16a6 <__floatsisf+0x40>
    167c:	f9 2f       	mov	r31, r25
    167e:	96 e9       	ldi	r25, 0x96	; 150
    1680:	bb 27       	eor	r27, r27
    1682:	93 95       	inc	r25
    1684:	f6 95       	lsr	r31
    1686:	87 95       	ror	r24
    1688:	77 95       	ror	r23
    168a:	67 95       	ror	r22
    168c:	b7 95       	ror	r27
    168e:	f1 11       	cpse	r31, r1
    1690:	f8 cf       	rjmp	.-16     	; 0x1682 <__floatsisf+0x1c>
    1692:	fa f4       	brpl	.+62     	; 0x16d2 <__floatsisf+0x6c>
    1694:	bb 0f       	add	r27, r27
    1696:	11 f4       	brne	.+4      	; 0x169c <__floatsisf+0x36>
    1698:	60 ff       	sbrs	r22, 0
    169a:	1b c0       	rjmp	.+54     	; 0x16d2 <__floatsisf+0x6c>
    169c:	6f 5f       	subi	r22, 0xFF	; 255
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	8f 4f       	sbci	r24, 0xFF	; 255
    16a2:	9f 4f       	sbci	r25, 0xFF	; 255
    16a4:	16 c0       	rjmp	.+44     	; 0x16d2 <__floatsisf+0x6c>
    16a6:	88 23       	and	r24, r24
    16a8:	11 f0       	breq	.+4      	; 0x16ae <__floatsisf+0x48>
    16aa:	96 e9       	ldi	r25, 0x96	; 150
    16ac:	11 c0       	rjmp	.+34     	; 0x16d0 <__floatsisf+0x6a>
    16ae:	77 23       	and	r23, r23
    16b0:	21 f0       	breq	.+8      	; 0x16ba <__floatsisf+0x54>
    16b2:	9e e8       	ldi	r25, 0x8E	; 142
    16b4:	87 2f       	mov	r24, r23
    16b6:	76 2f       	mov	r23, r22
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <__floatsisf+0x5e>
    16ba:	66 23       	and	r22, r22
    16bc:	71 f0       	breq	.+28     	; 0x16da <__floatsisf+0x74>
    16be:	96 e8       	ldi	r25, 0x86	; 134
    16c0:	86 2f       	mov	r24, r22
    16c2:	70 e0       	ldi	r23, 0x00	; 0
    16c4:	60 e0       	ldi	r22, 0x00	; 0
    16c6:	2a f0       	brmi	.+10     	; 0x16d2 <__floatsisf+0x6c>
    16c8:	9a 95       	dec	r25
    16ca:	66 0f       	add	r22, r22
    16cc:	77 1f       	adc	r23, r23
    16ce:	88 1f       	adc	r24, r24
    16d0:	da f7       	brpl	.-10     	; 0x16c8 <__floatsisf+0x62>
    16d2:	88 0f       	add	r24, r24
    16d4:	96 95       	lsr	r25
    16d6:	87 95       	ror	r24
    16d8:	97 f9       	bld	r25, 7
    16da:	08 95       	ret

000016dc <__fp_cmp>:
    16dc:	99 0f       	add	r25, r25
    16de:	00 08       	sbc	r0, r0
    16e0:	55 0f       	add	r21, r21
    16e2:	aa 0b       	sbc	r26, r26
    16e4:	e0 e8       	ldi	r30, 0x80	; 128
    16e6:	fe ef       	ldi	r31, 0xFE	; 254
    16e8:	16 16       	cp	r1, r22
    16ea:	17 06       	cpc	r1, r23
    16ec:	e8 07       	cpc	r30, r24
    16ee:	f9 07       	cpc	r31, r25
    16f0:	c0 f0       	brcs	.+48     	; 0x1722 <__fp_cmp+0x46>
    16f2:	12 16       	cp	r1, r18
    16f4:	13 06       	cpc	r1, r19
    16f6:	e4 07       	cpc	r30, r20
    16f8:	f5 07       	cpc	r31, r21
    16fa:	98 f0       	brcs	.+38     	; 0x1722 <__fp_cmp+0x46>
    16fc:	62 1b       	sub	r22, r18
    16fe:	73 0b       	sbc	r23, r19
    1700:	84 0b       	sbc	r24, r20
    1702:	95 0b       	sbc	r25, r21
    1704:	39 f4       	brne	.+14     	; 0x1714 <__fp_cmp+0x38>
    1706:	0a 26       	eor	r0, r26
    1708:	61 f0       	breq	.+24     	; 0x1722 <__fp_cmp+0x46>
    170a:	23 2b       	or	r18, r19
    170c:	24 2b       	or	r18, r20
    170e:	25 2b       	or	r18, r21
    1710:	21 f4       	brne	.+8      	; 0x171a <__fp_cmp+0x3e>
    1712:	08 95       	ret
    1714:	0a 26       	eor	r0, r26
    1716:	09 f4       	brne	.+2      	; 0x171a <__fp_cmp+0x3e>
    1718:	a1 40       	sbci	r26, 0x01	; 1
    171a:	a6 95       	lsr	r26
    171c:	8f ef       	ldi	r24, 0xFF	; 255
    171e:	81 1d       	adc	r24, r1
    1720:	81 1d       	adc	r24, r1
    1722:	08 95       	ret

00001724 <__fp_inf>:
    1724:	97 f9       	bld	r25, 7
    1726:	9f 67       	ori	r25, 0x7F	; 127
    1728:	80 e8       	ldi	r24, 0x80	; 128
    172a:	70 e0       	ldi	r23, 0x00	; 0
    172c:	60 e0       	ldi	r22, 0x00	; 0
    172e:	08 95       	ret

00001730 <__fp_nan>:
    1730:	9f ef       	ldi	r25, 0xFF	; 255
    1732:	80 ec       	ldi	r24, 0xC0	; 192
    1734:	08 95       	ret

00001736 <__fp_pscA>:
    1736:	00 24       	eor	r0, r0
    1738:	0a 94       	dec	r0
    173a:	16 16       	cp	r1, r22
    173c:	17 06       	cpc	r1, r23
    173e:	18 06       	cpc	r1, r24
    1740:	09 06       	cpc	r0, r25
    1742:	08 95       	ret

00001744 <__fp_pscB>:
    1744:	00 24       	eor	r0, r0
    1746:	0a 94       	dec	r0
    1748:	12 16       	cp	r1, r18
    174a:	13 06       	cpc	r1, r19
    174c:	14 06       	cpc	r1, r20
    174e:	05 06       	cpc	r0, r21
    1750:	08 95       	ret

00001752 <__fp_round>:
    1752:	09 2e       	mov	r0, r25
    1754:	03 94       	inc	r0
    1756:	00 0c       	add	r0, r0
    1758:	11 f4       	brne	.+4      	; 0x175e <__fp_round+0xc>
    175a:	88 23       	and	r24, r24
    175c:	52 f0       	brmi	.+20     	; 0x1772 <__fp_round+0x20>
    175e:	bb 0f       	add	r27, r27
    1760:	40 f4       	brcc	.+16     	; 0x1772 <__fp_round+0x20>
    1762:	bf 2b       	or	r27, r31
    1764:	11 f4       	brne	.+4      	; 0x176a <__fp_round+0x18>
    1766:	60 ff       	sbrs	r22, 0
    1768:	04 c0       	rjmp	.+8      	; 0x1772 <__fp_round+0x20>
    176a:	6f 5f       	subi	r22, 0xFF	; 255
    176c:	7f 4f       	sbci	r23, 0xFF	; 255
    176e:	8f 4f       	sbci	r24, 0xFF	; 255
    1770:	9f 4f       	sbci	r25, 0xFF	; 255
    1772:	08 95       	ret

00001774 <__fp_split3>:
    1774:	57 fd       	sbrc	r21, 7
    1776:	90 58       	subi	r25, 0x80	; 128
    1778:	44 0f       	add	r20, r20
    177a:	55 1f       	adc	r21, r21
    177c:	59 f0       	breq	.+22     	; 0x1794 <__fp_splitA+0x10>
    177e:	5f 3f       	cpi	r21, 0xFF	; 255
    1780:	71 f0       	breq	.+28     	; 0x179e <__fp_splitA+0x1a>
    1782:	47 95       	ror	r20

00001784 <__fp_splitA>:
    1784:	88 0f       	add	r24, r24
    1786:	97 fb       	bst	r25, 7
    1788:	99 1f       	adc	r25, r25
    178a:	61 f0       	breq	.+24     	; 0x17a4 <__fp_splitA+0x20>
    178c:	9f 3f       	cpi	r25, 0xFF	; 255
    178e:	79 f0       	breq	.+30     	; 0x17ae <__fp_splitA+0x2a>
    1790:	87 95       	ror	r24
    1792:	08 95       	ret
    1794:	12 16       	cp	r1, r18
    1796:	13 06       	cpc	r1, r19
    1798:	14 06       	cpc	r1, r20
    179a:	55 1f       	adc	r21, r21
    179c:	f2 cf       	rjmp	.-28     	; 0x1782 <__fp_split3+0xe>
    179e:	46 95       	lsr	r20
    17a0:	f1 df       	rcall	.-30     	; 0x1784 <__fp_splitA>
    17a2:	08 c0       	rjmp	.+16     	; 0x17b4 <__fp_splitA+0x30>
    17a4:	16 16       	cp	r1, r22
    17a6:	17 06       	cpc	r1, r23
    17a8:	18 06       	cpc	r1, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	f1 cf       	rjmp	.-30     	; 0x1790 <__fp_splitA+0xc>
    17ae:	86 95       	lsr	r24
    17b0:	71 05       	cpc	r23, r1
    17b2:	61 05       	cpc	r22, r1
    17b4:	08 94       	sec
    17b6:	08 95       	ret

000017b8 <__fp_zero>:
    17b8:	e8 94       	clt

000017ba <__fp_szero>:
    17ba:	bb 27       	eor	r27, r27
    17bc:	66 27       	eor	r22, r22
    17be:	77 27       	eor	r23, r23
    17c0:	cb 01       	movw	r24, r22
    17c2:	97 f9       	bld	r25, 7
    17c4:	08 95       	ret

000017c6 <__gesf2>:
    17c6:	8a df       	rcall	.-236    	; 0x16dc <__fp_cmp>
    17c8:	08 f4       	brcc	.+2      	; 0x17cc <__gesf2+0x6>
    17ca:	8f ef       	ldi	r24, 0xFF	; 255
    17cc:	08 95       	ret

000017ce <__udivmodsi4>:
    17ce:	a1 e2       	ldi	r26, 0x21	; 33
    17d0:	1a 2e       	mov	r1, r26
    17d2:	aa 1b       	sub	r26, r26
    17d4:	bb 1b       	sub	r27, r27
    17d6:	fd 01       	movw	r30, r26
    17d8:	0d c0       	rjmp	.+26     	; 0x17f4 <__udivmodsi4_ep>

000017da <__udivmodsi4_loop>:
    17da:	aa 1f       	adc	r26, r26
    17dc:	bb 1f       	adc	r27, r27
    17de:	ee 1f       	adc	r30, r30
    17e0:	ff 1f       	adc	r31, r31
    17e2:	a2 17       	cp	r26, r18
    17e4:	b3 07       	cpc	r27, r19
    17e6:	e4 07       	cpc	r30, r20
    17e8:	f5 07       	cpc	r31, r21
    17ea:	20 f0       	brcs	.+8      	; 0x17f4 <__udivmodsi4_ep>
    17ec:	a2 1b       	sub	r26, r18
    17ee:	b3 0b       	sbc	r27, r19
    17f0:	e4 0b       	sbc	r30, r20
    17f2:	f5 0b       	sbc	r31, r21

000017f4 <__udivmodsi4_ep>:
    17f4:	66 1f       	adc	r22, r22
    17f6:	77 1f       	adc	r23, r23
    17f8:	88 1f       	adc	r24, r24
    17fa:	99 1f       	adc	r25, r25
    17fc:	1a 94       	dec	r1
    17fe:	69 f7       	brne	.-38     	; 0x17da <__udivmodsi4_loop>
    1800:	60 95       	com	r22
    1802:	70 95       	com	r23
    1804:	80 95       	com	r24
    1806:	90 95       	com	r25
    1808:	9b 01       	movw	r18, r22
    180a:	ac 01       	movw	r20, r24
    180c:	bd 01       	movw	r22, r26
    180e:	cf 01       	movw	r24, r30
    1810:	08 95       	ret

00001812 <_exit>:
    1812:	f8 94       	cli

00001814 <__stop_program>:
    1814:	ff cf       	rjmp	.-2      	; 0x1814 <__stop_program>
