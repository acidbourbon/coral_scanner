
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00800100  00001858  000018ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001858  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000134  00800162  00800162  0000194e  2**0
                  ALLOC
  3 .stab         0000228c  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000044f  00000000  00000000  00003bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000538  00000000  00000000  0000402b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000e11  00000000  00000000  00004563  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008d6f  00000000  00000000  00005374  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000021a4  00000000  00000000  0000e0e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00007605  00000000  00000000  00010287  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000830  00000000  00000000  0001788c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003bf7  00000000  00000000  000180bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004645  00000000  00000000  0001bcb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00001111  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000790  00000000  00000000  00021409  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
       0:	9a c0       	rjmp	.+308    	; 0x136 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
       4:	b4 c0       	rjmp	.+360    	; 0x16e <__bad_interrupt>
       6:	00 00       	nop
       8:	b2 c0       	rjmp	.+356    	; 0x16e <__bad_interrupt>
       a:	00 00       	nop
       c:	b0 c0       	rjmp	.+352    	; 0x16e <__bad_interrupt>
       e:	00 00       	nop
      10:	ae c0       	rjmp	.+348    	; 0x16e <__bad_interrupt>
      12:	00 00       	nop
      14:	ac c0       	rjmp	.+344    	; 0x16e <__bad_interrupt>
      16:	00 00       	nop
      18:	aa c0       	rjmp	.+340    	; 0x16e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a8 c0       	rjmp	.+336    	; 0x16e <__bad_interrupt>
      1e:	00 00       	nop
      20:	a6 c0       	rjmp	.+332    	; 0x16e <__bad_interrupt>
      22:	00 00       	nop
      24:	a4 c0       	rjmp	.+328    	; 0x16e <__bad_interrupt>
      26:	00 00       	nop
      28:	a2 c0       	rjmp	.+324    	; 0x16e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	73 c6       	rjmp	.+3302   	; 0xd14 <__vector_11>
      2e:	00 00       	nop
      30:	15 c7       	rjmp	.+3626   	; 0xe5c <__vector_12>
      32:	00 00       	nop
      34:	9c c0       	rjmp	.+312    	; 0x16e <__bad_interrupt>
      36:	00 00       	nop
      38:	9a c0       	rjmp	.+308    	; 0x16e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	98 c0       	rjmp	.+304    	; 0x16e <__bad_interrupt>
      3e:	00 00       	nop
      40:	96 c0       	rjmp	.+300    	; 0x16e <__bad_interrupt>
      42:	00 00       	nop
      44:	94 c0       	rjmp	.+296    	; 0x16e <__bad_interrupt>
      46:	00 00       	nop
      48:	92 c0       	rjmp	.+292    	; 0x16e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	90 c0       	rjmp	.+288    	; 0x16e <__bad_interrupt>
      4e:	00 00       	nop
      50:	8e c0       	rjmp	.+284    	; 0x16e <__bad_interrupt>
      52:	00 00       	nop
      54:	d6 c0       	rjmp	.+428    	; 0x202 <__vector_21>
      56:	00 00       	nop
      58:	8a c0       	rjmp	.+276    	; 0x16e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	d8 c2       	rjmp	.+1456   	; 0x60e <__vector_23>
      5e:	00 00       	nop
      60:	86 c0       	rjmp	.+268    	; 0x16e <__bad_interrupt>
      62:	00 00       	nop
      64:	84 c0       	rjmp	.+264    	; 0x16e <__bad_interrupt>
      66:	00 00       	nop
      68:	82 c0       	rjmp	.+260    	; 0x16e <__bad_interrupt>
      6a:	00 00       	nop
      6c:	80 c0       	rjmp	.+256    	; 0x16e <__bad_interrupt>
      6e:	00 00       	nop
      70:	7e c0       	rjmp	.+252    	; 0x16e <__bad_interrupt>
      72:	00 00       	nop
      74:	7c c0       	rjmp	.+248    	; 0x16e <__bad_interrupt>
      76:	00 00       	nop
      78:	7a c0       	rjmp	.+244    	; 0x16e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	78 c0       	rjmp	.+240    	; 0x16e <__bad_interrupt>
      7e:	00 00       	nop
      80:	76 c0       	rjmp	.+236    	; 0x16e <__bad_interrupt>
      82:	00 00       	nop
      84:	74 c0       	rjmp	.+232    	; 0x16e <__bad_interrupt>
      86:	00 00       	nop
      88:	72 c0       	rjmp	.+228    	; 0x16e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	70 c0       	rjmp	.+224    	; 0x16e <__bad_interrupt>
      8e:	00 00       	nop
      90:	6e c0       	rjmp	.+220    	; 0x16e <__bad_interrupt>
      92:	00 00       	nop
      94:	6c c0       	rjmp	.+216    	; 0x16e <__bad_interrupt>
      96:	00 00       	nop

00000098 <DeviceDescriptor>:
      98:	12 01 10 01 02 00 00 08 eb 03 4b 20 01 00 01 02     ..........K ....
      a8:	dc 01                                               ..

000000aa <ConfigurationDescriptor>:
      aa:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      ba:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      ca:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      da:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000e8 <LanguageString>:
      e8:	04 03 09 04                                         ....

000000ec <ManufacturerString>:
      ec:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      fc:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000106 <ProductString>:
     106:	2e 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     ..L.U.F.A. .U.S.
     116:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
     126:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

00000136 <__ctors_end>:
     136:	11 24       	eor	r1, r1
     138:	1f be       	out	0x3f, r1	; 63
     13a:	cf ef       	ldi	r28, 0xFF	; 255
     13c:	d4 e0       	ldi	r29, 0x04	; 4
     13e:	de bf       	out	0x3e, r29	; 62
     140:	cd bf       	out	0x3d, r28	; 61

00000142 <__do_copy_data>:
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	a0 e0       	ldi	r26, 0x00	; 0
     146:	b1 e0       	ldi	r27, 0x01	; 1
     148:	e8 e5       	ldi	r30, 0x58	; 88
     14a:	f8 e1       	ldi	r31, 0x18	; 24
     14c:	02 c0       	rjmp	.+4      	; 0x152 <__do_copy_data+0x10>
     14e:	05 90       	lpm	r0, Z+
     150:	0d 92       	st	X+, r0
     152:	a2 36       	cpi	r26, 0x62	; 98
     154:	b1 07       	cpc	r27, r17
     156:	d9 f7       	brne	.-10     	; 0x14e <__do_copy_data+0xc>

00000158 <__do_clear_bss>:
     158:	12 e0       	ldi	r17, 0x02	; 2
     15a:	a2 e6       	ldi	r26, 0x62	; 98
     15c:	b1 e0       	ldi	r27, 0x01	; 1
     15e:	01 c0       	rjmp	.+2      	; 0x162 <.do_clear_bss_start>

00000160 <.do_clear_bss_loop>:
     160:	1d 92       	st	X+, r1

00000162 <.do_clear_bss_start>:
     162:	a6 39       	cpi	r26, 0x96	; 150
     164:	b1 07       	cpc	r27, r17
     166:	e1 f7       	brne	.-8      	; 0x160 <.do_clear_bss_loop>
     168:	5f d3       	rcall	.+1726   	; 0x828 <main>
     16a:	0c 94 2a 0c 	jmp	0x1854	; 0x1854 <_exit>

0000016e <__bad_interrupt>:
     16e:	48 cf       	rjmp	.-368    	; 0x0 <__vectors>

00000170 <RingBuffer_Insert>:
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     170:	fc 01       	movw	r30, r24

			*Buffer->In = Data;
     172:	a0 81       	ld	r26, Z
     174:	b1 81       	ldd	r27, Z+1	; 0x01
     176:	6c 93       	st	X, r22

			if (++Buffer->In == Buffer->End)
     178:	80 81       	ld	r24, Z
     17a:	91 81       	ldd	r25, Z+1	; 0x01
     17c:	01 96       	adiw	r24, 0x01	; 1
     17e:	91 83       	std	Z+1, r25	; 0x01
     180:	80 83       	st	Z, r24
     182:	26 81       	ldd	r18, Z+6	; 0x06
     184:	37 81       	ldd	r19, Z+7	; 0x07
     186:	82 17       	cp	r24, r18
     188:	93 07       	cpc	r25, r19
     18a:	21 f4       	brne	.+8      	; 0x194 <RingBuffer_Insert+0x24>
			  Buffer->In = Buffer->Start;
     18c:	84 81       	ldd	r24, Z+4	; 0x04
     18e:	95 81       	ldd	r25, Z+5	; 0x05
     190:	91 83       	std	Z+1, r25	; 0x01
     192:	80 83       	st	Z, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     194:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     196:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     198:	82 85       	ldd	r24, Z+10	; 0x0a
     19a:	93 85       	ldd	r25, Z+11	; 0x0b
     19c:	01 96       	adiw	r24, 0x01	; 1
     19e:	93 87       	std	Z+11, r25	; 0x0b
     1a0:	82 87       	std	Z+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1a2:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
     1a4:	08 95       	ret

000001a6 <RingBuffer_Remove>:
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1a6:	fc 01       	movw	r30, r24

			uint8_t Data = *Buffer->Out;
     1a8:	a2 81       	ldd	r26, Z+2	; 0x02
     1aa:	b3 81       	ldd	r27, Z+3	; 0x03
     1ac:	8d 91       	ld	r24, X+

			if (++Buffer->Out == Buffer->End)
     1ae:	b3 83       	std	Z+3, r27	; 0x03
     1b0:	a2 83       	std	Z+2, r26	; 0x02
     1b2:	26 81       	ldd	r18, Z+6	; 0x06
     1b4:	37 81       	ldd	r19, Z+7	; 0x07
     1b6:	a2 17       	cp	r26, r18
     1b8:	b3 07       	cpc	r27, r19
     1ba:	21 f4       	brne	.+8      	; 0x1c4 <RingBuffer_Remove+0x1e>
			  Buffer->Out = Buffer->Start;
     1bc:	24 81       	ldd	r18, Z+4	; 0x04
     1be:	35 81       	ldd	r19, Z+5	; 0x05
     1c0:	33 83       	std	Z+3, r19	; 0x03
     1c2:	22 83       	std	Z+2, r18	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1c4:	9f b7       	in	r25, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1c6:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     1c8:	22 85       	ldd	r18, Z+10	; 0x0a
     1ca:	33 85       	ldd	r19, Z+11	; 0x0b
     1cc:	21 50       	subi	r18, 0x01	; 1
     1ce:	30 40       	sbci	r19, 0x00	; 0
     1d0:	33 87       	std	Z+11, r19	; 0x0b
     1d2:	22 87       	std	Z+10, r18	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1d4:	9f bf       	out	0x3f, r25	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);

			return Data;
		}
     1d6:	08 95       	ret

000001d8 <RingBuffer_InitBuffer.clone.0>:
		                                         const uint16_t Size) ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer,
		                                         uint8_t* const DataPtr,
		                                         const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1d8:	fc 01       	movw	r30, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1da:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1dc:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     1de:	71 83       	std	Z+1, r23	; 0x01
     1e0:	60 83       	st	Z, r22
			Buffer->Out    = DataPtr;
     1e2:	73 83       	std	Z+3, r23	; 0x03
     1e4:	62 83       	std	Z+2, r22	; 0x02
			Buffer->Start  = &DataPtr[0];
     1e6:	75 83       	std	Z+5, r23	; 0x05
     1e8:	64 83       	std	Z+4, r22	; 0x04
			Buffer->End    = &DataPtr[Size];
     1ea:	60 58       	subi	r22, 0x80	; 128
     1ec:	7f 4f       	sbci	r23, 0xFF	; 255
     1ee:	77 83       	std	Z+7, r23	; 0x07
     1f0:	66 83       	std	Z+6, r22	; 0x06
			Buffer->Size   = Size;
     1f2:	80 e8       	ldi	r24, 0x80	; 128
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	91 87       	std	Z+9, r25	; 0x09
     1f8:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     1fa:	13 86       	std	Z+11, r1	; 0x0b
     1fc:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1fe:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
     200:	08 95       	ret

00000202 <__vector_21>:
u08 adb_werte[MAX_ADB];
u08 t0ovfcount;
volatile u08 adb_data_length;


ISR( TIMER0_OVF_vect) {
     202:	1f 92       	push	r1
     204:	0f 92       	push	r0
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	0f 92       	push	r0
     20a:	11 24       	eor	r1, r1
     20c:	8f 93       	push	r24
	t0ovfcount++;
     20e:	80 91 88 02 	lds	r24, 0x0288
     212:	8f 5f       	subi	r24, 0xFF	; 255
     214:	80 93 88 02 	sts	0x0288, r24
}
     218:	8f 91       	pop	r24
     21a:	0f 90       	pop	r0
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	0f 90       	pop	r0
     220:	1f 90       	pop	r1
     222:	18 95       	reti

00000224 <t0ext>:

uint16_t t0ext(void) {
	return (t0ovfcount * 256 + (u16) TCNT0); // return current counter value
     224:	86 b5       	in	r24, 0x26	; 38
     226:	30 91 88 02 	lds	r19, 0x0288
     22a:	20 e0       	ldi	r18, 0x00	; 0
     22c:	28 0f       	add	r18, r24
     22e:	31 1d       	adc	r19, r1
	// plus number of already passed counter cycles times 256
}
     230:	c9 01       	movw	r24, r18
     232:	08 95       	ret

00000234 <t0rst>:

void t0rst(void) {
	TCNT0 = 0; // set counter to zero
     234:	16 bc       	out	0x26, r1	; 38
	t0ovfcount = 0; // set overflow counter to zero
     236:	10 92 88 02 	sts	0x0288, r1

}
     23a:	08 95       	ret

0000023c <adb>:
// Befehl in adb_werte[0]. Empfangene bzw. zu sendende Daten in adb_werte[1 bis 8]




u08 adb(void) {
     23c:	df 92       	push	r13
     23e:	ef 92       	push	r14
     240:	ff 92       	push	r15
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
#define ADB_IMPULS_TLT TAKT/ADB_VORTEILER_B*250/1000000 // !!! 375 mach das mit anderem prescaler
//	#define ADB_IMPULS_TLT TAKT/ADB_VORTEILER_A*31/1000000 // modified
	//#define ADB_IMPULS_PAUSE TAKT/ADB_VORTEILER_B*200/1000000

	//Attention Signal
	TCCR0B = ADB_VORTEILER_A_BIT;
     24a:	83 e0       	ldi	r24, 0x03	; 3
     24c:	85 bd       	out	0x25, r24	; 37
	t0rst(); //  TCNT0 = 0; // Zähler auf null setzen
     24e:	f2 df       	rcall	.-28     	; 0x234 <t0rst>
	ADB_PDIR |= ADB_BIT; // Ausgang 0
     250:	50 9a       	sbi	0x0a, 0	; 10
	ADB_POUT &= ~ADB_BIT;
     252:	58 98       	cbi	0x0b, 0	; 11
	while (t0ext() < ADB_IMPULS_ATT)
     254:	e7 df       	rcall	.-50     	; 0x224 <t0ext>
     256:	bc 01       	movw	r22, r24
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatunsisf>
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	30 e8       	ldi	r19, 0x80	; 128
     264:	4e e0       	ldi	r20, 0x0E	; 14
     266:	53 e4       	ldi	r21, 0x43	; 67
     268:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__cmpsf2>
     26c:	87 fd       	sbrc	r24, 7
     26e:	f2 cf       	rjmp	.-28     	; 0x254 <adb+0x18>
		; // Warteschleife

	TCCR0B = ADB_VORTEILER_B_BIT; // ab hier alles im schnellen modus
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	85 bd       	out	0x25, r24	; 37

	anzahl_out = 1; // Mindestens Befehl übertragen
     274:	dd 24       	eor	r13, r13
     276:	d3 94       	inc	r13
	z_byte = 0;
     278:	10 e0       	ldi	r17, 0x00	; 0
	do {
		// START BIT (1)
		t0rst(); //  TCNT0 = 0;
     27a:	dc df       	rcall	.-72     	; 0x234 <t0rst>
		ADB_PDIR |= ADB_BIT; // Ausgang 0
     27c:	50 9a       	sbi	0x0a, 0	; 10
		ADB_POUT &= ~ADB_BIT;
     27e:	58 98       	cbi	0x0b, 0	; 11
		while (t0ext() < ADB_IMPULS_KURZ)
     280:	d1 df       	rcall	.-94     	; 0x224 <t0ext>
     282:	bc 01       	movw	r22, r24
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatunsisf>
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	4c e8       	ldi	r20, 0x8C	; 140
     292:	52 e4       	ldi	r21, 0x42	; 66
     294:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__cmpsf2>
     298:	87 fd       	sbrc	r24, 7
     29a:	f2 cf       	rjmp	.-28     	; 0x280 <adb+0x44>
			;
		ADB_PDIR &= ~ADB_BIT; // Eingang über Pullup
     29c:	50 98       	cbi	0x0a, 0	; 10
		ADB_POUT |= ADB_BIT;
     29e:	58 9a       	sbi	0x0b, 0	; 11
		while (t0ext() < ADB_IMPULS_KURZ + ADB_IMPULS_LANG)
     2a0:	c1 df       	rcall	.-126    	; 0x224 <t0ext>
     2a2:	bc 01       	movw	r22, r24
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatunsisf>
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	48 e4       	ldi	r20, 0x48	; 72
     2b2:	53 e4       	ldi	r21, 0x43	; 67
     2b4:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__cmpsf2>
     2b8:	87 fd       	sbrc	r24, 7
     2ba:	f2 cf       	rjmp	.-28     	; 0x2a0 <adb+0x64>
     2bc:	41 c0       	rjmp	.+130    	; 0x340 <adb+0x104>
			;

		for (; z_byte < anzahl_out; z_byte++) {
     2be:	c8 e0       	ldi	r28, 0x08	; 8
     2c0:	d0 e0       	ldi	r29, 0x00	; 0
     2c2:	00 e8       	ldi	r16, 0x80	; 128
			for (bitpos = 128; bitpos; bitpos >>= 1) { //Daten ausgeben
				t0rst(); //  TCNT0 = 0;
				ADB_PDIR |= ADB_BIT; // Ausgang 0
				ADB_POUT &= ~ADB_BIT;
				if (adb_werte[z_byte] & bitpos)
     2c4:	e1 2e       	mov	r14, r17
     2c6:	ff 24       	eor	r15, r15
     2c8:	8f e7       	ldi	r24, 0x7F	; 127
     2ca:	92 e0       	ldi	r25, 0x02	; 2
     2cc:	e8 0e       	add	r14, r24
     2ce:	f9 1e       	adc	r15, r25
		while (t0ext() < ADB_IMPULS_KURZ + ADB_IMPULS_LANG)
			;

		for (; z_byte < anzahl_out; z_byte++) {
			for (bitpos = 128; bitpos; bitpos >>= 1) { //Daten ausgeben
				t0rst(); //  TCNT0 = 0;
     2d0:	b1 df       	rcall	.-158    	; 0x234 <t0rst>
				ADB_PDIR |= ADB_BIT; // Ausgang 0
     2d2:	50 9a       	sbi	0x0a, 0	; 10
				ADB_POUT &= ~ADB_BIT;
     2d4:	58 98       	cbi	0x0b, 0	; 11
				if (adb_werte[z_byte] & bitpos)
     2d6:	f7 01       	movw	r30, r14
     2d8:	80 81       	ld	r24, Z
     2da:	80 23       	and	r24, r16
     2dc:	79 f0       	breq	.+30     	; 0x2fc <adb+0xc0>
					while (t0ext() < ADB_IMPULS_KURZ)
     2de:	a2 df       	rcall	.-188    	; 0x224 <t0ext>
     2e0:	bc 01       	movw	r22, r24
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatunsisf>
     2ea:	20 e0       	ldi	r18, 0x00	; 0
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	4c e8       	ldi	r20, 0x8C	; 140
     2f0:	52 e4       	ldi	r21, 0x42	; 66
     2f2:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__cmpsf2>
     2f6:	87 fd       	sbrc	r24, 7
     2f8:	f2 cf       	rjmp	.-28     	; 0x2de <adb+0xa2>
     2fa:	0e c0       	rjmp	.+28     	; 0x318 <adb+0xdc>
						;
				else
					while (t0ext() < ADB_IMPULS_LANG)
     2fc:	93 df       	rcall	.-218    	; 0x224 <t0ext>
     2fe:	bc 01       	movw	r22, r24
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatunsisf>
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	42 e0       	ldi	r20, 0x02	; 2
     30e:	53 e4       	ldi	r21, 0x43	; 67
     310:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__cmpsf2>
     314:	87 fd       	sbrc	r24, 7
     316:	f2 cf       	rjmp	.-28     	; 0x2fc <adb+0xc0>
						;
				ADB_PDIR &= ~ADB_BIT; // Eingang über Pullup
     318:	50 98       	cbi	0x0a, 0	; 10
				ADB_POUT |= ADB_BIT;
     31a:	58 9a       	sbi	0x0b, 0	; 11
				while (t0ext() < ADB_IMPULS_KURZ + ADB_IMPULS_LANG)
     31c:	83 df       	rcall	.-250    	; 0x224 <t0ext>
     31e:	bc 01       	movw	r22, r24
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatunsisf>
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	48 e4       	ldi	r20, 0x48	; 72
     32e:	53 e4       	ldi	r21, 0x43	; 67
     330:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__cmpsf2>
     334:	87 fd       	sbrc	r24, 7
     336:	f2 cf       	rjmp	.-28     	; 0x31c <adb+0xe0>
		ADB_POUT |= ADB_BIT;
		while (t0ext() < ADB_IMPULS_KURZ + ADB_IMPULS_LANG)
			;

		for (; z_byte < anzahl_out; z_byte++) {
			for (bitpos = 128; bitpos; bitpos >>= 1) { //Daten ausgeben
     338:	06 95       	lsr	r16
     33a:	21 97       	sbiw	r28, 0x01	; 1
     33c:	49 f6       	brne	.-110    	; 0x2d0 <adb+0x94>
		ADB_PDIR &= ~ADB_BIT; // Eingang über Pullup
		ADB_POUT |= ADB_BIT;
		while (t0ext() < ADB_IMPULS_KURZ + ADB_IMPULS_LANG)
			;

		for (; z_byte < anzahl_out; z_byte++) {
     33e:	1f 5f       	subi	r17, 0xFF	; 255
     340:	1d 15       	cp	r17, r13
     342:	08 f4       	brcc	.+2      	; 0x346 <adb+0x10a>
     344:	bc cf       	rjmp	.-136    	; 0x2be <adb+0x82>
				while (t0ext() < ADB_IMPULS_KURZ + ADB_IMPULS_LANG)
					;
			}
		}
		// STOP BIT (0)
		t0rst(); //  TCNT0 = 0;
     346:	76 df       	rcall	.-276    	; 0x234 <t0rst>
		ADB_PDIR |= ADB_BIT; // Ausgang 0
     348:	50 9a       	sbi	0x0a, 0	; 10
		ADB_POUT &= ~ADB_BIT;
     34a:	58 98       	cbi	0x0b, 0	; 11
		while (t0ext() < ADB_IMPULS_LANG)
     34c:	6b df       	rcall	.-298    	; 0x224 <t0ext>
     34e:	bc 01       	movw	r22, r24
     350:	80 e0       	ldi	r24, 0x00	; 0
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatunsisf>
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	30 e0       	ldi	r19, 0x00	; 0
     35c:	42 e0       	ldi	r20, 0x02	; 2
     35e:	53 e4       	ldi	r21, 0x43	; 67
     360:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__cmpsf2>
     364:	87 fd       	sbrc	r24, 7
     366:	f2 cf       	rjmp	.-28     	; 0x34c <adb+0x110>
			;
		ADB_PDIR &= ~ADB_BIT; // Eingang über Pullup
     368:	50 98       	cbi	0x0a, 0	; 10
		ADB_POUT |= ADB_BIT;
     36a:	58 9a       	sbi	0x0b, 0	; 11
		while (t0ext() < ADB_IMPULS_KURZ + ADB_IMPULS_LANG)
     36c:	5b df       	rcall	.-330    	; 0x224 <t0ext>
     36e:	bc 01       	movw	r22, r24
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatunsisf>
     378:	20 e0       	ldi	r18, 0x00	; 0
     37a:	30 e0       	ldi	r19, 0x00	; 0
     37c:	48 e4       	ldi	r20, 0x48	; 72
     37e:	53 e4       	ldi	r21, 0x43	; 67
     380:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__cmpsf2>
     384:	87 fd       	sbrc	r24, 7
     386:	f2 cf       	rjmp	.-28     	; 0x36c <adb+0x130>
			;

		// Entscheidung, ob noch weitere Daten übertragen werden
		if (adb_werte[0] == COM_LISTEN3)
     388:	80 91 7f 02 	lds	r24, 0x027F
     38c:	8b 33       	cpi	r24, 0x3B	; 59
     38e:	29 f0       	breq	.+10     	; 0x39a <adb+0x15e>
			anzahl_out = 2 + 1;
		else if (adb_werte[0] == COM_LISTEN1)
     390:	89 33       	cpi	r24, 0x39	; 57
     392:	41 f4       	brne	.+16     	; 0x3a4 <adb+0x168>
			anzahl_out = 8 + 1;
     394:	29 e0       	ldi	r18, 0x09	; 9
     396:	d2 2e       	mov	r13, r18
     398:	02 c0       	rjmp	.+4      	; 0x39e <adb+0x162>
		while (t0ext() < ADB_IMPULS_KURZ + ADB_IMPULS_LANG)
			;

		// Entscheidung, ob noch weitere Daten übertragen werden
		if (adb_werte[0] == COM_LISTEN3)
			anzahl_out = 2 + 1;
     39a:	93 e0       	ldi	r25, 0x03	; 3
     39c:	d9 2e       	mov	r13, r25
		else if (adb_werte[0] == COM_LISTEN1)
			anzahl_out = 8 + 1;
		else
			z_byte = 8;
	} while (z_byte < 2);
     39e:	11 30       	cpi	r17, 0x01	; 1
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <adb+0x168>
     3a2:	6b cf       	rjmp	.-298    	; 0x27a <adb+0x3e>

	// Warten auf Rückgabewerte sonst Abbruch
	// TCCR0 = ADB_VORTEILER_A_BIT; // micha modifikation
	t0rst(); //  TCNT0 = 0;
     3a4:	47 df       	rcall	.-370    	; 0x234 <t0rst>

	do {
		if (t0ext() > ADB_IMPULS_TLT) {
     3a6:	3e df       	rcall	.-388    	; 0x224 <t0ext>
     3a8:	bc 01       	movw	r22, r24
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatunsisf>
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	4a ef       	ldi	r20, 0xFA	; 250
     3b8:	53 e4       	ldi	r21, 0x43	; 67
     3ba:	0e 94 04 0c 	call	0x1808	; 0x1808 <__gesf2>
     3be:	18 16       	cp	r1, r24
     3c0:	0c f4       	brge	.+2      	; 0x3c4 <adb+0x188>
     3c2:	42 c0       	rjmp	.+132    	; 0x448 <adb+0x20c>
			return (0);
		}
	} while (ADB_PIN & ADB_BIT);
     3c4:	48 99       	sbic	0x09, 0	; 9
     3c6:	ef cf       	rjmp	.-34     	; 0x3a6 <adb+0x16a>
	while (!(ADB_PIN & ADB_BIT))
     3c8:	48 9b       	sbis	0x09, 0	; 9
     3ca:	fe cf       	rjmp	.-4      	; 0x3c8 <adb+0x18c>
     3cc:	c0 e8       	ldi	r28, 0x80	; 128
     3ce:	d2 e0       	ldi	r29, 0x02	; 2
     3d0:	11 e0       	ldi	r17, 0x01	; 1
     3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <adb+0x19a>
			while (!(ADB_PIN & ADB_BIT))
				;
			if (t0ext() < (ADB_IMPULS_KURZ + ADB_IMPULS_LANG) / 2)
				adb_werte[z_byte] += bitpos;
		}
		z_byte++;
     3d4:	18 2f       	mov	r17, r24
	while (!(ADB_PIN & ADB_BIT))
		; // Start Bit

	z_byte = 1;
	while (z_byte < MAX_ADB) {
		adb_werte[z_byte] = 0;
     3d6:	18 82       	st	Y, r1
     3d8:	88 e0       	ldi	r24, 0x08	; 8
     3da:	e8 2e       	mov	r14, r24
     3dc:	f1 2c       	mov	r15, r1
		for (bitpos = 128; bitpos; bitpos >>= 1) { //Bits einlesen
     3de:	00 e8       	ldi	r16, 0x80	; 128
			//TCCR0 = ADB_VORTEILER_B_BIT; //micha modifikation
			t0rst(); //  TCNT0 = 0;
     3e0:	29 df       	rcall	.-430    	; 0x234 <t0rst>
			// Abbruch wenn keine weiteren Bytes übertragen werden.
			do {
				if (t0ext() > ADB_IMPULS_KURZ + ADB_IMPULS_LANG) {
     3e2:	20 df       	rcall	.-448    	; 0x224 <t0ext>
     3e4:	bc 01       	movw	r22, r24
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatunsisf>
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	48 e4       	ldi	r20, 0x48	; 72
     3f4:	53 e4       	ldi	r21, 0x43	; 67
     3f6:	0e 94 04 0c 	call	0x1808	; 0x1808 <__gesf2>
     3fa:	18 16       	cp	r1, r24
     3fc:	14 f4       	brge	.+4      	; 0x402 <adb+0x1c6>
					return (z_byte - 1);
     3fe:	11 50       	subi	r17, 0x01	; 1
     400:	24 c0       	rjmp	.+72     	; 0x44a <adb+0x20e>
				}
			} while (ADB_PIN & ADB_BIT);
     402:	48 99       	sbic	0x09, 0	; 9
     404:	ee cf       	rjmp	.-36     	; 0x3e2 <adb+0x1a6>
			t0rst(); //  TCNT0 = 0;
     406:	16 df       	rcall	.-468    	; 0x234 <t0rst>
			while (!(ADB_PIN & ADB_BIT))
     408:	48 9b       	sbis	0x09, 0	; 9
     40a:	fe cf       	rjmp	.-4      	; 0x408 <adb+0x1cc>
				;
			if (t0ext() < (ADB_IMPULS_KURZ + ADB_IMPULS_LANG) / 2)
     40c:	0b df       	rcall	.-490    	; 0x224 <t0ext>
     40e:	bc 01       	movw	r22, r24
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <__floatunsisf>
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	48 ec       	ldi	r20, 0xC8	; 200
     41e:	52 e4       	ldi	r21, 0x42	; 66
     420:	0e 94 ba 0a 	call	0x1574	; 0x1574 <__cmpsf2>
     424:	87 ff       	sbrs	r24, 7
     426:	03 c0       	rjmp	.+6      	; 0x42e <adb+0x1f2>
				adb_werte[z_byte] += bitpos;
     428:	88 81       	ld	r24, Y
     42a:	80 0f       	add	r24, r16
     42c:	88 83       	st	Y, r24
		; // Start Bit

	z_byte = 1;
	while (z_byte < MAX_ADB) {
		adb_werte[z_byte] = 0;
		for (bitpos = 128; bitpos; bitpos >>= 1) { //Bits einlesen
     42e:	06 95       	lsr	r16
     430:	08 94       	sec
     432:	e1 08       	sbc	r14, r1
     434:	f1 08       	sbc	r15, r1
     436:	e1 14       	cp	r14, r1
     438:	f1 04       	cpc	r15, r1
     43a:	91 f6       	brne	.-92     	; 0x3e0 <adb+0x1a4>
			while (!(ADB_PIN & ADB_BIT))
				;
			if (t0ext() < (ADB_IMPULS_KURZ + ADB_IMPULS_LANG) / 2)
				adb_werte[z_byte] += bitpos;
		}
		z_byte++;
     43c:	81 2f       	mov	r24, r17
     43e:	8f 5f       	subi	r24, 0xFF	; 255
     440:	21 96       	adiw	r28, 0x01	; 1
	} while (ADB_PIN & ADB_BIT);
	while (!(ADB_PIN & ADB_BIT))
		; // Start Bit

	z_byte = 1;
	while (z_byte < MAX_ADB) {
     442:	89 30       	cpi	r24, 0x09	; 9
     444:	39 f6       	brne	.-114    	; 0x3d4 <adb+0x198>
     446:	01 c0       	rjmp	.+2      	; 0x44a <adb+0x20e>
	// TCCR0 = ADB_VORTEILER_A_BIT; // micha modifikation
	t0rst(); //  TCNT0 = 0;

	do {
		if (t0ext() > ADB_IMPULS_TLT) {
			return (0);
     448:	10 e0       	ldi	r17, 0x00	; 0
				adb_werte[z_byte] += bitpos;
		}
		z_byte++;
	}
	return (z_byte - 1);
}
     44a:	81 2f       	mov	r24, r17
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	08 95       	ret

0000045c <touchpad_init>:

void touchpad_init(void) {
	// Eingänge
	ADB_PDIR &= ~ADB_BIT;
     45c:	50 98       	cbi	0x0a, 0	; 10

	// Pull Up einschalten
	ADB_POUT |= ADB_BIT;
     45e:	58 9a       	sbi	0x0b, 0	; 11

	//enable timer0 interrupt
	TIMSK0 |= (1 << TOIE0);
     460:	ee e6       	ldi	r30, 0x6E	; 110
     462:	f0 e0       	ldi	r31, 0x00	; 0
     464:	80 81       	ld	r24, Z
     466:	81 60       	ori	r24, 0x01	; 1
     468:	80 83       	st	Z, r24
}
     46a:	08 95       	ret

0000046c <touchpad_read>:

uint8_t touchpad_read(void) {
	adb_werte[0] = COM_TALK0;
     46c:	8c e3       	ldi	r24, 0x3C	; 60
     46e:	80 93 7f 02 	sts	0x027F, r24
	adb_data_length = adb();
     472:	e4 de       	rcall	.-568    	; 0x23c <adb>
     474:	80 93 89 02 	sts	0x0289, r24
	return adb_data_length;
     478:	80 91 89 02 	lds	r24, 0x0289
}
     47c:	08 95       	ret

0000047e <touchpad_set_abs_mode>:

void touchpad_set_abs_mode(void) {
	// Auf Absolutmodus umschalten
	adb_werte[0] = COM_LISTEN3;
     47e:	8b e3       	ldi	r24, 0x3B	; 59
     480:	80 93 7f 02 	sts	0x027F, r24
	adb_werte[1] = BITS(0110,0011);
     484:	83 e6       	ldi	r24, 0x63	; 99
     486:	80 93 80 02 	sts	0x0280, r24
	adb_werte[2] = 4; //CDM Modus
     48a:	84 e0       	ldi	r24, 0x04	; 4
     48c:	80 93 81 02 	sts	0x0281, r24
	adb();
     490:	d5 de       	rcall	.-598    	; 0x23c <adb>

	adb_werte[0] = COM_TALK1;
     492:	8d e3       	ldi	r24, 0x3D	; 61
     494:	80 93 7f 02 	sts	0x027F, r24
	adb(); // Werte holen
     498:	d1 de       	rcall	.-606    	; 0x23c <adb>

	adb_werte[0] = COM_LISTEN1;
     49a:	89 e3       	ldi	r24, 0x39	; 57
     49c:	80 93 7f 02 	sts	0x027F, r24
	adb_werte[7] = 0x00; //Absolutmodus
     4a0:	10 92 86 02 	sts	0x0286, r1
	adb();
     4a4:	cb de       	rcall	.-618    	; 0x23c <adb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4a6:	8f ef       	ldi	r24, 0xFF	; 255
     4a8:	91 ee       	ldi	r25, 0xE1	; 225
     4aa:	a4 e0       	ldi	r26, 0x04	; 4
     4ac:	81 50       	subi	r24, 0x01	; 1
     4ae:	90 40       	sbci	r25, 0x00	; 0
     4b0:	a0 40       	sbci	r26, 0x00	; 0
     4b2:	e1 f7       	brne	.-8      	; 0x4ac <touchpad_set_abs_mode+0x2e>
     4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <touchpad_set_abs_mode+0x38>
     4b6:	00 00       	nop
  _delay_ms(100);
}
     4b8:	08 95       	ret

000004ba <touchpad_set_rel_mode_100dpi>:

void touchpad_set_rel_mode_100dpi(void) {
	// Auf Relativmodus umschalten
	adb_werte[0] = COM_LISTEN3;
     4ba:	8b e3       	ldi	r24, 0x3B	; 59
     4bc:	80 93 7f 02 	sts	0x027F, r24
	adb_werte[1] = BITS(0110,0011);
     4c0:	83 e6       	ldi	r24, 0x63	; 99
     4c2:	80 93 80 02 	sts	0x0280, r24
	adb_werte[2] = 1; //default modus: 100 dpi mouse
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 81 02 	sts	0x0281, r24
	adb();
     4cc:	b7 de       	rcall	.-658    	; 0x23c <adb>
     4ce:	8f ef       	ldi	r24, 0xFF	; 255
     4d0:	91 ee       	ldi	r25, 0xE1	; 225
     4d2:	a4 e0       	ldi	r26, 0x04	; 4
     4d4:	81 50       	subi	r24, 0x01	; 1
     4d6:	90 40       	sbci	r25, 0x00	; 0
     4d8:	a0 40       	sbci	r26, 0x00	; 0
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <touchpad_set_rel_mode_100dpi+0x1a>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <touchpad_set_rel_mode_100dpi+0x24>
     4de:	00 00       	nop
  _delay_ms(100);

}
     4e0:	08 95       	ret

000004e2 <delta_y>:
	return ((adb_werte[4] & 0b01110000) << 6)
			| ((adb_werte[3] & 0b01110000) << 3) | (adb_werte[1] & 0b01111111);
}

int8_t delta_y(void) {
	if(adb_data_length ==0) {
     4e2:	80 91 89 02 	lds	r24, 0x0289
     4e6:	88 23       	and	r24, r24
     4e8:	51 f0       	breq	.+20     	; 0x4fe <delta_y+0x1c>
		return 0;
	}
	if (adb_werte[1] & 0b01000000) {
     4ea:	80 91 80 02 	lds	r24, 0x0280
     4ee:	86 ff       	sbrs	r24, 6
     4f0:	04 c0       	rjmp	.+8      	; 0x4fa <delta_y+0x18>
		return -((128 - adb_werte[1]) & 0b00111111);
     4f2:	81 95       	neg	r24
     4f4:	8f 73       	andi	r24, 0x3F	; 63
     4f6:	81 95       	neg	r24
     4f8:	08 95       	ret
	} else {
		return adb_werte[1] & 0b00111111;
     4fa:	8f 73       	andi	r24, 0x3F	; 63
     4fc:	08 95       	ret
			| ((adb_werte[3] & 0b01110000) << 3) | (adb_werte[1] & 0b01111111);
}

int8_t delta_y(void) {
	if(adb_data_length ==0) {
		return 0;
     4fe:	80 e0       	ldi	r24, 0x00	; 0
	if (adb_werte[1] & 0b01000000) {
		return -((128 - adb_werte[1]) & 0b00111111);
	} else {
		return adb_werte[1] & 0b00111111;
	}
}
     500:	08 95       	ret

00000502 <delta_x>:

int8_t delta_x(void) {
	if(adb_data_length ==0) {
     502:	80 91 89 02 	lds	r24, 0x0289
     506:	88 23       	and	r24, r24
     508:	51 f0       	breq	.+20     	; 0x51e <delta_x+0x1c>
		return 0;
	}
	if (adb_werte[2] & 0b01000000) {
     50a:	80 91 81 02 	lds	r24, 0x0281
     50e:	86 ff       	sbrs	r24, 6
     510:	04 c0       	rjmp	.+8      	; 0x51a <delta_x+0x18>
		return -((128 - adb_werte[2]) & 0b00111111);
     512:	81 95       	neg	r24
     514:	8f 73       	andi	r24, 0x3F	; 63
     516:	81 95       	neg	r24
     518:	08 95       	ret
	} else {
		return adb_werte[2] & 0b00111111;
     51a:	8f 73       	andi	r24, 0x3F	; 63
     51c:	08 95       	ret
	}
}

int8_t delta_x(void) {
	if(adb_data_length ==0) {
		return 0;
     51e:	80 e0       	ldi	r24, 0x00	; 0
	if (adb_werte[2] & 0b01000000) {
		return -((128 - adb_werte[2]) & 0b00111111);
	} else {
		return adb_werte[2] & 0b00111111;
	}
}
     520:	08 95       	ret

00000522 <Usb2SerialTask>:





void Usb2SerialTask(void) {
     522:	1f 93       	push	r17
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     524:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     526:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     528:	20 91 6c 01 	lds	r18, 0x016C
     52c:	30 91 6d 01 	lds	r19, 0x016D
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     530:	8f bf       	out	0x3f, r24	; 63
  
    /* Only try to read in bytes from the CDC interface if the transmit buffer is not full */
    if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
     532:	80 91 6a 01 	lds	r24, 0x016A
     536:	90 91 6b 01 	lds	r25, 0x016B
     53a:	28 17       	cp	r18, r24
     53c:	39 07       	cpc	r19, r25
     53e:	49 f0       	breq	.+18     	; 0x552 <Usb2SerialTask+0x30>
    {
      int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     540:	85 e4       	ldi	r24, 0x45	; 69
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	84 d7       	rcall	.+3848   	; 0x144e <CDC_Device_ReceiveByte>
     546:	bc 01       	movw	r22, r24

      /* Read bytes from the USB OUT endpoint into the USART transmit buffer */
      if (!(ReceivedByte < 0))
     548:	97 fd       	sbrc	r25, 7
     54a:	03 c0       	rjmp	.+6      	; 0x552 <Usb2SerialTask+0x30>
        RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
     54c:	82 e6       	ldi	r24, 0x62	; 98
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	0f de       	rcall	.-994    	; 0x170 <RingBuffer_Insert>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     552:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     554:	f8 94       	cli
     556:	80 91 f8 01 	lds	r24, 0x01F8
     55a:	90 91 f9 01 	lds	r25, 0x01F9
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     55e:	2f bf       	out	0x3f, r18	; 63
    }

    /* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
    uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
    if (BufferCount)
     560:	00 97       	sbiw	r24, 0x00	; 0
     562:	01 f1       	breq	.+64     	; 0x5a4 <Usb2SerialTask+0x82>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     564:	20 91 46 01 	lds	r18, 0x0146
     568:	2f 70       	andi	r18, 0x0F	; 15
     56a:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     56e:	20 91 e8 00 	lds	r18, 0x00E8
    {
      Endpoint_SelectEndpoint(VirtualSerial_CDC_Interface.Config.DataINEndpoint.Address);

      /* Check if a packet is already enqueued to the host - if so, we shouldn't try to send more data
       * until it completes as there is a chance nothing is listening and a lengthy timeout could occur */
      if (Endpoint_IsINReady())
     572:	20 ff       	sbrs	r18, 0
     574:	17 c0       	rjmp	.+46     	; 0x5a4 <Usb2SerialTask+0x82>
      {
        /* Never send more than one bank size less one byte to the host at a time, so that we don't block
         * while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening */
        uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));
     576:	80 31       	cpi	r24, 0x10	; 16
     578:	91 05       	cpc	r25, r1
     57a:	10 f0       	brcs	.+4      	; 0x580 <Usb2SerialTask+0x5e>
     57c:	8f e0       	ldi	r24, 0x0F	; 15
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	18 2f       	mov	r17, r24

        /* Read bytes from the USART receive buffer into the USB IN endpoint */
        while (BytesToSend--)
     582:	0e c0       	rjmp	.+28     	; 0x5a0 <Usb2SerialTask+0x7e>
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer) ATTR_WARN_UNUSED_RESULT ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Peek(RingBuffer_t* const Buffer)
		{
			return *Buffer->Out;
     584:	e0 91 f0 01 	lds	r30, 0x01F0
     588:	f0 91 f1 01 	lds	r31, 0x01F1
        {
          /* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
          if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     58c:	85 e4       	ldi	r24, 0x45	; 69
     58e:	91 e0       	ldi	r25, 0x01	; 1
     590:	60 81       	ld	r22, Z
     592:	ec d6       	rcall	.+3544   	; 0x136c <CDC_Device_SendByte>
     594:	11 50       	subi	r17, 0x01	; 1
     596:	88 23       	and	r24, r24
     598:	29 f4       	brne	.+10     	; 0x5a4 <Usb2SerialTask+0x82>
          {
            break;
          }

          /* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
          RingBuffer_Remove(&USARTtoUSB_Buffer);
     59a:	8e ee       	ldi	r24, 0xEE	; 238
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	03 de       	rcall	.-1018   	; 0x1a6 <RingBuffer_Remove>
        /* Never send more than one bank size less one byte to the host at a time, so that we don't block
         * while a Zero Length Packet (ZLP) to terminate the transfer is sent if the host isn't listening */
        uint8_t BytesToSend = MIN(BufferCount, (CDC_TXRX_EPSIZE - 1));

        /* Read bytes from the USART receive buffer into the USB IN endpoint */
        while (BytesToSend--)
     5a0:	11 23       	and	r17, r17
     5a2:	81 f7       	brne	.-32     	; 0x584 <Usb2SerialTask+0x62>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     5a4:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     5a6:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     5a8:	80 91 6c 01 	lds	r24, 0x016C
     5ac:	90 91 6d 01 	lds	r25, 0x016D
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     5b0:	2f bf       	out	0x3f, r18	; 63
        }
      }
    }

    /* Load the next byte from the USART transmit buffer into the USART */
    if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer))) {
     5b2:	00 97       	sbiw	r24, 0x00	; 0
     5b4:	49 f0       	breq	.+18     	; 0x5c8 <Usb2SerialTask+0xa6>
      Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));
     5b6:	82 e6       	ldi	r24, 0x62	; 98
     5b8:	91 e0       	ldi	r25, 0x01	; 1
     5ba:	f5 dd       	rcall	.-1046   	; 0x1a6 <RingBuffer_Remove>
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     5bc:	90 91 c8 00 	lds	r25, 0x00C8
     5c0:	95 ff       	sbrs	r25, 5
     5c2:	fc cf       	rjmp	.-8      	; 0x5bc <Usb2SerialTask+0x9a>
				UDR1 = DataByte;
     5c4:	80 93 ce 00 	sts	0x00CE, r24
//      dummy = RingBuffer_Remove(&USBtoUSART_Buffer);
//      sendPayload(&dummy,1,0);
    }
    CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     5c8:	85 e4       	ldi	r24, 0x45	; 69
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	29 d7       	rcall	.+3666   	; 0x1420 <CDC_Device_USBTask>
    USB_USBTask();
     5ce:	e3 d5       	rcall	.+3014   	; 0x1196 <USB_USBTask>
  
}
     5d0:	1f 91       	pop	r17
     5d2:	08 95       	ret

000005d4 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     5d4:	84 b7       	in	r24, 0x34	; 52
     5d6:	87 7f       	andi	r24, 0xF7	; 247
     5d8:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     5da:	88 e1       	ldi	r24, 0x18	; 24
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	80 93 60 00 	sts	0x0060, r24
     5e4:	10 92 60 00 	sts	0x0060, r1
     5e8:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	80 e8       	ldi	r24, 0x80	; 128
     5ee:	0f b6       	in	r0, 0x3f	; 63
     5f0:	f8 94       	cli
     5f2:	80 93 61 00 	sts	0x0061, r24
     5f6:	90 93 61 00 	sts	0x0061, r25
     5fa:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
// 	LEDs_Init();
	USB_Init();
}
     5fc:	7c c3       	rjmp	.+1784   	; 0xcf6 <USB_Init>

000005fe <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
// 	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     5fe:	08 95       	ret

00000600 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
// 	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     600:	08 95       	ret

00000602 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     602:	85 e4       	ldi	r24, 0x45	; 69
     604:	91 e0       	ldi	r25, 0x01	; 1

// 	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
}
     606:	8e c6       	rjmp	.+3356   	; 0x1324 <CDC_Device_ConfigureEndpoints>

00000608 <EVENT_USB_Device_ControlRequest>:

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     608:	85 e4       	ldi	r24, 0x45	; 69
     60a:	91 e0       	ldi	r25, 0x01	; 1
}
     60c:	df c5       	rjmp	.+3006   	; 0x11cc <CDC_Device_ProcessControlRequest>

0000060e <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     60e:	1f 92       	push	r1
     610:	0f 92       	push	r0
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	0f 92       	push	r0
     616:	11 24       	eor	r1, r1
     618:	2f 93       	push	r18
     61a:	3f 93       	push	r19
     61c:	4f 93       	push	r20
     61e:	5f 93       	push	r21
     620:	6f 93       	push	r22
     622:	7f 93       	push	r23
     624:	8f 93       	push	r24
     626:	9f 93       	push	r25
     628:	af 93       	push	r26
     62a:	bf 93       	push	r27
     62c:	ef 93       	push	r30
     62e:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     630:	60 91 ce 00 	lds	r22, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
     634:	8e b3       	in	r24, 0x1e	; 30
     636:	84 30       	cpi	r24, 0x04	; 4
     638:	19 f4       	brne	.+6      	; 0x640 <__vector_23+0x32>
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
     63a:	8e ee       	ldi	r24, 0xEE	; 238
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	98 dd       	rcall	.-1232   	; 0x170 <RingBuffer_Insert>
}
     640:	ff 91       	pop	r31
     642:	ef 91       	pop	r30
     644:	bf 91       	pop	r27
     646:	af 91       	pop	r26
     648:	9f 91       	pop	r25
     64a:	8f 91       	pop	r24
     64c:	7f 91       	pop	r23
     64e:	6f 91       	pop	r22
     650:	5f 91       	pop	r21
     652:	4f 91       	pop	r20
     654:	3f 91       	pop	r19
     656:	2f 91       	pop	r18
     658:	0f 90       	pop	r0
     65a:	0f be       	out	0x3f, r0	; 63
     65c:	0f 90       	pop	r0
     65e:	1f 90       	pop	r1
     660:	18 95       	reti

00000662 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     662:	8f 92       	push	r8
     664:	9f 92       	push	r9
     666:	af 92       	push	r10
     668:	bf 92       	push	r11
     66a:	cf 92       	push	r12
     66c:	df 92       	push	r13
     66e:	ef 92       	push	r14
     670:	ff 92       	push	r15
     672:	1f 93       	push	r17
     674:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     676:	a1 8d       	ldd	r26, Z+25	; 0x19
     678:	a1 50       	subi	r26, 0x01	; 1
     67a:	a2 30       	cpi	r26, 0x02	; 2
     67c:	28 f4       	brcc	.+10     	; 0x688 <EVENT_CDC_Device_LineEncodingChanged+0x26>
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	a0 5a       	subi	r26, 0xA0	; 160
     682:	be 4f       	sbci	r27, 0xFE	; 254
     684:	1c 91       	ld	r17, X
     686:	01 c0       	rjmp	.+2      	; 0x68a <EVENT_CDC_Device_LineEncodingChanged+0x28>
     688:	10 e0       	ldi	r17, 0x00	; 0
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     68a:	80 8d       	ldd	r24, Z+24	; 0x18
     68c:	82 30       	cpi	r24, 0x02	; 2
     68e:	09 f4       	brne	.+2      	; 0x692 <EVENT_CDC_Device_LineEncodingChanged+0x30>
	  ConfigMask |= (1 << USBS1);
     690:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     692:	82 8d       	ldd	r24, Z+26	; 0x1a
     694:	87 30       	cpi	r24, 0x07	; 7
     696:	31 f0       	breq	.+12     	; 0x6a4 <EVENT_CDC_Device_LineEncodingChanged+0x42>
     698:	88 30       	cpi	r24, 0x08	; 8
     69a:	31 f0       	breq	.+12     	; 0x6a8 <EVENT_CDC_Device_LineEncodingChanged+0x46>
     69c:	86 30       	cpi	r24, 0x06	; 6
     69e:	29 f4       	brne	.+10     	; 0x6aa <EVENT_CDC_Device_LineEncodingChanged+0x48>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
     6a0:	12 60       	ori	r17, 0x02	; 2
			break;
     6a2:	03 c0       	rjmp	.+6      	; 0x6aa <EVENT_CDC_Device_LineEncodingChanged+0x48>
		case 7:
			ConfigMask |= (1 << UCSZ11);
     6a4:	14 60       	ori	r17, 0x04	; 4
			break;
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <EVENT_CDC_Device_LineEncodingChanged+0x48>
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     6a8:	16 60       	ori	r17, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     6aa:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     6ae:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     6b2:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     6b6:	c4 88       	ldd	r12, Z+20	; 0x14
     6b8:	d5 88       	ldd	r13, Z+21	; 0x15
     6ba:	e6 88       	ldd	r14, Z+22	; 0x16
     6bc:	f7 88       	ldd	r15, Z+23	; 0x17
     6be:	c7 01       	movw	r24, r14
     6c0:	b6 01       	movw	r22, r12
     6c2:	96 95       	lsr	r25
     6c4:	87 95       	ror	r24
     6c6:	77 95       	ror	r23
     6c8:	67 95       	ror	r22
     6ca:	ec d7       	rcall	.+4056   	; 0x16a4 <__floatunsisf>
     6cc:	20 e0       	ldi	r18, 0x00	; 0
     6ce:	34 e2       	ldi	r19, 0x24	; 36
     6d0:	44 ef       	ldi	r20, 0xF4	; 244
     6d2:	59 e4       	ldi	r21, 0x49	; 73
     6d4:	eb d6       	rcall	.+3542   	; 0x14ac <__addsf3>
     6d6:	4b 01       	movw	r8, r22
     6d8:	5c 01       	movw	r10, r24
     6da:	c7 01       	movw	r24, r14
     6dc:	b6 01       	movw	r22, r12
     6de:	e2 d7       	rcall	.+4036   	; 0x16a4 <__floatunsisf>
     6e0:	9b 01       	movw	r18, r22
     6e2:	ac 01       	movw	r20, r24
     6e4:	c5 01       	movw	r24, r10
     6e6:	b4 01       	movw	r22, r8
     6e8:	49 d7       	rcall	.+3730   	; 0x157c <__divsf3>
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	40 e8       	ldi	r20, 0x80	; 128
     6f0:	5f e3       	ldi	r21, 0x3F	; 63
     6f2:	db d6       	rcall	.+3510   	; 0x14aa <__subsf3>
     6f4:	ab d7       	rcall	.+3926   	; 0x164c <__fixunssfsi>
     6f6:	70 93 cd 00 	sts	0x00CD, r23
     6fa:	60 93 cc 00 	sts	0x00CC, r22

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
     6fe:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (1 << U2X1);
     702:	82 e0       	ldi	r24, 0x02	; 2
     704:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     708:	88 e9       	ldi	r24, 0x98	; 152
     70a:	80 93 c9 00 	sts	0x00C9, r24
}
     70e:	1f 91       	pop	r17
     710:	ff 90       	pop	r15
     712:	ef 90       	pop	r14
     714:	df 90       	pop	r13
     716:	cf 90       	pop	r12
     718:	bf 90       	pop	r11
     71a:	af 90       	pop	r10
     71c:	9f 90       	pop	r9
     71e:	8f 90       	pop	r8
     720:	08 95       	ret

00000722 <uart_putc>:




void uart_putc(unsigned char data)
{
     722:	68 2f       	mov	r22, r24

      if (USB_DeviceState == DEVICE_STATE_Configured){
     724:	8e b3       	in	r24, 0x1e	; 30
     726:	84 30       	cpi	r24, 0x04	; 4
     728:	19 f4       	brne	.+6      	; 0x730 <uart_putc+0xe>
        RingBuffer_Insert(&USARTtoUSB_Buffer, data);
     72a:	8e ee       	ldi	r24, 0xEE	; 238
     72c:	91 e0       	ldi	r25, 0x01	; 1
     72e:	20 cd       	rjmp	.-1472   	; 0x170 <RingBuffer_Insert>
     730:	08 95       	ret

00000732 <uart_puts>:
      }
  
}

void uart_puts(const char *s )
{
     732:	ef 92       	push	r14
     734:	ff 92       	push	r15
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	e8 2e       	mov	r14, r24
     73c:	e7 01       	movw	r28, r14
     73e:	7e 01       	movw	r14, r28
     740:	f9 2e       	mov	r15, r25
     742:	e7 01       	movw	r28, r14
    while (*s) 
     744:	01 c0       	rjmp	.+2      	; 0x748 <uart_puts+0x16>
      uart_putc(*s++);
     746:	ed df       	rcall	.-38     	; 0x722 <uart_putc>
  
}

void uart_puts(const char *s )
{
    while (*s) 
     748:	89 91       	ld	r24, Y+
     74a:	88 23       	and	r24, r24
     74c:	e1 f7       	brne	.-8      	; 0x746 <uart_puts+0x14>
      uart_putc(*s++);

}/* uart_puts */
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	08 95       	ret

00000758 <my_uitoa>:


// convert an unsigned integer to string
void my_uitoa(uint32_t zahl, char* string, uint8_t no_digits) {
     758:	2f 92       	push	r2
     75a:	3f 92       	push	r3
     75c:	4f 92       	push	r4
     75e:	5f 92       	push	r5
     760:	6f 92       	push	r6
     762:	7f 92       	push	r7
     764:	8f 92       	push	r8
     766:	9f 92       	push	r9
     768:	af 92       	push	r10
     76a:	bf 92       	push	r11
     76c:	cf 92       	push	r12
     76e:	df 92       	push	r13
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	cf 93       	push	r28
     77a:	df 93       	push	r29
     77c:	7b 01       	movw	r14, r22
     77e:	8c 01       	movw	r16, r24
  int8_t i; // schleifenzähler

  string[no_digits] = '\0'; // String Terminator
     780:	82 2f       	mov	r24, r18
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	fa 01       	movw	r30, r20
     786:	e8 0f       	add	r30, r24
     788:	f9 1f       	adc	r31, r25
     78a:	10 82       	st	Z, r1
  for (i = (no_digits - 1); i >= 0; i--) {
     78c:	d2 2e       	mov	r13, r18
     78e:	da 94       	dec	r13

}/* uart_puts */


// convert an unsigned integer to string
void my_uitoa(uint32_t zahl, char* string, uint8_t no_digits) {
     790:	4d 2c       	mov	r4, r13
     792:	55 24       	eor	r5, r5
     794:	47 fc       	sbrc	r4, 7
     796:	50 94       	com	r5
     798:	ea 01       	movw	r28, r20
     79a:	c4 0d       	add	r28, r4
     79c:	d5 1d       	adc	r29, r5
  int8_t i; // schleifenzähler

  string[no_digits] = '\0'; // String Terminator
  for (i = (no_digits - 1); i >= 0; i--) {
     79e:	aa 24       	eor	r10, r10
     7a0:	bb 24       	eor	r11, r11
    if (zahl == 0 && i < (no_digits - 1)) {
      string[i] = ' ';
    } else {
      string[i] = (zahl % 10) + '0';
     7a2:	ba e0       	ldi	r27, 0x0A	; 10
     7a4:	6b 2e       	mov	r6, r27
     7a6:	71 2c       	mov	r7, r1
     7a8:	81 2c       	mov	r8, r1
     7aa:	91 2c       	mov	r9, r1
void my_uitoa(uint32_t zahl, char* string, uint8_t no_digits) {
  int8_t i; // schleifenzähler

  string[no_digits] = '\0'; // String Terminator
  for (i = (no_digits - 1); i >= 0; i--) {
    if (zahl == 0 && i < (no_digits - 1)) {
     7ac:	1c 01       	movw	r2, r24
     7ae:	08 94       	sec
     7b0:	21 08       	sbc	r2, r1
     7b2:	31 08       	sbc	r3, r1
      string[i] = ' ';
     7b4:	a0 e2       	ldi	r26, 0x20	; 32
     7b6:	ca 2e       	mov	r12, r26
// convert an unsigned integer to string
void my_uitoa(uint32_t zahl, char* string, uint8_t no_digits) {
  int8_t i; // schleifenzähler

  string[no_digits] = '\0'; // String Terminator
  for (i = (no_digits - 1); i >= 0; i--) {
     7b8:	22 c0       	rjmp	.+68     	; 0x7fe <my_uitoa+0xa6>
    if (zahl == 0 && i < (no_digits - 1)) {
     7ba:	e1 14       	cp	r14, r1
     7bc:	f1 04       	cpc	r15, r1
     7be:	01 05       	cpc	r16, r1
     7c0:	11 05       	cpc	r17, r1
     7c2:	41 f4       	brne	.+16     	; 0x7d4 <my_uitoa+0x7c>

}/* uart_puts */


// convert an unsigned integer to string
void my_uitoa(uint32_t zahl, char* string, uint8_t no_digits) {
     7c4:	c5 01       	movw	r24, r10
     7c6:	84 0d       	add	r24, r4
     7c8:	95 1d       	adc	r25, r5
  int8_t i; // schleifenzähler

  string[no_digits] = '\0'; // String Terminator
  for (i = (no_digits - 1); i >= 0; i--) {
    if (zahl == 0 && i < (no_digits - 1)) {
     7ca:	82 15       	cp	r24, r2
     7cc:	93 05       	cpc	r25, r3
     7ce:	14 f4       	brge	.+4      	; 0x7d4 <my_uitoa+0x7c>
      string[i] = ' ';
     7d0:	c8 82       	st	Y, r12
     7d2:	08 c0       	rjmp	.+16     	; 0x7e4 <my_uitoa+0x8c>
    } else {
      string[i] = (zahl % 10) + '0';
     7d4:	c8 01       	movw	r24, r16
     7d6:	b7 01       	movw	r22, r14
     7d8:	a4 01       	movw	r20, r8
     7da:	93 01       	movw	r18, r6
     7dc:	0e 94 08 0c 	call	0x1810	; 0x1810 <__udivmodsi4>
     7e0:	60 5d       	subi	r22, 0xD0	; 208
     7e2:	68 83       	st	Y, r22
    } // Modulo rechnen, dann den ASCII-Code von '0' addieren
    zahl /= 10;
     7e4:	c8 01       	movw	r24, r16
     7e6:	b7 01       	movw	r22, r14
     7e8:	a4 01       	movw	r20, r8
     7ea:	93 01       	movw	r18, r6
     7ec:	0e 94 08 0c 	call	0x1810	; 0x1810 <__udivmodsi4>
     7f0:	79 01       	movw	r14, r18
     7f2:	8a 01       	movw	r16, r20
// convert an unsigned integer to string
void my_uitoa(uint32_t zahl, char* string, uint8_t no_digits) {
  int8_t i; // schleifenzähler

  string[no_digits] = '\0'; // String Terminator
  for (i = (no_digits - 1); i >= 0; i--) {
     7f4:	da 94       	dec	r13
     7f6:	21 97       	sbiw	r28, 0x01	; 1
     7f8:	08 94       	sec
     7fa:	a1 08       	sbc	r10, r1
     7fc:	b1 08       	sbc	r11, r1
     7fe:	d7 fe       	sbrs	r13, 7
     800:	dc cf       	rjmp	.-72     	; 0x7ba <my_uitoa+0x62>
      string[i] = (zahl % 10) + '0';
    } // Modulo rechnen, dann den ASCII-Code von '0' addieren
    zahl /= 10;
  }

}
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	df 90       	pop	r13
     810:	cf 90       	pop	r12
     812:	bf 90       	pop	r11
     814:	af 90       	pop	r10
     816:	9f 90       	pop	r9
     818:	8f 90       	pop	r8
     81a:	7f 90       	pop	r7
     81c:	6f 90       	pop	r6
     81e:	5f 90       	pop	r5
     820:	4f 90       	pop	r4
     822:	3f 90       	pop	r3
     824:	2f 90       	pop	r2
     826:	08 95       	ret

00000828 <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
     828:	cf 92       	push	r12
     82a:	df 92       	push	r13
     82c:	ef 92       	push	r14
     82e:	ff 92       	push	r15
     830:	0f 93       	push	r16
     832:	1f 93       	push	r17
     834:	df 93       	push	r29
     836:	cf 93       	push	r28
     838:	cd b7       	in	r28, 0x3d	; 61
     83a:	de b7       	in	r29, 0x3e	; 62
     83c:	60 97       	sbiw	r28, 0x10	; 16
     83e:	0f b6       	in	r0, 0x3f	; 63
     840:	f8 94       	cli
     842:	de bf       	out	0x3e, r29	; 62
     844:	0f be       	out	0x3f, r0	; 63
     846:	cd bf       	out	0x3d, r28	; 61
  char dummy;
  uint8_t field_val = 0;
  SetupHardware();
     848:	c5 de       	rcall	.-630    	; 0x5d4 <SetupHardware>



  RingBuffer_InitBuffer(&USBtoUSART_Buffer, USBtoUSART_Buffer_Data, sizeof(USBtoUSART_Buffer_Data));
     84a:	82 e6       	ldi	r24, 0x62	; 98
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	6e e6       	ldi	r22, 0x6E	; 110
     850:	71 e0       	ldi	r23, 0x01	; 1
     852:	c2 dc       	rcall	.-1660   	; 0x1d8 <RingBuffer_InitBuffer.clone.0>
  RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));
     854:	8e ee       	ldi	r24, 0xEE	; 238
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	6a ef       	ldi	r22, 0xFA	; 250
     85a:	71 e0       	ldi	r23, 0x01	; 1
     85c:	bd dc       	rcall	.-1670   	; 0x1d8 <RingBuffer_InitBuffer.clone.0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     85e:	78 94       	sei

//   LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
  GlobalInterruptEnable();

  touchpad_init(); // you need to call this to setup the I/O pin!
     860:	fd dd       	rcall	.-1030   	; 0x45c <touchpad_init>
     862:	8f ef       	ldi	r24, 0xFF	; 255
     864:	99 e6       	ldi	r25, 0x69	; 105
     866:	a8 e1       	ldi	r26, 0x18	; 24
     868:	81 50       	subi	r24, 0x01	; 1
     86a:	90 40       	sbci	r25, 0x00	; 0
     86c:	a0 40       	sbci	r26, 0x00	; 0
     86e:	e1 f7       	brne	.-8      	; 0x868 <main+0x40>
     870:	00 c0       	rjmp	.+0      	; 0x872 <main+0x4a>
     872:	00 00       	nop
  _delay_ms(500);
  sei();
     874:	78 94       	sei
  //   -------------------------
  //   | left  |  down | right |
  //   -------------------------

//   uart_puts("you selected the keypad demo modus:\n\r");
  touchpad_set_abs_mode(); // keypad functionality uses the "absolute mode"
     876:	03 de       	rcall	.-1018   	; 0x47e <touchpad_set_abs_mode>
  // end of keypad mode demo block
// 
// #elif DEMO_MODE == ABSOLUTE_MODE
  // begin of keypad mode demo block
//   uart_puts("you selected the absolute position demo modus:\n\r");
  touchpad_set_abs_mode();// tell the touchpad you want to use it in the "absolute mode"
     878:	02 de       	rcall	.-1020   	; 0x47e <touchpad_set_abs_mode>
  }
  // end of absolute mode demo block 
// 
// #elif DEMO_MODE == RELATIVE_MODE
//   begin of relative mode demo block
  uart_puts("you selected the relative position demo modus:\n\r");
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	59 df       	rcall	.-334    	; 0x732 <uart_puts>
  touchpad_set_rel_mode_100dpi();// use touchpad in relative mode
     880:	1c de       	rcall	.-968    	; 0x4ba <touchpad_set_rel_mode_100dpi>
//  touchpad_set_rel_mode_200dpi(); // uncomment this line if you want double resolution
  uint8_t x, y = 0;
     882:	dd 24       	eor	r13, r13
    } else {
      y = (y + dy);
    }

    uart_puts("x_pos: ");
    my_uitoa(x, stringbuffer, 4);
     884:	8e 01       	movw	r16, r28
     886:	0f 5f       	subi	r16, 0xFF	; 255
     888:	1f 4f       	sbci	r17, 0xFF	; 255
// #elif DEMO_MODE == RELATIVE_MODE
//   begin of relative mode demo block
  uart_puts("you selected the relative position demo modus:\n\r");
  touchpad_set_rel_mode_100dpi();// use touchpad in relative mode
//  touchpad_set_rel_mode_200dpi(); // uncomment this line if you want double resolution
  uint8_t x, y = 0;
     88a:	ee 24       	eor	r14, r14
     88c:	ff 24       	eor	r15, r15
  int8_t dx, dy = 0;

  while (1) {

    Usb2SerialTask();
     88e:	49 de       	rcall	.-878    	; 0x522 <Usb2SerialTask>
    loopcounter++;
     890:	08 94       	sec
     892:	e1 1c       	adc	r14, r1
     894:	f1 1c       	adc	r15, r1
    if(loopcounter<2000) {
     896:	90 ed       	ldi	r25, 0xD0	; 208
     898:	e9 16       	cp	r14, r25
     89a:	97 e0       	ldi	r25, 0x07	; 7
     89c:	f9 06       	cpc	r15, r25
     89e:	b9 f7       	brne	.-18     	; 0x88e <main+0x66>
      continue;
    }
    loopcounter=0;

    touchpad_read(); // read data from touchpad
     8a0:	e5 dd       	rcall	.-1078   	; 0x46c <touchpad_read>

    dx = delta_x();// returns the amount your finger has moved in x direction since last readout
     8a2:	2f de       	rcall	.-930    	; 0x502 <delta_x>
     8a4:	e8 2e       	mov	r14, r24
    dy = delta_y();// returns the amount your finger has moved in y direction since last readout
     8a6:	1d de       	rcall	.-966    	; 0x4e2 <delta_y>

    // increment/decrement some dummy variables with the
    if (x + dx > 255) {
     8a8:	2e 2d       	mov	r18, r14
     8aa:	33 27       	eor	r19, r19
     8ac:	27 fd       	sbrc	r18, 7
     8ae:	30 95       	com	r19
     8b0:	2c 0d       	add	r18, r12
     8b2:	31 1d       	adc	r19, r1
     8b4:	2f 3f       	cpi	r18, 0xFF	; 255
     8b6:	31 05       	cpc	r19, r1
     8b8:	09 f0       	breq	.+2      	; 0x8bc <main+0x94>
     8ba:	24 f4       	brge	.+8      	; 0x8c4 <main+0x9c>
      x = 255;
    } else if (x + dx < 0) {
     8bc:	37 fd       	sbrc	r19, 7
     8be:	05 c0       	rjmp	.+10     	; 0x8ca <main+0xa2>
      x = 0;
    } else {
      x = (x + dx);
     8c0:	ce 0c       	add	r12, r14
     8c2:	04 c0       	rjmp	.+8      	; 0x8cc <main+0xa4>
    dx = delta_x();// returns the amount your finger has moved in x direction since last readout
    dy = delta_y();// returns the amount your finger has moved in y direction since last readout

    // increment/decrement some dummy variables with the
    if (x + dx > 255) {
      x = 255;
     8c4:	cc 24       	eor	r12, r12
     8c6:	ca 94       	dec	r12
     8c8:	01 c0       	rjmp	.+2      	; 0x8cc <main+0xa4>
    } else if (x + dx < 0) {
      x = 0;
     8ca:	cc 24       	eor	r12, r12
    } else {
      x = (x + dx);
    }

    if (y + dy > 255) {
     8cc:	28 2f       	mov	r18, r24
     8ce:	33 27       	eor	r19, r19
     8d0:	27 fd       	sbrc	r18, 7
     8d2:	30 95       	com	r19
     8d4:	2d 0d       	add	r18, r13
     8d6:	31 1d       	adc	r19, r1
     8d8:	2f 3f       	cpi	r18, 0xFF	; 255
     8da:	31 05       	cpc	r19, r1
     8dc:	09 f0       	breq	.+2      	; 0x8e0 <main+0xb8>
     8de:	24 f4       	brge	.+8      	; 0x8e8 <main+0xc0>
      y = 255;
    } else if (y + dy < 0) {
     8e0:	37 fd       	sbrc	r19, 7
     8e2:	05 c0       	rjmp	.+10     	; 0x8ee <main+0xc6>
      y = 0;
    } else {
      y = (y + dy);
     8e4:	d8 0e       	add	r13, r24
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <main+0xc8>
    } else {
      x = (x + dx);
    }

    if (y + dy > 255) {
      y = 255;
     8e8:	dd 24       	eor	r13, r13
     8ea:	da 94       	dec	r13
     8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <main+0xc8>
    } else if (y + dy < 0) {
      y = 0;
     8ee:	dd 24       	eor	r13, r13
    } else {
      y = (y + dy);
    }

    uart_puts("x_pos: ");
     8f0:	81 e3       	ldi	r24, 0x31	; 49
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	1e df       	rcall	.-452    	; 0x732 <uart_puts>
    my_uitoa(x, stringbuffer, 4);
     8f6:	6c 2d       	mov	r22, r12
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	a8 01       	movw	r20, r16
     900:	24 e0       	ldi	r18, 0x04	; 4
     902:	2a df       	rcall	.-428    	; 0x758 <my_uitoa>
    uart_puts(stringbuffer);
     904:	c8 01       	movw	r24, r16
     906:	15 df       	rcall	.-470    	; 0x732 <uart_puts>
    uart_puts("  y_pos: ");
     908:	89 e3       	ldi	r24, 0x39	; 57
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	12 df       	rcall	.-476    	; 0x732 <uart_puts>
    my_uitoa(y, stringbuffer, 4);
     90e:	6d 2d       	mov	r22, r13
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a8 01       	movw	r20, r16
     918:	24 e0       	ldi	r18, 0x04	; 4
     91a:	1e df       	rcall	.-452    	; 0x758 <my_uitoa>
    uart_puts(stringbuffer);
     91c:	c8 01       	movw	r24, r16
     91e:	09 df       	rcall	.-494    	; 0x732 <uart_puts>
    uart_puts("\r");
     920:	83 e4       	ldi	r24, 0x43	; 67
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	06 df       	rcall	.-500    	; 0x732 <uart_puts>
     926:	b1 cf       	rjmp	.-158    	; 0x88a <main+0x62>

00000928 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     928:	92 30       	cpi	r25, 0x02	; 2
     92a:	29 f0       	breq	.+10     	; 0x936 <CALLBACK_USB_GetDescriptor+0xe>
     92c:	93 30       	cpi	r25, 0x03	; 3
     92e:	41 f0       	breq	.+16     	; 0x940 <CALLBACK_USB_GetDescriptor+0x18>
     930:	91 30       	cpi	r25, 0x01	; 1
     932:	e9 f4       	brne	.+58     	; 0x96e <CALLBACK_USB_GetDescriptor+0x46>
     934:	17 c0       	rjmp	.+46     	; 0x964 <CALLBACK_USB_GetDescriptor+0x3c>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     936:	2e e3       	ldi	r18, 0x3E	; 62
     938:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
     93a:	ea ea       	ldi	r30, 0xAA	; 170
     93c:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     93e:	1b c0       	rjmp	.+54     	; 0x976 <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String:
			switch (DescriptorNumber)
     940:	81 30       	cpi	r24, 0x01	; 1
     942:	41 f0       	breq	.+16     	; 0x954 <CALLBACK_USB_GetDescriptor+0x2c>
     944:	81 30       	cpi	r24, 0x01	; 1
     946:	18 f0       	brcs	.+6      	; 0x94e <CALLBACK_USB_GetDescriptor+0x26>
     948:	82 30       	cpi	r24, 0x02	; 2
     94a:	89 f4       	brne	.+34     	; 0x96e <CALLBACK_USB_GetDescriptor+0x46>
     94c:	06 c0       	rjmp	.+12     	; 0x95a <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     94e:	e8 ee       	ldi	r30, 0xE8	; 232
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	05 c0       	rjmp	.+10     	; 0x95e <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     954:	ec ee       	ldi	r30, 0xEC	; 236
     956:	f0 e0       	ldi	r31, 0x00	; 0
     958:	02 c0       	rjmp	.+4      	; 0x95e <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     95a:	e6 e0       	ldi	r30, 0x06	; 6
     95c:	f1 e0       	ldi	r31, 0x01	; 1
     95e:	24 91       	lpm	r18, Z+
     960:	30 e0       	ldi	r19, 0x00	; 0
					break;
     962:	09 c0       	rjmp	.+18     	; 0x976 <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     964:	22 e1       	ldi	r18, 0x12	; 18
     966:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
     968:	e8 e9       	ldi	r30, 0x98	; 152
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	04 c0       	rjmp	.+8      	; 0x976 <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
     972:	e0 e0       	ldi	r30, 0x00	; 0
     974:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     976:	da 01       	movw	r26, r20
     978:	11 96       	adiw	r26, 0x01	; 1
     97a:	fc 93       	st	X, r31
     97c:	ee 93       	st	-X, r30
	return Size;
}
     97e:	c9 01       	movw	r24, r18
     980:	08 95       	ret

00000982 <Endpoint_Write_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     982:	28 2f       	mov	r18, r24
     984:	39 2f       	mov	r19, r25
     986:	f9 01       	movw	r30, r18
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     988:	80 91 94 02 	lds	r24, 0x0294
     98c:	90 91 95 02 	lds	r25, 0x0295
     990:	86 17       	cp	r24, r22
     992:	97 07       	cpc	r25, r23
     994:	18 f4       	brcc	.+6      	; 0x99c <Endpoint_Write_Control_Stream_LE+0x1a>
     996:	bc 01       	movw	r22, r24
     998:	20 e0       	ldi	r18, 0x00	; 0
     99a:	34 c0       	rjmp	.+104    	; 0xa04 <Endpoint_Write_Control_Stream_LE+0x82>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     99c:	61 15       	cp	r22, r1
     99e:	71 05       	cpc	r23, r1
     9a0:	d9 f7       	brne	.-10     	; 0x998 <Endpoint_Write_Control_Stream_LE+0x16>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9a2:	80 91 e8 00 	lds	r24, 0x00E8
     9a6:	8e 77       	andi	r24, 0x7E	; 126
     9a8:	80 93 e8 00 	sts	0x00E8, r24
     9ac:	f5 cf       	rjmp	.-22     	; 0x998 <Endpoint_Write_Control_Stream_LE+0x16>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     9ae:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     9b0:	88 23       	and	r24, r24
     9b2:	e9 f1       	breq	.+122    	; 0xa2e <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     9b4:	85 30       	cpi	r24, 0x05	; 5
     9b6:	b9 f1       	breq	.+110    	; 0xa26 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     9b8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     9bc:	83 fd       	sbrc	r24, 3
     9be:	35 c0       	rjmp	.+106    	; 0xa2a <Endpoint_Write_Control_Stream_LE+0xa8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     9c0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     9c4:	82 fd       	sbrc	r24, 2
     9c6:	29 c0       	rjmp	.+82     	; 0xa1a <Endpoint_Write_Control_Stream_LE+0x98>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     9c8:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     9cc:	80 ff       	sbrs	r24, 0
     9ce:	1a c0       	rjmp	.+52     	; 0xa04 <Endpoint_Write_Control_Stream_LE+0x82>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     9d0:	80 91 f2 00 	lds	r24, 0x00F2
     9d4:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     9d6:	06 c0       	rjmp	.+12     	; 0x9e4 <Endpoint_Write_Control_Stream_LE+0x62>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     9d8:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     9da:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     9de:	61 50       	subi	r22, 0x01	; 1
     9e0:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     9e2:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     9e4:	61 15       	cp	r22, r1
     9e6:	71 05       	cpc	r23, r1
     9e8:	19 f0       	breq	.+6      	; 0x9f0 <Endpoint_Write_Control_Stream_LE+0x6e>
     9ea:	88 30       	cpi	r24, 0x08	; 8
     9ec:	91 05       	cpc	r25, r1
     9ee:	a0 f3       	brcs	.-24     	; 0x9d8 <Endpoint_Write_Control_Stream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     9f0:	21 e0       	ldi	r18, 0x01	; 1
     9f2:	88 30       	cpi	r24, 0x08	; 8
     9f4:	91 05       	cpc	r25, r1
     9f6:	09 f0       	breq	.+2      	; 0x9fa <Endpoint_Write_Control_Stream_LE+0x78>
     9f8:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     9fa:	80 91 e8 00 	lds	r24, 0x00E8
     9fe:	8e 77       	andi	r24, 0x7E	; 126
     a00:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     a04:	61 15       	cp	r22, r1
     a06:	71 05       	cpc	r23, r1
     a08:	91 f6       	brne	.-92     	; 0x9ae <Endpoint_Write_Control_Stream_LE+0x2c>
     a0a:	22 23       	and	r18, r18
     a0c:	81 f6       	brne	.-96     	; 0x9ae <Endpoint_Write_Control_Stream_LE+0x2c>
     a0e:	05 c0       	rjmp	.+10     	; 0xa1a <Endpoint_Write_Control_Stream_LE+0x98>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a10:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a12:	88 23       	and	r24, r24
     a14:	61 f0       	breq	.+24     	; 0xa2e <Endpoint_Write_Control_Stream_LE+0xac>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a16:	85 30       	cpi	r24, 0x05	; 5
     a18:	61 f0       	breq	.+24     	; 0xa32 <Endpoint_Write_Control_Stream_LE+0xb0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a1a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     a1e:	82 ff       	sbrs	r24, 2
     a20:	f7 cf       	rjmp	.-18     	; 0xa10 <Endpoint_Write_Control_Stream_LE+0x8e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     a26:	83 e0       	ldi	r24, 0x03	; 3
     a28:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     a2e:	82 e0       	ldi	r24, 0x02	; 2
     a30:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     a32:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     a34:	08 95       	ret

00000a36 <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     a36:	e8 2f       	mov	r30, r24
     a38:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     a3a:	80 91 94 02 	lds	r24, 0x0294
     a3e:	90 91 95 02 	lds	r25, 0x0295
     a42:	86 17       	cp	r24, r22
     a44:	97 07       	cpc	r25, r23
     a46:	18 f4       	brcc	.+6      	; 0xa4e <Endpoint_Write_Control_PStream_LE+0x18>
     a48:	bc 01       	movw	r22, r24
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	36 c0       	rjmp	.+108    	; 0xaba <Endpoint_Write_Control_PStream_LE+0x84>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     a4e:	61 15       	cp	r22, r1
     a50:	71 05       	cpc	r23, r1
     a52:	d9 f7       	brne	.-10     	; 0xa4a <Endpoint_Write_Control_PStream_LE+0x14>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a54:	80 91 e8 00 	lds	r24, 0x00E8
     a58:	8e 77       	andi	r24, 0x7E	; 126
     a5a:	80 93 e8 00 	sts	0x00E8, r24
     a5e:	f5 cf       	rjmp	.-22     	; 0xa4a <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a60:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a62:	88 23       	and	r24, r24
     a64:	09 f4       	brne	.+2      	; 0xa68 <Endpoint_Write_Control_PStream_LE+0x32>
     a66:	3e c0       	rjmp	.+124    	; 0xae4 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a68:	85 30       	cpi	r24, 0x05	; 5
     a6a:	c1 f1       	breq	.+112    	; 0xadc <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a6c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a70:	83 fd       	sbrc	r24, 3
     a72:	36 c0       	rjmp	.+108    	; 0xae0 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a74:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     a78:	82 fd       	sbrc	r24, 2
     a7a:	2a c0       	rjmp	.+84     	; 0xad0 <Endpoint_Write_Control_PStream_LE+0x9a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a7c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     a80:	80 ff       	sbrs	r24, 0
     a82:	1b c0       	rjmp	.+54     	; 0xaba <Endpoint_Write_Control_PStream_LE+0x84>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
     a84:	80 91 f2 00 	lds	r24, 0x00F2
     a88:	90 e0       	ldi	r25, 0x00	; 0
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a8a:	07 c0       	rjmp	.+14     	; 0xa9a <Endpoint_Write_Control_PStream_LE+0x64>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     a8c:	24 91       	lpm	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a8e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     a92:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     a94:	61 50       	subi	r22, 0x01	; 1
     a96:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
     a98:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a9a:	61 15       	cp	r22, r1
     a9c:	71 05       	cpc	r23, r1
     a9e:	19 f0       	breq	.+6      	; 0xaa6 <Endpoint_Write_Control_PStream_LE+0x70>
     aa0:	88 30       	cpi	r24, 0x08	; 8
     aa2:	91 05       	cpc	r25, r1
     aa4:	98 f3       	brcs	.-26     	; 0xa8c <Endpoint_Write_Control_PStream_LE+0x56>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     aa6:	21 e0       	ldi	r18, 0x01	; 1
     aa8:	88 30       	cpi	r24, 0x08	; 8
     aaa:	91 05       	cpc	r25, r1
     aac:	09 f0       	breq	.+2      	; 0xab0 <Endpoint_Write_Control_PStream_LE+0x7a>
     aae:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     ab0:	80 91 e8 00 	lds	r24, 0x00E8
     ab4:	8e 77       	andi	r24, 0x7E	; 126
     ab6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     aba:	61 15       	cp	r22, r1
     abc:	71 05       	cpc	r23, r1
     abe:	81 f6       	brne	.-96     	; 0xa60 <Endpoint_Write_Control_PStream_LE+0x2a>
     ac0:	22 23       	and	r18, r18
     ac2:	71 f6       	brne	.-100    	; 0xa60 <Endpoint_Write_Control_PStream_LE+0x2a>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <Endpoint_Write_Control_PStream_LE+0x9a>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ac6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ac8:	88 23       	and	r24, r24
     aca:	61 f0       	breq	.+24     	; 0xae4 <Endpoint_Write_Control_PStream_LE+0xae>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     acc:	85 30       	cpi	r24, 0x05	; 5
     ace:	61 f0       	breq	.+24     	; 0xae8 <Endpoint_Write_Control_PStream_LE+0xb2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     ad0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     ad4:	82 ff       	sbrs	r24, 2
     ad6:	f7 cf       	rjmp	.-18     	; 0xac6 <Endpoint_Write_Control_PStream_LE+0x90>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     adc:	83 e0       	ldi	r24, 0x03	; 3
     ade:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     ae8:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     aea:	08 95       	ret

00000aec <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     aec:	98 2f       	mov	r25, r24
     aee:	2c c0       	rjmp	.+88     	; 0xb48 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     af0:	29 2f       	mov	r18, r25
     af2:	2f 70       	andi	r18, 0x0F	; 15
     af4:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     af8:	98 17       	cp	r25, r24
     afa:	39 f0       	breq	.+14     	; 0xb0a <Endpoint_ConfigureEndpoint_Prv+0x1e>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     afc:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     b00:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
     b04:	50 91 f0 00 	lds	r21, 0x00F0
     b08:	03 c0       	rjmp	.+6      	; 0xb10 <Endpoint_ConfigureEndpoint_Prv+0x24>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
     b0a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
     b0c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
     b0e:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     b10:	21 ff       	sbrs	r18, 1
     b12:	19 c0       	rjmp	.+50     	; 0xb46 <Endpoint_ConfigureEndpoint_Prv+0x5a>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     b14:	30 91 eb 00 	lds	r19, 0x00EB
     b18:	3e 7f       	andi	r19, 0xFE	; 254
     b1a:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     b1e:	30 91 ed 00 	lds	r19, 0x00ED
     b22:	3d 7f       	andi	r19, 0xFD	; 253
     b24:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     b28:	30 91 eb 00 	lds	r19, 0x00EB
     b2c:	31 60       	ori	r19, 0x01	; 1
     b2e:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     b32:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     b36:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
     b3a:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     b3e:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
     b42:	27 ff       	sbrs	r18, 7
     b44:	08 c0       	rjmp	.+16     	; 0xb56 <Endpoint_ConfigureEndpoint_Prv+0x6a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     b46:	9f 5f       	subi	r25, 0xFF	; 255
     b48:	95 30       	cpi	r25, 0x05	; 5
     b4a:	90 f2       	brcs	.-92     	; 0xaf0 <Endpoint_ConfigureEndpoint_Prv+0x4>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b4c:	8f 70       	andi	r24, 0x0F	; 15
     b4e:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
     b56:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     b58:	08 95       	ret

00000b5a <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     b5a:	ef 92       	push	r14
     b5c:	ff 92       	push	r15
     b5e:	0f 93       	push	r16
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
     b66:	16 2f       	mov	r17, r22
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     b68:	e8 2e       	mov	r14, r24
     b6a:	e7 01       	movw	r28, r14
     b6c:	7e 01       	movw	r14, r28
     b6e:	f9 2e       	mov	r15, r25
     b70:	e7 01       	movw	r28, r14
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     b72:	00 e0       	ldi	r16, 0x00	; 0
     b74:	2a c0       	rjmp	.+84     	; 0xbca <Endpoint_ConfigureEndpointTable+0x70>
	{
		if (!(Table[i].Address))
     b76:	98 81       	ld	r25, Y
     b78:	99 23       	and	r25, r25
     b7a:	29 f1       	breq	.+74     	; 0xbc6 <Endpoint_ConfigureEndpointTable+0x6c>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     b7c:	6b 81       	ldd	r22, Y+3	; 0x03
     b7e:	e9 81       	ldd	r30, Y+1	; 0x01
     b80:	fa 81       	ldd	r31, Y+2	; 0x02
     b82:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     b84:	89 2f       	mov	r24, r25
     b86:	8f 70       	andi	r24, 0x0F	; 15

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     b88:	85 30       	cpi	r24, 0x05	; 5
     b8a:	18 f5       	brcc	.+70     	; 0xbd2 <Endpoint_ConfigureEndpointTable+0x78>
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
				                                      ((Type << EPTYPE0) | ((Address & ENDPOINT_DIR_IN) ? (1 << EPDIR) : 0)),
     b8c:	62 95       	swap	r22
     b8e:	66 0f       	add	r22, r22
     b90:	66 0f       	add	r22, r22
     b92:	60 7c       	andi	r22, 0xC0	; 192
     b94:	99 1f       	adc	r25, r25
     b96:	99 27       	eor	r25, r25
     b98:	99 1f       	adc	r25, r25
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     b9a:	69 2b       	or	r22, r25
     b9c:	22 30       	cpi	r18, 0x02	; 2
     b9e:	10 f0       	brcs	.+4      	; 0xba4 <Endpoint_ConfigureEndpointTable+0x4a>
     ba0:	96 e0       	ldi	r25, 0x06	; 6
     ba2:	01 c0       	rjmp	.+2      	; 0xba6 <Endpoint_ConfigureEndpointTable+0x4c>
     ba4:	92 e0       	ldi	r25, 0x02	; 2
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
     ba6:	28 e0       	ldi	r18, 0x08	; 8
     ba8:	30 e0       	ldi	r19, 0x00	; 0
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST
			                                                                       ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	03 c0       	rjmp	.+6      	; 0xbb4 <Endpoint_ConfigureEndpointTable+0x5a>
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     bae:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     bb0:	22 0f       	add	r18, r18
     bb2:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     bb4:	2e 17       	cp	r18, r30
     bb6:	3f 07       	cpc	r19, r31
     bb8:	d0 f3       	brcs	.-12     	; 0xbae <Endpoint_ConfigureEndpointTable+0x54>
				{
					MaskVal++;
					CheckBytes <<= 1;
				}

				return (MaskVal << EPSIZE0);
     bba:	42 95       	swap	r20
     bbc:	40 7f       	andi	r20, 0xF0	; 240
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     bbe:	49 2b       	or	r20, r25
     bc0:	95 df       	rcall	.-214    	; 0xaec <Endpoint_ConfigureEndpoint_Prv>
     bc2:	88 23       	and	r24, r24
     bc4:	31 f0       	breq	.+12     	; 0xbd2 <Endpoint_ConfigureEndpointTable+0x78>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     bc6:	0f 5f       	subi	r16, 0xFF	; 255
     bc8:	25 96       	adiw	r28, 0x05	; 5
     bca:	01 17       	cp	r16, r17
     bcc:	a0 f2       	brcs	.-88     	; 0xb76 <Endpoint_ConfigureEndpointTable+0x1c>
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <Endpoint_ConfigureEndpointTable+0x7a>
	{
		if (!(Table[i].Address))
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
     bd2:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return true;
}
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	08 95       	ret

00000be2 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     be2:	80 91 8e 02 	lds	r24, 0x028E
     be6:	87 ff       	sbrs	r24, 7
     be8:	11 c0       	rjmp	.+34     	; 0xc0c <Endpoint_ClearStatusStage+0x2a>
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     bec:	8e b3       	in	r24, 0x1e	; 30
     bee:	88 23       	and	r24, r24
     bf0:	b1 f0       	breq	.+44     	; 0xc1e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     bf2:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     bf6:	82 ff       	sbrs	r24, 2
     bf8:	f9 cf       	rjmp	.-14     	; 0xbec <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     bfa:	80 91 e8 00 	lds	r24, 0x00E8
     bfe:	8b 77       	andi	r24, 0x7B	; 123
     c00:	80 93 e8 00 	sts	0x00E8, r24
     c04:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     c06:	8e b3       	in	r24, 0x1e	; 30
     c08:	88 23       	and	r24, r24
     c0a:	49 f0       	breq	.+18     	; 0xc1e <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c0c:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     c10:	80 ff       	sbrs	r24, 0
     c12:	f9 cf       	rjmp	.-14     	; 0xc06 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     c14:	80 91 e8 00 	lds	r24, 0x00E8
     c18:	8e 77       	andi	r24, 0x7E	; 126
     c1a:	80 93 e8 00 	sts	0x00E8, r24
     c1e:	08 95       	ret

00000c20 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     c20:	80 91 e4 00 	lds	r24, 0x00E4
     c24:	90 91 e5 00 	lds	r25, 0x00E5

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
     c28:	44 e6       	ldi	r20, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     c2a:	20 91 ec 00 	lds	r18, 0x00EC
     c2e:	20 ff       	sbrs	r18, 0
     c30:	25 c0       	rjmp	.+74     	; 0xc7c <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     c32:	20 91 e8 00 	lds	r18, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     c36:	20 fd       	sbrc	r18, 0
     c38:	15 c0       	rjmp	.+42     	; 0xc64 <Endpoint_WaitUntilReady+0x44>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     c3a:	2e b3       	in	r18, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     c3c:	22 23       	and	r18, r18
     c3e:	a1 f0       	breq	.+40     	; 0xc68 <Endpoint_WaitUntilReady+0x48>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     c40:	25 30       	cpi	r18, 0x05	; 5
     c42:	a1 f0       	breq	.+40     	; 0xc6c <Endpoint_WaitUntilReady+0x4c>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c44:	20 91 eb 00 	lds	r18, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     c48:	25 fd       	sbrc	r18, 5
     c4a:	12 c0       	rjmp	.+36     	; 0xc70 <Endpoint_WaitUntilReady+0x50>
     c4c:	20 91 e4 00 	lds	r18, 0x00E4
     c50:	30 91 e5 00 	lds	r19, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     c54:	28 17       	cp	r18, r24
     c56:	39 07       	cpc	r19, r25
     c58:	41 f3       	breq	.-48     	; 0xc2a <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     c5a:	44 23       	and	r20, r20
     c5c:	59 f0       	breq	.+22     	; 0xc74 <Endpoint_WaitUntilReady+0x54>
     c5e:	41 50       	subi	r20, 0x01	; 1
     c60:	c9 01       	movw	r24, r18
     c62:	e3 cf       	rjmp	.-58     	; 0xc2a <Endpoint_WaitUntilReady+0xa>
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     c68:	82 e0       	ldi	r24, 0x02	; 2
     c6a:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
     c6c:	83 e0       	ldi	r24, 0x03	; 3
     c6e:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	08 95       	ret
		if (CurrentFrameNumber != PreviousFrameNumber)
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
     c74:	84 e0       	ldi	r24, 0x04	; 4
     c76:	08 95       	ret
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
     c78:	80 e0       	ldi	r24, 0x00	; 0

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     c7a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     c7c:	20 91 e8 00 	lds	r18, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     c80:	22 ff       	sbrs	r18, 2
     c82:	db cf       	rjmp	.-74     	; 0xc3a <Endpoint_WaitUntilReady+0x1a>
     c84:	f9 cf       	rjmp	.-14     	; 0xc78 <Endpoint_WaitUntilReady+0x58>

00000c86 <USB_ResetInterface>:
{
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     c86:	40 d0       	rcall	.+128    	; 0xd08 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     c88:	42 d0       	rcall	.+132    	; 0xd0e <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     c8a:	80 91 d8 00 	lds	r24, 0x00D8
     c8e:	8f 77       	andi	r24, 0x7F	; 127
     c90:	80 93 d8 00 	sts	0x00D8, r24
				USBCON |=  (1 << USBE);
     c94:	80 91 d8 00 	lds	r24, 0x00D8
     c98:	80 68       	ori	r24, 0x80	; 128
     c9a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     c9e:	80 91 d8 00 	lds	r24, 0x00D8
     ca2:	8f 7d       	andi	r24, 0xDF	; 223
     ca4:	80 93 d8 00 	sts	0x00D8, r24

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     ca8:	84 e0       	ldi	r24, 0x04	; 4
     caa:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     cac:	86 e0       	ldi	r24, 0x06	; 6
     cae:	89 bd       	out	0x29, r24	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			#if defined(USB_SERIES_2_AVR)
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     cb0:	09 b4       	in	r0, 0x29	; 41
     cb2:	00 fe       	sbrs	r0, 0
     cb4:	fd cf       	rjmp	.-6      	; 0xcb0 <USB_ResetInterface+0x2a>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     cb6:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     cb8:	10 92 8a 02 	sts	0x028A, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     cbc:	10 92 8c 02 	sts	0x028C, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     cc0:	10 92 8b 02 	sts	0x028B, r1
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	42 e0       	ldi	r20, 0x02	; 2
     cca:	10 df       	rcall	.-480    	; 0xaec <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     ccc:	80 91 e1 00 	lds	r24, 0x00E1
     cd0:	8e 7f       	andi	r24, 0xFE	; 254
     cd2:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     cd6:	80 91 e2 00 	lds	r24, 0x00E2
     cda:	81 60       	ori	r24, 0x01	; 1
     cdc:	80 93 e2 00 	sts	0x00E2, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     ce0:	80 91 e2 00 	lds	r24, 0x00E2
     ce4:	88 60       	ori	r24, 0x08	; 8
     ce6:	80 93 e2 00 	sts	0x00E2, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     cea:	80 91 e0 00 	lds	r24, 0x00E0
     cee:	8e 7f       	andi	r24, 0xFE	; 254
     cf0:	80 93 e0 00 	sts	0x00E0, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     cf4:	08 95       	ret

00000cf6 <USB_Init>:
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
			#else
				REGCR  &= ~(1 << REGDIS);
     cf6:	e3 e6       	ldi	r30, 0x63	; 99
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	80 81       	ld	r24, Z
     cfc:	8e 7f       	andi	r24, 0xFE	; 254
     cfe:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	80 93 8d 02 	sts	0x028D, r24

	USB_ResetInterface();
}
     d06:	bf cf       	rjmp	.-130    	; 0xc86 <USB_ResetInterface>

00000d08 <USB_INT_DisableAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     d08:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     d0c:	08 95       	ret

00000d0e <USB_INT_ClearAllInterrupts>:
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     d0e:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     d12:	08 95       	ret

00000d14 <__vector_11>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     d14:	1f 92       	push	r1
     d16:	0f 92       	push	r0
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	0f 92       	push	r0
     d1c:	11 24       	eor	r1, r1
     d1e:	2f 93       	push	r18
     d20:	3f 93       	push	r19
     d22:	4f 93       	push	r20
     d24:	5f 93       	push	r21
     d26:	6f 93       	push	r22
     d28:	7f 93       	push	r23
     d2a:	8f 93       	push	r24
     d2c:	9f 93       	push	r25
     d2e:	af 93       	push	r26
     d30:	bf 93       	push	r27
     d32:	ef 93       	push	r30
     d34:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     d36:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     d3a:	82 ff       	sbrs	r24, 2
     d3c:	0a c0       	rjmp	.+20     	; 0xd52 <__vector_11+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     d3e:	80 91 e2 00 	lds	r24, 0x00E2
     d42:	82 ff       	sbrs	r24, 2
     d44:	06 c0       	rjmp	.+12     	; 0xd52 <__vector_11+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     d46:	80 91 e1 00 	lds	r24, 0x00E1
     d4a:	8b 7f       	andi	r24, 0xFB	; 251
     d4c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     d50:	21 d2       	rcall	.+1090   	; 0x1194 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     d52:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     d56:	80 ff       	sbrs	r24, 0
     d58:	16 c0       	rjmp	.+44     	; 0xd86 <__vector_11+0x72>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     d5a:	80 91 e2 00 	lds	r24, 0x00E2
     d5e:	80 ff       	sbrs	r24, 0
     d60:	12 c0       	rjmp	.+36     	; 0xd86 <__vector_11+0x72>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     d62:	80 91 e2 00 	lds	r24, 0x00E2
     d66:	8e 7f       	andi	r24, 0xFE	; 254
     d68:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     d6c:	80 91 e2 00 	lds	r24, 0x00E2
     d70:	80 61       	ori	r24, 0x10	; 16
     d72:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     d76:	80 91 d8 00 	lds	r24, 0x00D8
     d7a:	80 62       	ori	r24, 0x20	; 32
     d7c:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     d80:	19 bc       	out	0x29, r1	; 41

		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
     d82:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
     d84:	3d dc       	rcall	.-1926   	; 0x600 <EVENT_USB_Device_Disconnect>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     d86:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     d8a:	84 ff       	sbrs	r24, 4
     d8c:	2c c0       	rjmp	.+88     	; 0xde6 <__vector_11+0xd2>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     d8e:	80 91 e2 00 	lds	r24, 0x00E2
     d92:	84 ff       	sbrs	r24, 4
     d94:	28 c0       	rjmp	.+80     	; 0xde6 <__vector_11+0xd2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     d96:	84 e0       	ldi	r24, 0x04	; 4
     d98:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     d9a:	86 e0       	ldi	r24, 0x06	; 6
     d9c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     d9e:	09 b4       	in	r0, 0x29	; 41
     da0:	00 fe       	sbrs	r0, 0
     da2:	fd cf       	rjmp	.-6      	; 0xd9e <__vector_11+0x8a>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     da4:	80 91 d8 00 	lds	r24, 0x00D8
     da8:	8f 7d       	andi	r24, 0xDF	; 223
     daa:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     dae:	80 91 e1 00 	lds	r24, 0x00E1
     db2:	8f 7e       	andi	r24, 0xEF	; 239
     db4:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     db8:	80 91 e2 00 	lds	r24, 0x00E2
     dbc:	8f 7e       	andi	r24, 0xEF	; 239
     dbe:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     dc2:	80 91 e2 00 	lds	r24, 0x00E2
     dc6:	81 60       	ori	r24, 0x01	; 1
     dc8:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     dcc:	80 91 8a 02 	lds	r24, 0x028A
     dd0:	88 23       	and	r24, r24
     dd2:	21 f4       	brne	.+8      	; 0xddc <__vector_11+0xc8>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     dd4:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     dd8:	87 ff       	sbrs	r24, 7
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <__vector_11+0xcc>
     ddc:	84 e0       	ldi	r24, 0x04	; 4
     dde:	01 c0       	rjmp	.+2      	; 0xde2 <__vector_11+0xce>
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
     de4:	0c dc       	rcall	.-2024   	; 0x5fe <EVENT_USB_Device_Connect>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     de6:	80 91 e1 00 	lds	r24, 0x00E1
		#else
		EVENT_USB_Device_WakeUp();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     dea:	83 ff       	sbrs	r24, 3
     dec:	26 c0       	rjmp	.+76     	; 0xe3a <__vector_11+0x126>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     dee:	80 91 e2 00 	lds	r24, 0x00E2
     df2:	83 ff       	sbrs	r24, 3
     df4:	22 c0       	rjmp	.+68     	; 0xe3a <__vector_11+0x126>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     df6:	80 91 e1 00 	lds	r24, 0x00E1
     dfa:	87 7f       	andi	r24, 0xF7	; 247
     dfc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     e00:	82 e0       	ldi	r24, 0x02	; 2
     e02:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
     e04:	10 92 8a 02 	sts	0x028A, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     e08:	80 91 e1 00 	lds	r24, 0x00E1
     e0c:	8e 7f       	andi	r24, 0xFE	; 254
     e0e:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     e12:	80 91 e2 00 	lds	r24, 0x00E2
     e16:	8e 7f       	andi	r24, 0xFE	; 254
     e18:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     e1c:	80 91 e2 00 	lds	r24, 0x00E2
     e20:	80 61       	ori	r24, 0x10	; 16
     e22:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	42 e0       	ldi	r20, 0x02	; 2
     e2c:	5f de       	rcall	.-834    	; 0xaec <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     e2e:	80 91 f0 00 	lds	r24, 0x00F0
     e32:	88 60       	ori	r24, 0x08	; 8
     e34:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     e38:	ad d1       	rcall	.+858    	; 0x1194 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     e3a:	ff 91       	pop	r31
     e3c:	ef 91       	pop	r30
     e3e:	bf 91       	pop	r27
     e40:	af 91       	pop	r26
     e42:	9f 91       	pop	r25
     e44:	8f 91       	pop	r24
     e46:	7f 91       	pop	r23
     e48:	6f 91       	pop	r22
     e4a:	5f 91       	pop	r21
     e4c:	4f 91       	pop	r20
     e4e:	3f 91       	pop	r19
     e50:	2f 91       	pop	r18
     e52:	0f 90       	pop	r0
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	0f 90       	pop	r0
     e58:	1f 90       	pop	r1
     e5a:	18 95       	reti

00000e5c <__vector_12>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     e5c:	1f 92       	push	r1
     e5e:	0f 92       	push	r0
     e60:	0f b6       	in	r0, 0x3f	; 63
     e62:	0f 92       	push	r0
     e64:	11 24       	eor	r1, r1
     e66:	1f 93       	push	r17
     e68:	2f 93       	push	r18
     e6a:	3f 93       	push	r19
     e6c:	4f 93       	push	r20
     e6e:	5f 93       	push	r21
     e70:	6f 93       	push	r22
     e72:	7f 93       	push	r23
     e74:	8f 93       	push	r24
     e76:	9f 93       	push	r25
     e78:	af 93       	push	r26
     e7a:	bf 93       	push	r27
     e7c:	ef 93       	push	r30
     e7e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e80:	10 91 e9 00 	lds	r17, 0x00E9
     e84:	1f 70       	andi	r17, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e86:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e8a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     e8e:	80 91 f0 00 	lds	r24, 0x00F0
     e92:	87 7f       	andi	r24, 0xF7	; 247
     e94:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     e98:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     e9a:	1b d0       	rcall	.+54     	; 0xed2 <USB_Device_ProcessControlRequest>
     e9c:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     ea0:	80 91 f0 00 	lds	r24, 0x00F0
     ea4:	88 60       	ori	r24, 0x08	; 8
     ea6:	80 93 f0 00 	sts	0x00F0, r24
     eaa:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     eae:	ff 91       	pop	r31
     eb0:	ef 91       	pop	r30
     eb2:	bf 91       	pop	r27
     eb4:	af 91       	pop	r26
     eb6:	9f 91       	pop	r25
     eb8:	8f 91       	pop	r24
     eba:	7f 91       	pop	r23
     ebc:	6f 91       	pop	r22
     ebe:	5f 91       	pop	r21
     ec0:	4f 91       	pop	r20
     ec2:	3f 91       	pop	r19
     ec4:	2f 91       	pop	r18
     ec6:	1f 91       	pop	r17
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     ed2:	1f 93       	push	r17
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	ac 97       	sbiw	r28, 0x2c	; 44
     ede:	0f b6       	in	r0, 0x3f	; 63
     ee0:	f8 94       	cli
     ee2:	de bf       	out	0x3e, r29	; 62
     ee4:	0f be       	out	0x3f, r0	; 63
     ee6:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     ee8:	ee e8       	ldi	r30, 0x8E	; 142
     eea:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     eec:	80 91 f1 00 	lds	r24, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     ef0:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     ef2:	22 e0       	ldi	r18, 0x02	; 2
     ef4:	e6 39       	cpi	r30, 0x96	; 150
     ef6:	f2 07       	cpc	r31, r18
     ef8:	c9 f7       	brne	.-14     	; 0xeec <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     efa:	86 db       	rcall	.-2292   	; 0x608 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     efc:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     f00:	83 ff       	sbrs	r24, 3
     f02:	30 c1       	rjmp	.+608    	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     f04:	80 91 8e 02 	lds	r24, 0x028E

		switch (USB_ControlRequest.bRequest)
     f08:	20 91 8f 02 	lds	r18, 0x028F
     f0c:	25 30       	cpi	r18, 0x05	; 5
     f0e:	09 f4       	brne	.+2      	; 0xf12 <USB_Device_ProcessControlRequest+0x40>
     f10:	84 c0       	rjmp	.+264    	; 0x101a <USB_Device_ProcessControlRequest+0x148>
     f12:	26 30       	cpi	r18, 0x06	; 6
     f14:	40 f4       	brcc	.+16     	; 0xf26 <USB_Device_ProcessControlRequest+0x54>
     f16:	21 30       	cpi	r18, 0x01	; 1
     f18:	a1 f1       	breq	.+104    	; 0xf82 <USB_Device_ProcessControlRequest+0xb0>
     f1a:	21 30       	cpi	r18, 0x01	; 1
     f1c:	70 f0       	brcs	.+28     	; 0xf3a <USB_Device_ProcessControlRequest+0x68>
     f1e:	23 30       	cpi	r18, 0x03	; 3
     f20:	09 f0       	breq	.+2      	; 0xf24 <USB_Device_ProcessControlRequest+0x52>
     f22:	20 c1       	rjmp	.+576    	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
     f24:	2e c0       	rjmp	.+92     	; 0xf82 <USB_Device_ProcessControlRequest+0xb0>
     f26:	28 30       	cpi	r18, 0x08	; 8
     f28:	09 f4       	brne	.+2      	; 0xf2c <USB_Device_ProcessControlRequest+0x5a>
     f2a:	ef c0       	rjmp	.+478    	; 0x110a <USB_Device_ProcessControlRequest+0x238>
     f2c:	29 30       	cpi	r18, 0x09	; 9
     f2e:	09 f4       	brne	.+2      	; 0xf32 <USB_Device_ProcessControlRequest+0x60>
     f30:	fe c0       	rjmp	.+508    	; 0x112e <USB_Device_ProcessControlRequest+0x25c>
     f32:	26 30       	cpi	r18, 0x06	; 6
     f34:	09 f0       	breq	.+2      	; 0xf38 <USB_Device_ProcessControlRequest+0x66>
     f36:	16 c1       	rjmp	.+556    	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
     f38:	92 c0       	rjmp	.+292    	; 0x105e <USB_Device_ProcessControlRequest+0x18c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f3a:	80 38       	cpi	r24, 0x80	; 128
     f3c:	21 f0       	breq	.+8      	; 0xf46 <USB_Device_ProcessControlRequest+0x74>
     f3e:	82 38       	cpi	r24, 0x82	; 130
     f40:	09 f0       	breq	.+2      	; 0xf44 <USB_Device_ProcessControlRequest+0x72>
     f42:	10 c1       	rjmp	.+544    	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
     f44:	08 c0       	rjmp	.+16     	; 0xf56 <USB_Device_ProcessControlRequest+0x84>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
     f46:	80 91 8b 02 	lds	r24, 0x028B
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     f4a:	90 91 8c 02 	lds	r25, 0x028C
     f4e:	99 23       	and	r25, r25
     f50:	71 f0       	breq	.+28     	; 0xf6e <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     f52:	82 60       	ori	r24, 0x02	; 2
     f54:	0c c0       	rjmp	.+24     	; 0xf6e <USB_Device_ProcessControlRequest+0x9c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f56:	80 91 92 02 	lds	r24, 0x0292
     f5a:	8f 70       	andi	r24, 0x0F	; 15
     f5c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     f60:	90 91 eb 00 	lds	r25, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	95 ff       	sbrs	r25, 5
     f68:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f6a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     f6e:	90 91 e8 00 	lds	r25, 0x00E8
     f72:	97 7f       	andi	r25, 0xF7	; 247
     f74:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     f78:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
     f7c:	10 92 f1 00 	sts	0x00F1, r1
     f80:	cf c0       	rjmp	.+414    	; 0x1120 <USB_Device_ProcessControlRequest+0x24e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     f82:	88 23       	and	r24, r24
     f84:	19 f0       	breq	.+6      	; 0xf8c <USB_Device_ProcessControlRequest+0xba>
     f86:	82 30       	cpi	r24, 0x02	; 2
     f88:	09 f0       	breq	.+2      	; 0xf8c <USB_Device_ProcessControlRequest+0xba>
     f8a:	ec c0       	rjmp	.+472    	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	8f 71       	andi	r24, 0x1F	; 31
     f90:	90 70       	andi	r25, 0x00	; 0
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	29 f0       	breq	.+10     	; 0xfa0 <USB_Device_ProcessControlRequest+0xce>
     f96:	82 30       	cpi	r24, 0x02	; 2
     f98:	91 05       	cpc	r25, r1
     f9a:	09 f0       	breq	.+2      	; 0xf9e <USB_Device_ProcessControlRequest+0xcc>
     f9c:	e3 c0       	rjmp	.+454    	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
     f9e:	0b c0       	rjmp	.+22     	; 0xfb6 <USB_Device_ProcessControlRequest+0xe4>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     fa0:	80 91 90 02 	lds	r24, 0x0290
     fa4:	81 30       	cpi	r24, 0x01	; 1
     fa6:	09 f0       	breq	.+2      	; 0xfaa <USB_Device_ProcessControlRequest+0xd8>
     fa8:	dd c0       	rjmp	.+442    	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     faa:	23 30       	cpi	r18, 0x03	; 3
     fac:	09 f0       	breq	.+2      	; 0xfb0 <USB_Device_ProcessControlRequest+0xde>
     fae:	80 e0       	ldi	r24, 0x00	; 0
     fb0:	80 93 8c 02 	sts	0x028C, r24
     fb4:	2c c0       	rjmp	.+88     	; 0x100e <USB_Device_ProcessControlRequest+0x13c>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     fb6:	80 91 90 02 	lds	r24, 0x0290
     fba:	88 23       	and	r24, r24
     fbc:	41 f5       	brne	.+80     	; 0x100e <USB_Device_ProcessControlRequest+0x13c>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     fbe:	20 91 92 02 	lds	r18, 0x0292
     fc2:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     fc4:	09 f4       	brne	.+2      	; 0xfc8 <USB_Device_ProcessControlRequest+0xf6>
     fc6:	ce c0       	rjmp	.+412    	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fc8:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     fcc:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     fd0:	80 ff       	sbrs	r24, 0
     fd2:	1d c0       	rjmp	.+58     	; 0x100e <USB_Device_ProcessControlRequest+0x13c>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     fd4:	80 91 8f 02 	lds	r24, 0x028F
     fd8:	83 30       	cpi	r24, 0x03	; 3
     fda:	21 f4       	brne	.+8      	; 0xfe4 <USB_Device_ProcessControlRequest+0x112>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     fdc:	80 91 eb 00 	lds	r24, 0x00EB
     fe0:	80 62       	ori	r24, 0x20	; 32
     fe2:	13 c0       	rjmp	.+38     	; 0x100a <USB_Device_ProcessControlRequest+0x138>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     fe4:	80 91 eb 00 	lds	r24, 0x00EB
     fe8:	80 61       	ori	r24, 0x10	; 16
     fea:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <USB_Device_ProcessControlRequest+0x126>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	2a 95       	dec	r18
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <USB_Device_ProcessControlRequest+0x122>
     ffc:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    1000:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1004:	80 91 eb 00 	lds	r24, 0x00EB
    1008:	88 60       	ori	r24, 0x08	; 8
    100a:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    100e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1012:	80 91 e8 00 	lds	r24, 0x00E8
    1016:	87 7f       	andi	r24, 0xF7	; 247
    1018:	86 c0       	rjmp	.+268    	; 0x1126 <USB_Device_ProcessControlRequest+0x254>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    101a:	88 23       	and	r24, r24
    101c:	09 f0       	breq	.+2      	; 0x1020 <USB_Device_ProcessControlRequest+0x14e>
    101e:	a2 c0       	rjmp	.+324    	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1020:	10 91 90 02 	lds	r17, 0x0290
    1024:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1026:	80 91 e3 00 	lds	r24, 0x00E3
    102a:	80 78       	andi	r24, 0x80	; 128
    102c:	81 2b       	or	r24, r17
    102e:	80 93 e3 00 	sts	0x00E3, r24
    1032:	80 91 e8 00 	lds	r24, 0x00E8
    1036:	87 7f       	andi	r24, 0xF7	; 247
    1038:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    103c:	d2 dd       	rcall	.-1116   	; 0xbe2 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    103e:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1042:	80 ff       	sbrs	r24, 0
    1044:	fc cf       	rjmp	.-8      	; 0x103e <USB_Device_ProcessControlRequest+0x16c>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;
				
				UDADDR |= (1 << ADDEN);
    1046:	80 91 e3 00 	lds	r24, 0x00E3
    104a:	80 68       	ori	r24, 0x80	; 128
    104c:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1050:	11 23       	and	r17, r17
    1052:	11 f0       	breq	.+4      	; 0x1058 <USB_Device_ProcessControlRequest+0x186>
    1054:	83 e0       	ldi	r24, 0x03	; 3
    1056:	01 c0       	rjmp	.+2      	; 0x105a <USB_Device_ProcessControlRequest+0x188>
    1058:	82 e0       	ldi	r24, 0x02	; 2
    105a:	8e bb       	out	0x1e, r24	; 30
    105c:	83 c0       	rjmp	.+262    	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    105e:	80 58       	subi	r24, 0x80	; 128
    1060:	82 30       	cpi	r24, 0x02	; 2
    1062:	08 f0       	brcs	.+2      	; 0x1066 <USB_Device_ProcessControlRequest+0x194>
    1064:	7f c0       	rjmp	.+254    	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1066:	80 91 90 02 	lds	r24, 0x0290
    106a:	90 91 91 02 	lds	r25, 0x0291
    106e:	23 e0       	ldi	r18, 0x03	; 3
    1070:	8c 3d       	cpi	r24, 0xDC	; 220
    1072:	92 07       	cpc	r25, r18
    1074:	91 f5       	brne	.+100    	; 0x10da <USB_Device_ProcessControlRequest+0x208>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1076:	83 e0       	ldi	r24, 0x03	; 3
    1078:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    107a:	8a e2       	ldi	r24, 0x2A	; 42
    107c:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    107e:	5f b7       	in	r21, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1080:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1082:	de 01       	movw	r26, r28
    1084:	15 96       	adiw	r26, 0x05	; 5
    1086:	80 e0       	ldi	r24, 0x00	; 0
    1088:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    108a:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    108c:	61 e2       	ldi	r22, 0x21	; 33
    108e:	e4 2f       	mov	r30, r20
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	60 93 57 00 	sts	0x0057, r22
    1096:	e4 91       	lpm	r30, Z+

					if (SerialCharNum & 0x01)
    1098:	80 ff       	sbrs	r24, 0
    109a:	03 c0       	rjmp	.+6      	; 0x10a2 <USB_Device_ProcessControlRequest+0x1d0>
					{
						SerialByte >>= 4;
    109c:	e2 95       	swap	r30
    109e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    10a0:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    10a2:	ef 70       	andi	r30, 0x0F	; 15
    10a4:	2e 2f       	mov	r18, r30
    10a6:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    10a8:	ea 30       	cpi	r30, 0x0A	; 10
    10aa:	18 f0       	brcs	.+6      	; 0x10b2 <USB_Device_ProcessControlRequest+0x1e0>
    10ac:	29 5c       	subi	r18, 0xC9	; 201
    10ae:	3f 4f       	sbci	r19, 0xFF	; 255
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <USB_Device_ProcessControlRequest+0x1e4>
    10b2:	20 5d       	subi	r18, 0xD0	; 208
    10b4:	3f 4f       	sbci	r19, 0xFF	; 255
    10b6:	2d 93       	st	X+, r18
    10b8:	3d 93       	st	X+, r19
    10ba:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    10bc:	84 31       	cpi	r24, 0x14	; 20
    10be:	91 05       	cpc	r25, r1
    10c0:	31 f7       	brne	.-52     	; 0x108e <USB_Device_ProcessControlRequest+0x1bc>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    10c2:	5f bf       	out	0x3f, r21	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10c4:	80 91 e8 00 	lds	r24, 0x00E8
    10c8:	87 7f       	andi	r24, 0xF7	; 247
    10ca:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    10ce:	ce 01       	movw	r24, r28
    10d0:	03 96       	adiw	r24, 0x03	; 3
    10d2:	6a e2       	ldi	r22, 0x2A	; 42
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	55 dc       	rcall	.-1878   	; 0x982 <Endpoint_Write_Control_Stream_LE>
    10d8:	12 c0       	rjmp	.+36     	; 0x10fe <USB_Device_ProcessControlRequest+0x22c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    10da:	60 91 92 02 	lds	r22, 0x0292
    10de:	ae 01       	movw	r20, r28
    10e0:	4f 5f       	subi	r20, 0xFF	; 255
    10e2:	5f 4f       	sbci	r21, 0xFF	; 255
    10e4:	21 dc       	rcall	.-1982   	; 0x928 <CALLBACK_USB_GetDescriptor>
    10e6:	bc 01       	movw	r22, r24
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	09 f4       	brne	.+2      	; 0x10ee <USB_Device_ProcessControlRequest+0x21c>
    10ec:	3b c0       	rjmp	.+118    	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
    10ee:	80 91 e8 00 	lds	r24, 0x00E8
    10f2:	87 7f       	andi	r24, 0xF7	; 247
    10f4:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	9a 81       	ldd	r25, Y+2	; 0x02
    10fc:	9c dc       	rcall	.-1736   	; 0xa36 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    10fe:	80 91 e8 00 	lds	r24, 0x00E8
    1102:	8b 77       	andi	r24, 0x7B	; 123
    1104:	80 93 e8 00 	sts	0x00E8, r24
    1108:	2d c0       	rjmp	.+90     	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    110a:	80 38       	cpi	r24, 0x80	; 128
    110c:	59 f5       	brne	.+86     	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    110e:	80 91 e8 00 	lds	r24, 0x00E8
    1112:	87 7f       	andi	r24, 0xF7	; 247
    1114:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    1118:	80 91 8a 02 	lds	r24, 0x028A
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    111c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1120:	80 91 e8 00 	lds	r24, 0x00E8
    1124:	8e 77       	andi	r24, 0x7E	; 126
    1126:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    112a:	5b dd       	rcall	.-1354   	; 0xbe2 <Endpoint_ClearStatusStage>
    112c:	1b c0       	rjmp	.+54     	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    112e:	88 23       	and	r24, r24
    1130:	c9 f4       	brne	.+50     	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    1132:	90 91 90 02 	lds	r25, 0x0290
    1136:	92 30       	cpi	r25, 0x02	; 2
    1138:	a8 f4       	brcc	.+42     	; 0x1164 <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    113a:	80 91 e8 00 	lds	r24, 0x00E8
    113e:	87 7f       	andi	r24, 0xF7	; 247
    1140:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    1144:	90 93 8a 02 	sts	0x028A, r25

	Endpoint_ClearStatusStage();
    1148:	4c dd       	rcall	.-1384   	; 0xbe2 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    114a:	80 91 8a 02 	lds	r24, 0x028A
    114e:	88 23       	and	r24, r24
    1150:	21 f4       	brne	.+8      	; 0x115a <USB_Device_ProcessControlRequest+0x288>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1152:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    1156:	87 ff       	sbrs	r24, 7
    1158:	02 c0       	rjmp	.+4      	; 0x115e <USB_Device_ProcessControlRequest+0x28c>
    115a:	84 e0       	ldi	r24, 0x04	; 4
    115c:	01 c0       	rjmp	.+2      	; 0x1160 <USB_Device_ProcessControlRequest+0x28e>
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    1162:	4f da       	rcall	.-2914   	; 0x602 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1164:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    1168:	83 ff       	sbrs	r24, 3
    116a:	0a c0       	rjmp	.+20     	; 0x1180 <USB_Device_ProcessControlRequest+0x2ae>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    116c:	80 91 e8 00 	lds	r24, 0x00E8
    1170:	87 7f       	andi	r24, 0xF7	; 247
    1172:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1176:	80 91 eb 00 	lds	r24, 0x00EB
    117a:	80 62       	ori	r24, 0x20	; 32
    117c:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    1180:	ac 96       	adiw	r28, 0x2c	; 44
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	1f 91       	pop	r17
    1192:	08 95       	ret

00001194 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    1194:	08 95       	ret

00001196 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1196:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    1198:	8e b3       	in	r24, 0x1e	; 30
    119a:	88 23       	and	r24, r24
    119c:	a9 f0       	breq	.+42     	; 0x11c8 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    119e:	80 91 e9 00 	lds	r24, 0x00E9
    11a2:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    11a4:	90 91 ec 00 	lds	r25, 0x00EC
    11a8:	90 ff       	sbrs	r25, 0
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <USB_USBTask+0x1a>
    11ac:	10 e8       	ldi	r17, 0x80	; 128
    11ae:	01 c0       	rjmp	.+2      	; 0x11b2 <USB_USBTask+0x1c>
    11b0:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11b2:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11b4:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11b8:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    11bc:	83 ff       	sbrs	r24, 3
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <USB_USBTask+0x2c>
	  USB_Device_ProcessControlRequest();
    11c0:	88 de       	rcall	.-752    	; 0xed2 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11c2:	1f 70       	andi	r17, 0x0F	; 15
    11c4:	10 93 e9 00 	sts	0x00E9, r17
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    11c8:	1f 91       	pop	r17
    11ca:	08 95       	ret

000011cc <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    11cc:	cf 93       	push	r28
    11ce:	df 93       	push	r29
    11d0:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    11d2:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    11d6:	83 ff       	sbrs	r24, 3
    11d8:	a2 c0       	rjmp	.+324    	; 0x131e <CDC_Device_ProcessControlRequest+0x152>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    11da:	88 81       	ld	r24, Y
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	20 91 92 02 	lds	r18, 0x0292
    11e2:	30 91 93 02 	lds	r19, 0x0293
    11e6:	28 17       	cp	r18, r24
    11e8:	39 07       	cpc	r19, r25
    11ea:	09 f0       	breq	.+2      	; 0x11ee <CDC_Device_ProcessControlRequest+0x22>
    11ec:	98 c0       	rjmp	.+304    	; 0x131e <CDC_Device_ProcessControlRequest+0x152>
	  return;

	switch (USB_ControlRequest.bRequest)
    11ee:	80 91 8f 02 	lds	r24, 0x028F
    11f2:	81 32       	cpi	r24, 0x21	; 33
    11f4:	69 f0       	breq	.+26     	; 0x1210 <CDC_Device_ProcessControlRequest+0x44>
    11f6:	82 32       	cpi	r24, 0x22	; 34
    11f8:	20 f4       	brcc	.+8      	; 0x1202 <CDC_Device_ProcessControlRequest+0x36>
    11fa:	80 32       	cpi	r24, 0x20	; 32
    11fc:	09 f0       	breq	.+2      	; 0x1200 <CDC_Device_ProcessControlRequest+0x34>
    11fe:	8f c0       	rjmp	.+286    	; 0x131e <CDC_Device_ProcessControlRequest+0x152>
    1200:	3c c0       	rjmp	.+120    	; 0x127a <CDC_Device_ProcessControlRequest+0xae>
    1202:	82 32       	cpi	r24, 0x22	; 34
    1204:	09 f4       	brne	.+2      	; 0x1208 <CDC_Device_ProcessControlRequest+0x3c>
    1206:	6a c0       	rjmp	.+212    	; 0x12dc <CDC_Device_ProcessControlRequest+0x110>
    1208:	83 32       	cpi	r24, 0x23	; 35
    120a:	09 f0       	breq	.+2      	; 0x120e <CDC_Device_ProcessControlRequest+0x42>
    120c:	88 c0       	rjmp	.+272    	; 0x131e <CDC_Device_ProcessControlRequest+0x152>
    120e:	79 c0       	rjmp	.+242    	; 0x1302 <CDC_Device_ProcessControlRequest+0x136>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    1210:	80 91 8e 02 	lds	r24, 0x028E
    1214:	81 3a       	cpi	r24, 0xA1	; 161
    1216:	09 f0       	breq	.+2      	; 0x121a <CDC_Device_ProcessControlRequest+0x4e>
    1218:	82 c0       	rjmp	.+260    	; 0x131e <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    121a:	80 91 e8 00 	lds	r24, 0x00E8
    121e:	87 7f       	andi	r24, 0xF7	; 247
    1220:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1224:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    1228:	80 ff       	sbrs	r24, 0
    122a:	fc cf       	rjmp	.-8      	; 0x1224 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    122c:	8c 89       	ldd	r24, Y+20	; 0x14
    122e:	9d 89       	ldd	r25, Y+21	; 0x15
    1230:	ae 89       	ldd	r26, Y+22	; 0x16
    1232:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    1234:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1238:	29 2f       	mov	r18, r25
    123a:	3a 2f       	mov	r19, r26
    123c:	4b 2f       	mov	r20, r27
    123e:	55 27       	eor	r21, r21
    1240:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
    1244:	9d 01       	movw	r18, r26
    1246:	44 27       	eor	r20, r20
    1248:	55 27       	eor	r21, r21
    124a:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
    124e:	8b 2f       	mov	r24, r27
    1250:	99 27       	eor	r25, r25
    1252:	aa 27       	eor	r26, r26
    1254:	bb 27       	eor	r27, r27
    1256:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    125a:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    125c:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    1260:	89 8d       	ldd	r24, Y+25	; 0x19
    1262:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    1266:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1268:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    126c:	80 91 e8 00 	lds	r24, 0x00E8
    1270:	8e 77       	andi	r24, 0x7E	; 126
    1272:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    1276:	b5 dc       	rcall	.-1686   	; 0xbe2 <Endpoint_ClearStatusStage>
    1278:	52 c0       	rjmp	.+164    	; 0x131e <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    127a:	80 91 8e 02 	lds	r24, 0x028E
    127e:	81 32       	cpi	r24, 0x21	; 33
    1280:	09 f0       	breq	.+2      	; 0x1284 <CDC_Device_ProcessControlRequest+0xb8>
    1282:	4d c0       	rjmp	.+154    	; 0x131e <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1284:	80 91 e8 00 	lds	r24, 0x00E8
    1288:	87 7f       	andi	r24, 0xF7	; 247
    128a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    128e:	04 c0       	rjmp	.+8      	; 0x1298 <CDC_Device_ProcessControlRequest+0xcc>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    1290:	8e b3       	in	r24, 0x1e	; 30
    1292:	88 23       	and	r24, r24
    1294:	09 f4       	brne	.+2      	; 0x1298 <CDC_Device_ProcessControlRequest+0xcc>
    1296:	43 c0       	rjmp	.+134    	; 0x131e <CDC_Device_ProcessControlRequest+0x152>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1298:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    129c:	82 ff       	sbrs	r24, 2
    129e:	f8 cf       	rjmp	.-16     	; 0x1290 <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    12a0:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
    12a4:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
    12a8:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
    12ac:	80 91 f1 00 	lds	r24, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    12b0:	3c 8b       	std	Y+20, r19	; 0x14
    12b2:	2d 8b       	std	Y+21, r18	; 0x15
    12b4:	9e 8b       	std	Y+22, r25	; 0x16
    12b6:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    12b8:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    12bc:	88 8f       	std	Y+24, r24	; 0x18
    12be:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    12c2:	89 8f       	std	Y+25, r24	; 0x19
    12c4:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    12c8:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    12ca:	80 91 e8 00 	lds	r24, 0x00E8
    12ce:	8b 77       	andi	r24, 0x7B	; 123
    12d0:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    12d4:	86 dc       	rcall	.-1780   	; 0xbe2 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    12d6:	ce 01       	movw	r24, r28
    12d8:	c4 d9       	rcall	.-3192   	; 0x662 <EVENT_CDC_Device_LineEncodingChanged>
    12da:	21 c0       	rjmp	.+66     	; 0x131e <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    12dc:	80 91 8e 02 	lds	r24, 0x028E
    12e0:	81 32       	cpi	r24, 0x21	; 33
    12e2:	e9 f4       	brne	.+58     	; 0x131e <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    12e4:	80 91 e8 00 	lds	r24, 0x00E8
    12e8:	87 7f       	andi	r24, 0xF7	; 247
    12ea:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    12ee:	79 dc       	rcall	.-1806   	; 0xbe2 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    12f0:	80 91 90 02 	lds	r24, 0x0290
    12f4:	90 91 91 02 	lds	r25, 0x0291
    12f8:	99 8b       	std	Y+17, r25	; 0x11
    12fa:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    12fc:	ce 01       	movw	r24, r28
    12fe:	d4 d0       	rcall	.+424    	; 0x14a8 <CDC_Device_Event_Stub>
    1300:	0e c0       	rjmp	.+28     	; 0x131e <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1302:	80 91 8e 02 	lds	r24, 0x028E
    1306:	81 32       	cpi	r24, 0x21	; 33
    1308:	51 f4       	brne	.+20     	; 0x131e <CDC_Device_ProcessControlRequest+0x152>
    130a:	80 91 e8 00 	lds	r24, 0x00E8
    130e:	87 7f       	andi	r24, 0xF7	; 247
    1310:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1314:	66 dc       	rcall	.-1844   	; 0xbe2 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1316:	ce 01       	movw	r24, r28
    1318:	60 91 90 02 	lds	r22, 0x0290
    131c:	c5 d0       	rcall	.+394    	; 0x14a8 <CDC_Device_Event_Stub>
			}

			break;
	}
}
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	08 95       	ret

00001324 <CDC_Device_ConfigureEndpoints>:

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
    132a:	40 96       	adiw	r24, 0x10	; 16
    132c:	fc 01       	movw	r30, r24
    132e:	8b e0       	ldi	r24, 0x0B	; 11
    1330:	df 01       	movw	r26, r30
    1332:	1d 92       	st	X+, r1
    1334:	8a 95       	dec	r24
    1336:	e9 f7       	brne	.-6      	; 0x1332 <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
    1338:	82 e0       	ldi	r24, 0x02	; 2
    133a:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
    133c:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
    133e:	83 e0       	ldi	r24, 0x03	; 3
    1340:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
    1342:	ce 01       	movw	r24, r28
    1344:	01 96       	adiw	r24, 0x01	; 1
    1346:	61 e0       	ldi	r22, 0x01	; 1
    1348:	08 dc       	rcall	.-2032   	; 0xb5a <Endpoint_ConfigureEndpointTable>
    134a:	88 23       	and	r24, r24
    134c:	59 f0       	breq	.+22     	; 0x1364 <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    134e:	ce 01       	movw	r24, r28
    1350:	06 96       	adiw	r24, 0x06	; 6
    1352:	61 e0       	ldi	r22, 0x01	; 1
    1354:	02 dc       	rcall	.-2044   	; 0xb5a <Endpoint_ConfigureEndpointTable>
    1356:	88 23       	and	r24, r24
    1358:	29 f0       	breq	.+10     	; 0x1364 <CDC_Device_ConfigureEndpoints+0x40>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    135a:	ce 01       	movw	r24, r28
    135c:	0b 96       	adiw	r24, 0x0b	; 11
    135e:	61 e0       	ldi	r22, 0x01	; 1
    1360:	fc db       	rcall	.-2056   	; 0xb5a <Endpoint_ConfigureEndpointTable>
    1362:	01 c0       	rjmp	.+2      	; 0x1366 <CDC_Device_ConfigureEndpoints+0x42>

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
	  return false;
    1364:	80 e0       	ldi	r24, 0x00	; 0

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
	  return false;

	return true;
}
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	08 95       	ret

0000136c <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	0f 92       	push	r0
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1378:	8e b3       	in	r24, 0x1e	; 30
    137a:	84 30       	cpi	r24, 0x04	; 4
    137c:	f9 f4       	brne	.+62     	; 0x13bc <CDC_Device_SendByte+0x50>
    137e:	24 89       	ldd	r18, Z+20	; 0x14
    1380:	35 89       	ldd	r19, Z+21	; 0x15
    1382:	46 89       	ldd	r20, Z+22	; 0x16
    1384:	57 89       	ldd	r21, Z+23	; 0x17
    1386:	21 15       	cp	r18, r1
    1388:	31 05       	cpc	r19, r1
    138a:	41 05       	cpc	r20, r1
    138c:	51 05       	cpc	r21, r1
    138e:	b1 f0       	breq	.+44     	; 0x13bc <CDC_Device_SendByte+0x50>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1390:	81 81       	ldd	r24, Z+1	; 0x01
    1392:	8f 70       	andi	r24, 0x0F	; 15
    1394:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1398:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
    139c:	85 fd       	sbrc	r24, 5
    139e:	0a c0       	rjmp	.+20     	; 0x13b4 <CDC_Device_SendByte+0x48>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13a0:	80 91 e8 00 	lds	r24, 0x00E8
    13a4:	8e 77       	andi	r24, 0x7E	; 126
    13a6:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    13aa:	69 83       	std	Y+1, r22	; 0x01
    13ac:	39 dc       	rcall	.-1934   	; 0xc20 <Endpoint_WaitUntilReady>
    13ae:	69 81       	ldd	r22, Y+1	; 0x01
    13b0:	88 23       	and	r24, r24
    13b2:	29 f4       	brne	.+10     	; 0x13be <CDC_Device_SendByte+0x52>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    13b4:	60 93 f1 00 	sts	0x00F1, r22
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	01 c0       	rjmp	.+2      	; 0x13be <CDC_Device_SendByte+0x52>

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    13bc:	82 e0       	ldi	r24, 0x02	; 2
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}
    13be:	0f 90       	pop	r0
    13c0:	cf 91       	pop	r28
    13c2:	df 91       	pop	r29
    13c4:	08 95       	ret

000013c6 <CDC_Device_Flush>:

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    13c6:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    13c8:	8e b3       	in	r24, 0x1e	; 30
    13ca:	84 30       	cpi	r24, 0x04	; 4
    13cc:	19 f5       	brne	.+70     	; 0x1414 <CDC_Device_Flush+0x4e>
    13ce:	24 89       	ldd	r18, Z+20	; 0x14
    13d0:	35 89       	ldd	r19, Z+21	; 0x15
    13d2:	46 89       	ldd	r20, Z+22	; 0x16
    13d4:	57 89       	ldd	r21, Z+23	; 0x17
    13d6:	21 15       	cp	r18, r1
    13d8:	31 05       	cpc	r19, r1
    13da:	41 05       	cpc	r20, r1
    13dc:	51 05       	cpc	r21, r1
    13de:	d1 f0       	breq	.+52     	; 0x1414 <CDC_Device_Flush+0x4e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    13e0:	81 81       	ldd	r24, Z+1	; 0x01
    13e2:	8f 70       	andi	r24, 0x0F	; 15
    13e4:	80 93 e9 00 	sts	0x00E9, r24
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    13e8:	80 91 f2 00 	lds	r24, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
    13ec:	88 23       	and	r24, r24
    13ee:	a1 f0       	breq	.+40     	; 0x1418 <CDC_Device_Flush+0x52>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    13f0:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13f4:	80 91 e8 00 	lds	r24, 0x00E8
    13f8:	8e 77       	andi	r24, 0x7E	; 126
    13fa:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
    13fe:	95 fd       	sbrc	r25, 5
    1400:	0d c0       	rjmp	.+26     	; 0x141c <CDC_Device_Flush+0x56>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
    1402:	0e dc       	rcall	.-2020   	; 0xc20 <Endpoint_WaitUntilReady>
    1404:	88 23       	and	r24, r24
    1406:	59 f4       	brne	.+22     	; 0x141e <CDC_Device_Flush+0x58>
    1408:	90 91 e8 00 	lds	r25, 0x00E8
    140c:	9e 77       	andi	r25, 0x7E	; 126
    140e:	90 93 e8 00 	sts	0x00E8, r25
    1412:	08 95       	ret
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;
    1414:	82 e0       	ldi	r24, 0x02	; 2
    1416:	08 95       	ret
	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
	  return ENDPOINT_READYWAIT_NoError;
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	08 95       	ret
		  return ErrorCode;

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
    141c:	80 e0       	ldi	r24, 0x00	; 0
}
    141e:	08 95       	ret

00001420 <CDC_Device_USBTask>:
	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1420:	2e b3       	in	r18, 0x1e	; 30
    1422:	24 30       	cpi	r18, 0x04	; 4
    1424:	99 f4       	brne	.+38     	; 0x144c <CDC_Device_USBTask+0x2c>
    1426:	fc 01       	movw	r30, r24
    1428:	24 89       	ldd	r18, Z+20	; 0x14
    142a:	35 89       	ldd	r19, Z+21	; 0x15
    142c:	46 89       	ldd	r20, Z+22	; 0x16
    142e:	57 89       	ldd	r21, Z+23	; 0x17
    1430:	21 15       	cp	r18, r1
    1432:	31 05       	cpc	r19, r1
    1434:	41 05       	cpc	r20, r1
    1436:	51 05       	cpc	r21, r1
    1438:	49 f0       	breq	.+18     	; 0x144c <CDC_Device_USBTask+0x2c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    143a:	21 81       	ldd	r18, Z+1	; 0x01
    143c:	2f 70       	andi	r18, 0x0F	; 15
    143e:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1442:	20 91 e8 00 	lds	r18, 0x00E8
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (Endpoint_IsINReady())
    1446:	20 ff       	sbrs	r18, 0
    1448:	01 c0       	rjmp	.+2      	; 0x144c <CDC_Device_USBTask+0x2c>
	  CDC_Device_Flush(CDCInterfaceInfo);
    144a:	bd cf       	rjmp	.-134    	; 0x13c6 <CDC_Device_Flush>
    144c:	08 95       	ret

0000144e <CDC_Device_ReceiveByte>:
		return 0;
	}
}

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    144e:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
    1450:	8e b3       	in	r24, 0x1e	; 30
    1452:	84 30       	cpi	r24, 0x04	; 4
    1454:	29 f5       	brne	.+74     	; 0x14a0 <CDC_Device_ReceiveByte+0x52>
    1456:	24 89       	ldd	r18, Z+20	; 0x14
    1458:	35 89       	ldd	r19, Z+21	; 0x15
    145a:	46 89       	ldd	r20, Z+22	; 0x16
    145c:	57 89       	ldd	r21, Z+23	; 0x17
    145e:	21 15       	cp	r18, r1
    1460:	31 05       	cpc	r19, r1
    1462:	41 05       	cpc	r20, r1
    1464:	51 05       	cpc	r21, r1
    1466:	e1 f0       	breq	.+56     	; 0x14a0 <CDC_Device_ReceiveByte+0x52>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1468:	86 81       	ldd	r24, Z+6	; 0x06
    146a:	8f 70       	andi	r24, 0x0F	; 15
    146c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1470:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
    1474:	82 ff       	sbrs	r24, 2
    1476:	14 c0       	rjmp	.+40     	; 0x14a0 <CDC_Device_ReceiveByte+0x52>
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    1478:	80 91 f2 00 	lds	r24, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
    147c:	88 23       	and	r24, r24
    147e:	21 f0       	breq	.+8      	; 0x1488 <CDC_Device_ReceiveByte+0x3a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1480:	20 91 f1 00 	lds	r18, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	02 c0       	rjmp	.+4      	; 0x148c <CDC_Device_ReceiveByte+0x3e>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    1488:	2f ef       	ldi	r18, 0xFF	; 255
    148a:	3f ef       	ldi	r19, 0xFF	; 255
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
    148c:	80 91 f2 00 	lds	r24, 0x00F2
	if (Endpoint_IsOUTReceived())
	{
		if (Endpoint_BytesInEndpoint())
		  ReceivedByte = Endpoint_Read_8();

		if (!(Endpoint_BytesInEndpoint()))
    1490:	88 23       	and	r24, r24
    1492:	41 f4       	brne	.+16     	; 0x14a4 <CDC_Device_ReceiveByte+0x56>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1494:	80 91 e8 00 	lds	r24, 0x00E8
    1498:	8b 77       	andi	r24, 0x7B	; 123
    149a:	80 93 e8 00 	sts	0x00E8, r24
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <CDC_Device_ReceiveByte+0x56>
int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
	  return -1;

	int16_t ReceivedByte = -1;
    14a0:	2f ef       	ldi	r18, 0xFF	; 255
    14a2:	3f ef       	ldi	r19, 0xFF	; 255
		if (!(Endpoint_BytesInEndpoint()))
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
    14a4:	c9 01       	movw	r24, r18
    14a6:	08 95       	ret

000014a8 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(void)
{

}
    14a8:	08 95       	ret

000014aa <__subsf3>:
    14aa:	50 58       	subi	r21, 0x80	; 128

000014ac <__addsf3>:
    14ac:	bb 27       	eor	r27, r27
    14ae:	aa 27       	eor	r26, r26
    14b0:	0e d0       	rcall	.+28     	; 0x14ce <__addsf3x>
    14b2:	70 c1       	rjmp	.+736    	; 0x1794 <__fp_round>
    14b4:	61 d1       	rcall	.+706    	; 0x1778 <__fp_pscA>
    14b6:	30 f0       	brcs	.+12     	; 0x14c4 <__addsf3+0x18>
    14b8:	66 d1       	rcall	.+716    	; 0x1786 <__fp_pscB>
    14ba:	20 f0       	brcs	.+8      	; 0x14c4 <__addsf3+0x18>
    14bc:	31 f4       	brne	.+12     	; 0x14ca <__addsf3+0x1e>
    14be:	9f 3f       	cpi	r25, 0xFF	; 255
    14c0:	11 f4       	brne	.+4      	; 0x14c6 <__addsf3+0x1a>
    14c2:	1e f4       	brtc	.+6      	; 0x14ca <__addsf3+0x1e>
    14c4:	56 c1       	rjmp	.+684    	; 0x1772 <__fp_nan>
    14c6:	0e f4       	brtc	.+2      	; 0x14ca <__addsf3+0x1e>
    14c8:	e0 95       	com	r30
    14ca:	e7 fb       	bst	r30, 7
    14cc:	4c c1       	rjmp	.+664    	; 0x1766 <__fp_inf>

000014ce <__addsf3x>:
    14ce:	e9 2f       	mov	r30, r25
    14d0:	72 d1       	rcall	.+740    	; 0x17b6 <__fp_split3>
    14d2:	80 f3       	brcs	.-32     	; 0x14b4 <__addsf3+0x8>
    14d4:	ba 17       	cp	r27, r26
    14d6:	62 07       	cpc	r22, r18
    14d8:	73 07       	cpc	r23, r19
    14da:	84 07       	cpc	r24, r20
    14dc:	95 07       	cpc	r25, r21
    14de:	18 f0       	brcs	.+6      	; 0x14e6 <__addsf3x+0x18>
    14e0:	71 f4       	brne	.+28     	; 0x14fe <__addsf3x+0x30>
    14e2:	9e f5       	brtc	.+102    	; 0x154a <__addsf3x+0x7c>
    14e4:	8a c1       	rjmp	.+788    	; 0x17fa <__fp_zero>
    14e6:	0e f4       	brtc	.+2      	; 0x14ea <__addsf3x+0x1c>
    14e8:	e0 95       	com	r30
    14ea:	0b 2e       	mov	r0, r27
    14ec:	ba 2f       	mov	r27, r26
    14ee:	a0 2d       	mov	r26, r0
    14f0:	0b 01       	movw	r0, r22
    14f2:	b9 01       	movw	r22, r18
    14f4:	90 01       	movw	r18, r0
    14f6:	0c 01       	movw	r0, r24
    14f8:	ca 01       	movw	r24, r20
    14fa:	a0 01       	movw	r20, r0
    14fc:	11 24       	eor	r1, r1
    14fe:	ff 27       	eor	r31, r31
    1500:	59 1b       	sub	r21, r25
    1502:	99 f0       	breq	.+38     	; 0x152a <__addsf3x+0x5c>
    1504:	59 3f       	cpi	r21, 0xF9	; 249
    1506:	50 f4       	brcc	.+20     	; 0x151c <__addsf3x+0x4e>
    1508:	50 3e       	cpi	r21, 0xE0	; 224
    150a:	68 f1       	brcs	.+90     	; 0x1566 <__addsf3x+0x98>
    150c:	1a 16       	cp	r1, r26
    150e:	f0 40       	sbci	r31, 0x00	; 0
    1510:	a2 2f       	mov	r26, r18
    1512:	23 2f       	mov	r18, r19
    1514:	34 2f       	mov	r19, r20
    1516:	44 27       	eor	r20, r20
    1518:	58 5f       	subi	r21, 0xF8	; 248
    151a:	f3 cf       	rjmp	.-26     	; 0x1502 <__addsf3x+0x34>
    151c:	46 95       	lsr	r20
    151e:	37 95       	ror	r19
    1520:	27 95       	ror	r18
    1522:	a7 95       	ror	r26
    1524:	f0 40       	sbci	r31, 0x00	; 0
    1526:	53 95       	inc	r21
    1528:	c9 f7       	brne	.-14     	; 0x151c <__addsf3x+0x4e>
    152a:	7e f4       	brtc	.+30     	; 0x154a <__addsf3x+0x7c>
    152c:	1f 16       	cp	r1, r31
    152e:	ba 0b       	sbc	r27, r26
    1530:	62 0b       	sbc	r22, r18
    1532:	73 0b       	sbc	r23, r19
    1534:	84 0b       	sbc	r24, r20
    1536:	ba f0       	brmi	.+46     	; 0x1566 <__addsf3x+0x98>
    1538:	91 50       	subi	r25, 0x01	; 1
    153a:	a1 f0       	breq	.+40     	; 0x1564 <__addsf3x+0x96>
    153c:	ff 0f       	add	r31, r31
    153e:	bb 1f       	adc	r27, r27
    1540:	66 1f       	adc	r22, r22
    1542:	77 1f       	adc	r23, r23
    1544:	88 1f       	adc	r24, r24
    1546:	c2 f7       	brpl	.-16     	; 0x1538 <__addsf3x+0x6a>
    1548:	0e c0       	rjmp	.+28     	; 0x1566 <__addsf3x+0x98>
    154a:	ba 0f       	add	r27, r26
    154c:	62 1f       	adc	r22, r18
    154e:	73 1f       	adc	r23, r19
    1550:	84 1f       	adc	r24, r20
    1552:	48 f4       	brcc	.+18     	; 0x1566 <__addsf3x+0x98>
    1554:	87 95       	ror	r24
    1556:	77 95       	ror	r23
    1558:	67 95       	ror	r22
    155a:	b7 95       	ror	r27
    155c:	f7 95       	ror	r31
    155e:	9e 3f       	cpi	r25, 0xFE	; 254
    1560:	08 f0       	brcs	.+2      	; 0x1564 <__addsf3x+0x96>
    1562:	b3 cf       	rjmp	.-154    	; 0x14ca <__addsf3+0x1e>
    1564:	93 95       	inc	r25
    1566:	88 0f       	add	r24, r24
    1568:	08 f0       	brcs	.+2      	; 0x156c <__addsf3x+0x9e>
    156a:	99 27       	eor	r25, r25
    156c:	ee 0f       	add	r30, r30
    156e:	97 95       	ror	r25
    1570:	87 95       	ror	r24
    1572:	08 95       	ret

00001574 <__cmpsf2>:
    1574:	d4 d0       	rcall	.+424    	; 0x171e <__fp_cmp>
    1576:	08 f4       	brcc	.+2      	; 0x157a <__cmpsf2+0x6>
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	08 95       	ret

0000157c <__divsf3>:
    157c:	0c d0       	rcall	.+24     	; 0x1596 <__divsf3x>
    157e:	0a c1       	rjmp	.+532    	; 0x1794 <__fp_round>
    1580:	02 d1       	rcall	.+516    	; 0x1786 <__fp_pscB>
    1582:	40 f0       	brcs	.+16     	; 0x1594 <__divsf3+0x18>
    1584:	f9 d0       	rcall	.+498    	; 0x1778 <__fp_pscA>
    1586:	30 f0       	brcs	.+12     	; 0x1594 <__divsf3+0x18>
    1588:	21 f4       	brne	.+8      	; 0x1592 <__divsf3+0x16>
    158a:	5f 3f       	cpi	r21, 0xFF	; 255
    158c:	19 f0       	breq	.+6      	; 0x1594 <__divsf3+0x18>
    158e:	eb c0       	rjmp	.+470    	; 0x1766 <__fp_inf>
    1590:	51 11       	cpse	r21, r1
    1592:	34 c1       	rjmp	.+616    	; 0x17fc <__fp_szero>
    1594:	ee c0       	rjmp	.+476    	; 0x1772 <__fp_nan>

00001596 <__divsf3x>:
    1596:	0f d1       	rcall	.+542    	; 0x17b6 <__fp_split3>
    1598:	98 f3       	brcs	.-26     	; 0x1580 <__divsf3+0x4>

0000159a <__divsf3_pse>:
    159a:	99 23       	and	r25, r25
    159c:	c9 f3       	breq	.-14     	; 0x1590 <__divsf3+0x14>
    159e:	55 23       	and	r21, r21
    15a0:	b1 f3       	breq	.-20     	; 0x158e <__divsf3+0x12>
    15a2:	95 1b       	sub	r25, r21
    15a4:	55 0b       	sbc	r21, r21
    15a6:	bb 27       	eor	r27, r27
    15a8:	aa 27       	eor	r26, r26
    15aa:	62 17       	cp	r22, r18
    15ac:	73 07       	cpc	r23, r19
    15ae:	84 07       	cpc	r24, r20
    15b0:	38 f0       	brcs	.+14     	; 0x15c0 <__divsf3_pse+0x26>
    15b2:	9f 5f       	subi	r25, 0xFF	; 255
    15b4:	5f 4f       	sbci	r21, 0xFF	; 255
    15b6:	22 0f       	add	r18, r18
    15b8:	33 1f       	adc	r19, r19
    15ba:	44 1f       	adc	r20, r20
    15bc:	aa 1f       	adc	r26, r26
    15be:	a9 f3       	breq	.-22     	; 0x15aa <__divsf3_pse+0x10>
    15c0:	33 d0       	rcall	.+102    	; 0x1628 <__divsf3_pse+0x8e>
    15c2:	0e 2e       	mov	r0, r30
    15c4:	3a f0       	brmi	.+14     	; 0x15d4 <__divsf3_pse+0x3a>
    15c6:	e0 e8       	ldi	r30, 0x80	; 128
    15c8:	30 d0       	rcall	.+96     	; 0x162a <__divsf3_pse+0x90>
    15ca:	91 50       	subi	r25, 0x01	; 1
    15cc:	50 40       	sbci	r21, 0x00	; 0
    15ce:	e6 95       	lsr	r30
    15d0:	00 1c       	adc	r0, r0
    15d2:	ca f7       	brpl	.-14     	; 0x15c6 <__divsf3_pse+0x2c>
    15d4:	29 d0       	rcall	.+82     	; 0x1628 <__divsf3_pse+0x8e>
    15d6:	fe 2f       	mov	r31, r30
    15d8:	27 d0       	rcall	.+78     	; 0x1628 <__divsf3_pse+0x8e>
    15da:	66 0f       	add	r22, r22
    15dc:	77 1f       	adc	r23, r23
    15de:	88 1f       	adc	r24, r24
    15e0:	bb 1f       	adc	r27, r27
    15e2:	26 17       	cp	r18, r22
    15e4:	37 07       	cpc	r19, r23
    15e6:	48 07       	cpc	r20, r24
    15e8:	ab 07       	cpc	r26, r27
    15ea:	b0 e8       	ldi	r27, 0x80	; 128
    15ec:	09 f0       	breq	.+2      	; 0x15f0 <__divsf3_pse+0x56>
    15ee:	bb 0b       	sbc	r27, r27
    15f0:	80 2d       	mov	r24, r0
    15f2:	bf 01       	movw	r22, r30
    15f4:	ff 27       	eor	r31, r31
    15f6:	93 58       	subi	r25, 0x83	; 131
    15f8:	5f 4f       	sbci	r21, 0xFF	; 255
    15fa:	2a f0       	brmi	.+10     	; 0x1606 <__divsf3_pse+0x6c>
    15fc:	9e 3f       	cpi	r25, 0xFE	; 254
    15fe:	51 05       	cpc	r21, r1
    1600:	68 f0       	brcs	.+26     	; 0x161c <__divsf3_pse+0x82>
    1602:	b1 c0       	rjmp	.+354    	; 0x1766 <__fp_inf>
    1604:	fb c0       	rjmp	.+502    	; 0x17fc <__fp_szero>
    1606:	5f 3f       	cpi	r21, 0xFF	; 255
    1608:	ec f3       	brlt	.-6      	; 0x1604 <__divsf3_pse+0x6a>
    160a:	98 3e       	cpi	r25, 0xE8	; 232
    160c:	dc f3       	brlt	.-10     	; 0x1604 <__divsf3_pse+0x6a>
    160e:	86 95       	lsr	r24
    1610:	77 95       	ror	r23
    1612:	67 95       	ror	r22
    1614:	b7 95       	ror	r27
    1616:	f7 95       	ror	r31
    1618:	9f 5f       	subi	r25, 0xFF	; 255
    161a:	c9 f7       	brne	.-14     	; 0x160e <__divsf3_pse+0x74>
    161c:	88 0f       	add	r24, r24
    161e:	91 1d       	adc	r25, r1
    1620:	96 95       	lsr	r25
    1622:	87 95       	ror	r24
    1624:	97 f9       	bld	r25, 7
    1626:	08 95       	ret
    1628:	e1 e0       	ldi	r30, 0x01	; 1
    162a:	66 0f       	add	r22, r22
    162c:	77 1f       	adc	r23, r23
    162e:	88 1f       	adc	r24, r24
    1630:	bb 1f       	adc	r27, r27
    1632:	62 17       	cp	r22, r18
    1634:	73 07       	cpc	r23, r19
    1636:	84 07       	cpc	r24, r20
    1638:	ba 07       	cpc	r27, r26
    163a:	20 f0       	brcs	.+8      	; 0x1644 <__divsf3_pse+0xaa>
    163c:	62 1b       	sub	r22, r18
    163e:	73 0b       	sbc	r23, r19
    1640:	84 0b       	sbc	r24, r20
    1642:	ba 0b       	sbc	r27, r26
    1644:	ee 1f       	adc	r30, r30
    1646:	88 f7       	brcc	.-30     	; 0x162a <__divsf3_pse+0x90>
    1648:	e0 95       	com	r30
    164a:	08 95       	ret

0000164c <__fixunssfsi>:
    164c:	bc d0       	rcall	.+376    	; 0x17c6 <__fp_splitA>
    164e:	88 f0       	brcs	.+34     	; 0x1672 <__fixunssfsi+0x26>
    1650:	9f 57       	subi	r25, 0x7F	; 127
    1652:	90 f0       	brcs	.+36     	; 0x1678 <__fixunssfsi+0x2c>
    1654:	b9 2f       	mov	r27, r25
    1656:	99 27       	eor	r25, r25
    1658:	b7 51       	subi	r27, 0x17	; 23
    165a:	a0 f0       	brcs	.+40     	; 0x1684 <__fixunssfsi+0x38>
    165c:	d1 f0       	breq	.+52     	; 0x1692 <__fixunssfsi+0x46>
    165e:	66 0f       	add	r22, r22
    1660:	77 1f       	adc	r23, r23
    1662:	88 1f       	adc	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	1a f0       	brmi	.+6      	; 0x166e <__fixunssfsi+0x22>
    1668:	ba 95       	dec	r27
    166a:	c9 f7       	brne	.-14     	; 0x165e <__fixunssfsi+0x12>
    166c:	12 c0       	rjmp	.+36     	; 0x1692 <__fixunssfsi+0x46>
    166e:	b1 30       	cpi	r27, 0x01	; 1
    1670:	81 f0       	breq	.+32     	; 0x1692 <__fixunssfsi+0x46>
    1672:	c3 d0       	rcall	.+390    	; 0x17fa <__fp_zero>
    1674:	b1 e0       	ldi	r27, 0x01	; 1
    1676:	08 95       	ret
    1678:	c0 c0       	rjmp	.+384    	; 0x17fa <__fp_zero>
    167a:	67 2f       	mov	r22, r23
    167c:	78 2f       	mov	r23, r24
    167e:	88 27       	eor	r24, r24
    1680:	b8 5f       	subi	r27, 0xF8	; 248
    1682:	39 f0       	breq	.+14     	; 0x1692 <__fixunssfsi+0x46>
    1684:	b9 3f       	cpi	r27, 0xF9	; 249
    1686:	cc f3       	brlt	.-14     	; 0x167a <__fixunssfsi+0x2e>
    1688:	86 95       	lsr	r24
    168a:	77 95       	ror	r23
    168c:	67 95       	ror	r22
    168e:	b3 95       	inc	r27
    1690:	d9 f7       	brne	.-10     	; 0x1688 <__fixunssfsi+0x3c>
    1692:	3e f4       	brtc	.+14     	; 0x16a2 <__fixunssfsi+0x56>
    1694:	90 95       	com	r25
    1696:	80 95       	com	r24
    1698:	70 95       	com	r23
    169a:	61 95       	neg	r22
    169c:	7f 4f       	sbci	r23, 0xFF	; 255
    169e:	8f 4f       	sbci	r24, 0xFF	; 255
    16a0:	9f 4f       	sbci	r25, 0xFF	; 255
    16a2:	08 95       	ret

000016a4 <__floatunsisf>:
    16a4:	e8 94       	clt
    16a6:	09 c0       	rjmp	.+18     	; 0x16ba <__floatsisf+0x12>

000016a8 <__floatsisf>:
    16a8:	97 fb       	bst	r25, 7
    16aa:	3e f4       	brtc	.+14     	; 0x16ba <__floatsisf+0x12>
    16ac:	90 95       	com	r25
    16ae:	80 95       	com	r24
    16b0:	70 95       	com	r23
    16b2:	61 95       	neg	r22
    16b4:	7f 4f       	sbci	r23, 0xFF	; 255
    16b6:	8f 4f       	sbci	r24, 0xFF	; 255
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	99 23       	and	r25, r25
    16bc:	a9 f0       	breq	.+42     	; 0x16e8 <__floatsisf+0x40>
    16be:	f9 2f       	mov	r31, r25
    16c0:	96 e9       	ldi	r25, 0x96	; 150
    16c2:	bb 27       	eor	r27, r27
    16c4:	93 95       	inc	r25
    16c6:	f6 95       	lsr	r31
    16c8:	87 95       	ror	r24
    16ca:	77 95       	ror	r23
    16cc:	67 95       	ror	r22
    16ce:	b7 95       	ror	r27
    16d0:	f1 11       	cpse	r31, r1
    16d2:	f8 cf       	rjmp	.-16     	; 0x16c4 <__floatsisf+0x1c>
    16d4:	fa f4       	brpl	.+62     	; 0x1714 <__floatsisf+0x6c>
    16d6:	bb 0f       	add	r27, r27
    16d8:	11 f4       	brne	.+4      	; 0x16de <__floatsisf+0x36>
    16da:	60 ff       	sbrs	r22, 0
    16dc:	1b c0       	rjmp	.+54     	; 0x1714 <__floatsisf+0x6c>
    16de:	6f 5f       	subi	r22, 0xFF	; 255
    16e0:	7f 4f       	sbci	r23, 0xFF	; 255
    16e2:	8f 4f       	sbci	r24, 0xFF	; 255
    16e4:	9f 4f       	sbci	r25, 0xFF	; 255
    16e6:	16 c0       	rjmp	.+44     	; 0x1714 <__floatsisf+0x6c>
    16e8:	88 23       	and	r24, r24
    16ea:	11 f0       	breq	.+4      	; 0x16f0 <__floatsisf+0x48>
    16ec:	96 e9       	ldi	r25, 0x96	; 150
    16ee:	11 c0       	rjmp	.+34     	; 0x1712 <__floatsisf+0x6a>
    16f0:	77 23       	and	r23, r23
    16f2:	21 f0       	breq	.+8      	; 0x16fc <__floatsisf+0x54>
    16f4:	9e e8       	ldi	r25, 0x8E	; 142
    16f6:	87 2f       	mov	r24, r23
    16f8:	76 2f       	mov	r23, r22
    16fa:	05 c0       	rjmp	.+10     	; 0x1706 <__floatsisf+0x5e>
    16fc:	66 23       	and	r22, r22
    16fe:	71 f0       	breq	.+28     	; 0x171c <__floatsisf+0x74>
    1700:	96 e8       	ldi	r25, 0x86	; 134
    1702:	86 2f       	mov	r24, r22
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	60 e0       	ldi	r22, 0x00	; 0
    1708:	2a f0       	brmi	.+10     	; 0x1714 <__floatsisf+0x6c>
    170a:	9a 95       	dec	r25
    170c:	66 0f       	add	r22, r22
    170e:	77 1f       	adc	r23, r23
    1710:	88 1f       	adc	r24, r24
    1712:	da f7       	brpl	.-10     	; 0x170a <__floatsisf+0x62>
    1714:	88 0f       	add	r24, r24
    1716:	96 95       	lsr	r25
    1718:	87 95       	ror	r24
    171a:	97 f9       	bld	r25, 7
    171c:	08 95       	ret

0000171e <__fp_cmp>:
    171e:	99 0f       	add	r25, r25
    1720:	00 08       	sbc	r0, r0
    1722:	55 0f       	add	r21, r21
    1724:	aa 0b       	sbc	r26, r26
    1726:	e0 e8       	ldi	r30, 0x80	; 128
    1728:	fe ef       	ldi	r31, 0xFE	; 254
    172a:	16 16       	cp	r1, r22
    172c:	17 06       	cpc	r1, r23
    172e:	e8 07       	cpc	r30, r24
    1730:	f9 07       	cpc	r31, r25
    1732:	c0 f0       	brcs	.+48     	; 0x1764 <__fp_cmp+0x46>
    1734:	12 16       	cp	r1, r18
    1736:	13 06       	cpc	r1, r19
    1738:	e4 07       	cpc	r30, r20
    173a:	f5 07       	cpc	r31, r21
    173c:	98 f0       	brcs	.+38     	; 0x1764 <__fp_cmp+0x46>
    173e:	62 1b       	sub	r22, r18
    1740:	73 0b       	sbc	r23, r19
    1742:	84 0b       	sbc	r24, r20
    1744:	95 0b       	sbc	r25, r21
    1746:	39 f4       	brne	.+14     	; 0x1756 <__fp_cmp+0x38>
    1748:	0a 26       	eor	r0, r26
    174a:	61 f0       	breq	.+24     	; 0x1764 <__fp_cmp+0x46>
    174c:	23 2b       	or	r18, r19
    174e:	24 2b       	or	r18, r20
    1750:	25 2b       	or	r18, r21
    1752:	21 f4       	brne	.+8      	; 0x175c <__fp_cmp+0x3e>
    1754:	08 95       	ret
    1756:	0a 26       	eor	r0, r26
    1758:	09 f4       	brne	.+2      	; 0x175c <__fp_cmp+0x3e>
    175a:	a1 40       	sbci	r26, 0x01	; 1
    175c:	a6 95       	lsr	r26
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	81 1d       	adc	r24, r1
    1762:	81 1d       	adc	r24, r1
    1764:	08 95       	ret

00001766 <__fp_inf>:
    1766:	97 f9       	bld	r25, 7
    1768:	9f 67       	ori	r25, 0x7F	; 127
    176a:	80 e8       	ldi	r24, 0x80	; 128
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	60 e0       	ldi	r22, 0x00	; 0
    1770:	08 95       	ret

00001772 <__fp_nan>:
    1772:	9f ef       	ldi	r25, 0xFF	; 255
    1774:	80 ec       	ldi	r24, 0xC0	; 192
    1776:	08 95       	ret

00001778 <__fp_pscA>:
    1778:	00 24       	eor	r0, r0
    177a:	0a 94       	dec	r0
    177c:	16 16       	cp	r1, r22
    177e:	17 06       	cpc	r1, r23
    1780:	18 06       	cpc	r1, r24
    1782:	09 06       	cpc	r0, r25
    1784:	08 95       	ret

00001786 <__fp_pscB>:
    1786:	00 24       	eor	r0, r0
    1788:	0a 94       	dec	r0
    178a:	12 16       	cp	r1, r18
    178c:	13 06       	cpc	r1, r19
    178e:	14 06       	cpc	r1, r20
    1790:	05 06       	cpc	r0, r21
    1792:	08 95       	ret

00001794 <__fp_round>:
    1794:	09 2e       	mov	r0, r25
    1796:	03 94       	inc	r0
    1798:	00 0c       	add	r0, r0
    179a:	11 f4       	brne	.+4      	; 0x17a0 <__fp_round+0xc>
    179c:	88 23       	and	r24, r24
    179e:	52 f0       	brmi	.+20     	; 0x17b4 <__fp_round+0x20>
    17a0:	bb 0f       	add	r27, r27
    17a2:	40 f4       	brcc	.+16     	; 0x17b4 <__fp_round+0x20>
    17a4:	bf 2b       	or	r27, r31
    17a6:	11 f4       	brne	.+4      	; 0x17ac <__fp_round+0x18>
    17a8:	60 ff       	sbrs	r22, 0
    17aa:	04 c0       	rjmp	.+8      	; 0x17b4 <__fp_round+0x20>
    17ac:	6f 5f       	subi	r22, 0xFF	; 255
    17ae:	7f 4f       	sbci	r23, 0xFF	; 255
    17b0:	8f 4f       	sbci	r24, 0xFF	; 255
    17b2:	9f 4f       	sbci	r25, 0xFF	; 255
    17b4:	08 95       	ret

000017b6 <__fp_split3>:
    17b6:	57 fd       	sbrc	r21, 7
    17b8:	90 58       	subi	r25, 0x80	; 128
    17ba:	44 0f       	add	r20, r20
    17bc:	55 1f       	adc	r21, r21
    17be:	59 f0       	breq	.+22     	; 0x17d6 <__fp_splitA+0x10>
    17c0:	5f 3f       	cpi	r21, 0xFF	; 255
    17c2:	71 f0       	breq	.+28     	; 0x17e0 <__fp_splitA+0x1a>
    17c4:	47 95       	ror	r20

000017c6 <__fp_splitA>:
    17c6:	88 0f       	add	r24, r24
    17c8:	97 fb       	bst	r25, 7
    17ca:	99 1f       	adc	r25, r25
    17cc:	61 f0       	breq	.+24     	; 0x17e6 <__fp_splitA+0x20>
    17ce:	9f 3f       	cpi	r25, 0xFF	; 255
    17d0:	79 f0       	breq	.+30     	; 0x17f0 <__fp_splitA+0x2a>
    17d2:	87 95       	ror	r24
    17d4:	08 95       	ret
    17d6:	12 16       	cp	r1, r18
    17d8:	13 06       	cpc	r1, r19
    17da:	14 06       	cpc	r1, r20
    17dc:	55 1f       	adc	r21, r21
    17de:	f2 cf       	rjmp	.-28     	; 0x17c4 <__fp_split3+0xe>
    17e0:	46 95       	lsr	r20
    17e2:	f1 df       	rcall	.-30     	; 0x17c6 <__fp_splitA>
    17e4:	08 c0       	rjmp	.+16     	; 0x17f6 <__fp_splitA+0x30>
    17e6:	16 16       	cp	r1, r22
    17e8:	17 06       	cpc	r1, r23
    17ea:	18 06       	cpc	r1, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	f1 cf       	rjmp	.-30     	; 0x17d2 <__fp_splitA+0xc>
    17f0:	86 95       	lsr	r24
    17f2:	71 05       	cpc	r23, r1
    17f4:	61 05       	cpc	r22, r1
    17f6:	08 94       	sec
    17f8:	08 95       	ret

000017fa <__fp_zero>:
    17fa:	e8 94       	clt

000017fc <__fp_szero>:
    17fc:	bb 27       	eor	r27, r27
    17fe:	66 27       	eor	r22, r22
    1800:	77 27       	eor	r23, r23
    1802:	cb 01       	movw	r24, r22
    1804:	97 f9       	bld	r25, 7
    1806:	08 95       	ret

00001808 <__gesf2>:
    1808:	8a df       	rcall	.-236    	; 0x171e <__fp_cmp>
    180a:	08 f4       	brcc	.+2      	; 0x180e <__gesf2+0x6>
    180c:	8f ef       	ldi	r24, 0xFF	; 255
    180e:	08 95       	ret

00001810 <__udivmodsi4>:
    1810:	a1 e2       	ldi	r26, 0x21	; 33
    1812:	1a 2e       	mov	r1, r26
    1814:	aa 1b       	sub	r26, r26
    1816:	bb 1b       	sub	r27, r27
    1818:	fd 01       	movw	r30, r26
    181a:	0d c0       	rjmp	.+26     	; 0x1836 <__udivmodsi4_ep>

0000181c <__udivmodsi4_loop>:
    181c:	aa 1f       	adc	r26, r26
    181e:	bb 1f       	adc	r27, r27
    1820:	ee 1f       	adc	r30, r30
    1822:	ff 1f       	adc	r31, r31
    1824:	a2 17       	cp	r26, r18
    1826:	b3 07       	cpc	r27, r19
    1828:	e4 07       	cpc	r30, r20
    182a:	f5 07       	cpc	r31, r21
    182c:	20 f0       	brcs	.+8      	; 0x1836 <__udivmodsi4_ep>
    182e:	a2 1b       	sub	r26, r18
    1830:	b3 0b       	sbc	r27, r19
    1832:	e4 0b       	sbc	r30, r20
    1834:	f5 0b       	sbc	r31, r21

00001836 <__udivmodsi4_ep>:
    1836:	66 1f       	adc	r22, r22
    1838:	77 1f       	adc	r23, r23
    183a:	88 1f       	adc	r24, r24
    183c:	99 1f       	adc	r25, r25
    183e:	1a 94       	dec	r1
    1840:	69 f7       	brne	.-38     	; 0x181c <__udivmodsi4_loop>
    1842:	60 95       	com	r22
    1844:	70 95       	com	r23
    1846:	80 95       	com	r24
    1848:	90 95       	com	r25
    184a:	9b 01       	movw	r18, r22
    184c:	ac 01       	movw	r20, r24
    184e:	bd 01       	movw	r22, r26
    1850:	cf 01       	movw	r24, r30
    1852:	08 95       	ret

00001854 <_exit>:
    1854:	f8 94       	cli

00001856 <__stop_program>:
    1856:	ff cf       	rjmp	.-2      	; 0x1856 <__stop_program>
